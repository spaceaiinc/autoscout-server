// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/driver.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/driver.go -destination ./mock/mock_usecase/mock_driver.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	io "io"
	multipart "mime/multipart"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockFirebase is a mock of Firebase interface.
type MockFirebase struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseMockRecorder
}

// MockFirebaseMockRecorder is the mock recorder for MockFirebase.
type MockFirebaseMockRecorder struct {
	mock *MockFirebase
}

// NewMockFirebase creates a new mock instance.
func NewMockFirebase(ctrl *gomock.Controller) *MockFirebase {
	mock := &MockFirebase{ctrl: ctrl}
	mock.recorder = &MockFirebaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebase) EXPECT() *MockFirebaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockFirebase) CreateUser(email, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", email, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockFirebaseMockRecorder) CreateUser(email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockFirebase)(nil).CreateUser), email, password)
}

// DeleteUser mocks base method.
func (m *MockFirebase) DeleteUser(uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockFirebaseMockRecorder) DeleteUser(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockFirebase)(nil).DeleteUser), uid)
}

// GetCustomToken mocks base method.
func (m *MockFirebase) GetCustomToken(uid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomToken", uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomToken indicates an expected call of GetCustomToken.
func (mr *MockFirebaseMockRecorder) GetCustomToken(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomToken", reflect.TypeOf((*MockFirebase)(nil).GetCustomToken), uid)
}

// GetCustomTokenWithTimeLimit mocks base method.
func (m *MockFirebase) GetCustomTokenWithTimeLimit(uid string, add60minuteTime time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomTokenWithTimeLimit", uid, add60minuteTime)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomTokenWithTimeLimit indicates an expected call of GetCustomTokenWithTimeLimit.
func (mr *MockFirebaseMockRecorder) GetCustomTokenWithTimeLimit(uid, add60minuteTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomTokenWithTimeLimit", reflect.TypeOf((*MockFirebase)(nil).GetCustomTokenWithTimeLimit), uid, add60minuteTime)
}

// GetIDToken mocks base method.
func (m *MockFirebase) GetIDToken(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDToken indicates an expected call of GetIDToken.
func (mr *MockFirebaseMockRecorder) GetIDToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDToken", reflect.TypeOf((*MockFirebase)(nil).GetIDToken), token)
}

// GetPhoneNumber mocks base method.
func (m *MockFirebase) GetPhoneNumber(uid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhoneNumber", uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPhoneNumber indicates an expected call of GetPhoneNumber.
func (mr *MockFirebaseMockRecorder) GetPhoneNumber(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhoneNumber", reflect.TypeOf((*MockFirebase)(nil).GetPhoneNumber), uid)
}

// Set mocks base method.
func (m *MockFirebase) Set(doc string, data map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", doc, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockFirebaseMockRecorder) Set(doc, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockFirebase)(nil).Set), doc, data)
}

// SignOut mocks base method.
func (m *MockFirebase) SignOut(uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOut", uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignOut indicates an expected call of SignOut.
func (mr *MockFirebaseMockRecorder) SignOut(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockFirebase)(nil).SignOut), uid)
}

// UpdateEmail mocks base method.
func (m *MockFirebase) UpdateEmail(email, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", email, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockFirebaseMockRecorder) UpdateEmail(email, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockFirebase)(nil).UpdateEmail), email, uid)
}

// UpdatePassword mocks base method.
func (m *MockFirebase) UpdatePassword(password, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", password, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockFirebaseMockRecorder) UpdatePassword(password, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockFirebase)(nil).UpdatePassword), password, uid)
}

// UploadToStorageForAgentLine mocks base method.
func (m *MockFirebase) UploadToStorageForAgentLine(file *multipart.FileHeader, agentUUID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadToStorageForAgentLine", file, agentUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadToStorageForAgentLine indicates an expected call of UploadToStorageForAgentLine.
func (mr *MockFirebaseMockRecorder) UploadToStorageForAgentLine(file, agentUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadToStorageForAgentLine", reflect.TypeOf((*MockFirebase)(nil).UploadToStorageForAgentLine), file, agentUUID)
}

// UploadToStorageForJobSeekerLine mocks base method.
func (m *MockFirebase) UploadToStorageForJobSeekerLine(content io.ReadCloser, messageID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadToStorageForJobSeekerLine", content, messageID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadToStorageForJobSeekerLine indicates an expected call of UploadToStorageForJobSeekerLine.
func (mr *MockFirebaseMockRecorder) UploadToStorageForJobSeekerLine(content, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadToStorageForJobSeekerLine", reflect.TypeOf((*MockFirebase)(nil).UploadToStorageForJobSeekerLine), content, messageID)
}

// VerifyIDToken mocks base method.
func (m *MockFirebase) VerifyIDToken(idToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", idToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockFirebaseMockRecorder) VerifyIDToken(idToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockFirebase)(nil).VerifyIDToken), idToken)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockCache) Do(commandName string, args ...any) (any, error) {
	m.ctrl.T.Helper()
	varargs := []any{commandName}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockCacheMockRecorder) Do(commandName any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{commandName}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCache)(nil).Do), varargs...)
}

// GetBytes mocks base method.
func (m *MockCache) GetBytes(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytes", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBytes indicates an expected call of GetBytes.
func (mr *MockCacheMockRecorder) GetBytes(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytes", reflect.TypeOf((*MockCache)(nil).GetBytes), key)
}

// GetString mocks base method.
func (m *MockCache) GetString(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetString indicates an expected call of GetString.
func (mr *MockCacheMockRecorder) GetString(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockCache)(nil).GetString), key)
}

// Set mocks base method.
func (m *MockCache) Set(key string, obj any, ttl int) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, obj, ttl)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(key, obj, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), key, obj, ttl)
}

// Values mocks base method.
func (m *MockCache) Values(reply any, err error) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Values", reply, err)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Values indicates an expected call of Values.
func (mr *MockCacheMockRecorder) Values(reply, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Values", reflect.TypeOf((*MockCache)(nil).Values), reply, err)
}
