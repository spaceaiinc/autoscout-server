// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/repository.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/repository.go -destination ./mock/mock_usecase/mock_repository.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"
	time "time"

	entity "github.com/spaceaiinc/autoscout-server/domain/entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
	null "gopkg.in/guregu/null.v4"
)

// MockAgentRepository is a mock of AgentRepository interface.
type MockAgentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAgentRepositoryMockRecorder
}

// MockAgentRepositoryMockRecorder is the mock recorder for MockAgentRepository.
type MockAgentRepositoryMockRecorder struct {
	mock *MockAgentRepository
}

// NewMockAgentRepository creates a new mock instance.
func NewMockAgentRepository(ctrl *gomock.Controller) *MockAgentRepository {
	mock := &MockAgentRepository{ctrl: ctrl}
	mock.recorder = &MockAgentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentRepository) EXPECT() *MockAgentRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockAgentRepository) All() ([]*entity.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockAgentRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockAgentRepository)(nil).All))
}

// Create mocks base method.
func (m *MockAgentRepository) Create(agent *entity.Agent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", agent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAgentRepositoryMockRecorder) Create(agent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAgentRepository)(nil).Create), agent)
}

// FindByAgentStaffID mocks base method.
func (m *MockAgentRepository) FindByAgentStaffID(agentStaffID uint) (*entity.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAgentStaffID", agentStaffID)
	ret0, _ := ret[0].(*entity.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAgentStaffID indicates an expected call of FindByAgentStaffID.
func (mr *MockAgentRepositoryMockRecorder) FindByAgentStaffID(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAgentStaffID", reflect.TypeOf((*MockAgentRepository)(nil).FindByAgentStaffID), agentStaffID)
}

// FindByID mocks base method.
func (m *MockAgentRepository) FindByID(id uint) (*entity.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAgentRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAgentRepository)(nil).FindByID), id)
}

// FindByUUID mocks base method.
func (m *MockAgentRepository) FindByUUID(uuid uuid.UUID) (*entity.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", uuid)
	ret0, _ := ret[0].(*entity.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockAgentRepositoryMockRecorder) FindByUUID(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockAgentRepository)(nil).FindByUUID), uuid)
}

// FindLineChannelByAgentID mocks base method.
func (m *MockAgentRepository) FindLineChannelByAgentID(agentID uint) (*entity.AgentLineChannelParam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLineChannelByAgentID", agentID)
	ret0, _ := ret[0].(*entity.AgentLineChannelParam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLineChannelByAgentID indicates an expected call of FindLineChannelByAgentID.
func (mr *MockAgentRepositoryMockRecorder) FindLineChannelByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLineChannelByAgentID", reflect.TypeOf((*MockAgentRepository)(nil).FindLineChannelByAgentID), agentID)
}

// FindLineChannelByAgentUUID mocks base method.
func (m *MockAgentRepository) FindLineChannelByAgentUUID(agentUUID uuid.UUID) (*entity.AgentLineChannelParam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLineChannelByAgentUUID", agentUUID)
	ret0, _ := ret[0].(*entity.AgentLineChannelParam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLineChannelByAgentUUID indicates an expected call of FindLineChannelByAgentUUID.
func (mr *MockAgentRepositoryMockRecorder) FindLineChannelByAgentUUID(agentUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLineChannelByAgentUUID", reflect.TypeOf((*MockAgentRepository)(nil).FindLineChannelByAgentUUID), agentUUID)
}

// FindLineChannelByBotID mocks base method.
func (m *MockAgentRepository) FindLineChannelByBotID(botID string) (*entity.AgentLineChannelParam, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLineChannelByBotID", botID)
	ret0, _ := ret[0].(*entity.AgentLineChannelParam)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLineChannelByBotID indicates an expected call of FindLineChannelByBotID.
func (mr *MockAgentRepositoryMockRecorder) FindLineChannelByBotID(botID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLineChannelByBotID", reflect.TypeOf((*MockAgentRepository)(nil).FindLineChannelByBotID), botID)
}

// GetByIDList mocks base method.
func (m *MockAgentRepository) GetByIDList(idList []uint) ([]*entity.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockAgentRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockAgentRepository)(nil).GetByIDList), idList)
}

// GetByNotIDList mocks base method.
func (m *MockAgentRepository) GetByNotIDList(idList []uint) ([]*entity.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNotIDList", idList)
	ret0, _ := ret[0].([]*entity.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNotIDList indicates an expected call of GetByNotIDList.
func (mr *MockAgentRepositoryMockRecorder) GetByNotIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNotIDList", reflect.TypeOf((*MockAgentRepository)(nil).GetByNotIDList), idList)
}

// GetNotAllianceByMyAgentID mocks base method.
func (m *MockAgentRepository) GetNotAllianceByMyAgentID(myAgentID uint) ([]*entity.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotAllianceByMyAgentID", myAgentID)
	ret0, _ := ret[0].([]*entity.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotAllianceByMyAgentID indicates an expected call of GetNotAllianceByMyAgentID.
func (mr *MockAgentRepositoryMockRecorder) GetNotAllianceByMyAgentID(myAgentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotAllianceByMyAgentID", reflect.TypeOf((*MockAgentRepository)(nil).GetNotAllianceByMyAgentID), myAgentID)
}

// GetSendingActive mocks base method.
func (m *MockAgentRepository) GetSendingActive() ([]*entity.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingActive")
	ret0, _ := ret[0].([]*entity.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingActive indicates an expected call of GetSendingActive.
func (mr *MockAgentRepositoryMockRecorder) GetSendingActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingActive", reflect.TypeOf((*MockAgentRepository)(nil).GetSendingActive))
}

// Update mocks base method.
func (m *MockAgentRepository) Update(id uint, agent *entity.Agent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, agent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAgentRepositoryMockRecorder) Update(id, agent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAgentRepository)(nil).Update), id, agent)
}

// UpdateAgreementFileURL mocks base method.
func (m *MockAgentRepository) UpdateAgreementFileURL(id uint, agentAgreement entity.AgentAgreementFileURLParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgreementFileURL", id, agentAgreement)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgreementFileURL indicates an expected call of UpdateAgreementFileURL.
func (mr *MockAgentRepositoryMockRecorder) UpdateAgreementFileURL(id, agentAgreement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgreementFileURL", reflect.TypeOf((*MockAgentRepository)(nil).UpdateAgreementFileURL), id, agentAgreement)
}

// UpdateForAdmin mocks base method.
func (m *MockAgentRepository) UpdateForAdmin(id uint, agent entity.AgentForAdminParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateForAdmin", id, agent)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateForAdmin indicates an expected call of UpdateForAdmin.
func (mr *MockAgentRepositoryMockRecorder) UpdateForAdmin(id, agent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForAdmin", reflect.TypeOf((*MockAgentRepository)(nil).UpdateForAdmin), id, agent)
}

// UpdateLineChannel mocks base method.
func (m *MockAgentRepository) UpdateLineChannel(id uint, botID string, agentLineChannel entity.AgentLineChannelParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLineChannel", id, botID, agentLineChannel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLineChannel indicates an expected call of UpdateLineChannel.
func (mr *MockAgentRepositoryMockRecorder) UpdateLineChannel(id, botID, agentLineChannel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLineChannel", reflect.TypeOf((*MockAgentRepository)(nil).UpdateLineChannel), id, botID, agentLineChannel)
}

// MockAgentStaffRepository is a mock of AgentStaffRepository interface.
type MockAgentStaffRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAgentStaffRepositoryMockRecorder
}

// MockAgentStaffRepositoryMockRecorder is the mock recorder for MockAgentStaffRepository.
type MockAgentStaffRepositoryMockRecorder struct {
	mock *MockAgentStaffRepository
}

// NewMockAgentStaffRepository creates a new mock instance.
func NewMockAgentStaffRepository(ctrl *gomock.Controller) *MockAgentStaffRepository {
	mock := &MockAgentStaffRepository{ctrl: ctrl}
	mock.recorder = &MockAgentStaffRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentStaffRepository) EXPECT() *MockAgentStaffRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockAgentStaffRepository) All() ([]*entity.AgentStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.AgentStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockAgentStaffRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockAgentStaffRepository)(nil).All))
}

// Create mocks base method.
func (m *MockAgentStaffRepository) Create(agentStaff *entity.AgentStaff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", agentStaff)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAgentStaffRepositoryMockRecorder) Create(agentStaff any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAgentStaffRepository)(nil).Create), agentStaff)
}

// Delete mocks base method.
func (m *MockAgentStaffRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAgentStaffRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAgentStaffRepository)(nil).Delete), id)
}

// FindByFirebaseID mocks base method.
func (m *MockAgentStaffRepository) FindByFirebaseID(firebaseID string) (*entity.AgentStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFirebaseID", firebaseID)
	ret0, _ := ret[0].(*entity.AgentStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFirebaseID indicates an expected call of FindByFirebaseID.
func (mr *MockAgentStaffRepositoryMockRecorder) FindByFirebaseID(firebaseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFirebaseID", reflect.TypeOf((*MockAgentStaffRepository)(nil).FindByFirebaseID), firebaseID)
}

// FindByID mocks base method.
func (m *MockAgentStaffRepository) FindByID(id uint) (*entity.AgentStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.AgentStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAgentStaffRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAgentStaffRepository)(nil).FindByID), id)
}

// FindByJobSeekerID mocks base method.
func (m *MockAgentStaffRepository) FindByJobSeekerID(jobSeekerID uint) (*entity.AgentStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(*entity.AgentStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByJobSeekerID indicates an expected call of FindByJobSeekerID.
func (mr *MockAgentStaffRepositoryMockRecorder) FindByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByJobSeekerID", reflect.TypeOf((*MockAgentStaffRepository)(nil).FindByJobSeekerID), jobSeekerID)
}

// FindByName mocks base method.
func (m *MockAgentStaffRepository) FindByName(staffName string) (*entity.AgentStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", staffName)
	ret0, _ := ret[0].(*entity.AgentStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockAgentStaffRepositoryMockRecorder) FindByName(staffName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockAgentStaffRepository)(nil).FindByName), staffName)
}

// FindStaffAndAgentLine mocks base method.
func (m *MockAgentStaffRepository) FindStaffAndAgentLine(id uint) (*entity.AgentStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStaffAndAgentLine", id)
	ret0, _ := ret[0].(*entity.AgentStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStaffAndAgentLine indicates an expected call of FindStaffAndAgentLine.
func (mr *MockAgentStaffRepositoryMockRecorder) FindStaffAndAgentLine(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStaffAndAgentLine", reflect.TypeOf((*MockAgentStaffRepository)(nil).FindStaffAndAgentLine), id)
}

// FindStaffNameByJobSeekerID mocks base method.
func (m *MockAgentStaffRepository) FindStaffNameByJobSeekerID(jobSeekerID uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStaffNameByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStaffNameByJobSeekerID indicates an expected call of FindStaffNameByJobSeekerID.
func (mr *MockAgentStaffRepositoryMockRecorder) FindStaffNameByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStaffNameByJobSeekerID", reflect.TypeOf((*MockAgentStaffRepository)(nil).FindStaffNameByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockAgentStaffRepository) GetByAgentID(agentID uint) ([]*entity.AgentStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.AgentStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockAgentStaffRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockAgentStaffRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentIDAndIsDeletedFalse mocks base method.
func (m *MockAgentStaffRepository) GetByAgentIDAndIsDeletedFalse(agentID uint) ([]*entity.AgentStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndIsDeletedFalse", agentID)
	ret0, _ := ret[0].([]*entity.AgentStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndIsDeletedFalse indicates an expected call of GetByAgentIDAndIsDeletedFalse.
func (mr *MockAgentStaffRepositoryMockRecorder) GetByAgentIDAndIsDeletedFalse(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndIsDeletedFalse", reflect.TypeOf((*MockAgentStaffRepository)(nil).GetByAgentIDAndIsDeletedFalse), agentID)
}

// GetByAgentIDAndNotManagementID mocks base method.
func (m *MockAgentStaffRepository) GetByAgentIDAndNotManagementID(agentID, managementID uint) ([]*entity.AgentStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndNotManagementID", agentID, managementID)
	ret0, _ := ret[0].([]*entity.AgentStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndNotManagementID indicates an expected call of GetByAgentIDAndNotManagementID.
func (mr *MockAgentStaffRepositoryMockRecorder) GetByAgentIDAndNotManagementID(agentID, managementID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndNotManagementID", reflect.TypeOf((*MockAgentStaffRepository)(nil).GetByAgentIDAndNotManagementID), agentID, managementID)
}

// GetByAgentIDAndUsageStatusAvailable mocks base method.
func (m *MockAgentStaffRepository) GetByAgentIDAndUsageStatusAvailable(agentID uint) ([]*entity.AgentStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndUsageStatusAvailable", agentID)
	ret0, _ := ret[0].([]*entity.AgentStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndUsageStatusAvailable indicates an expected call of GetByAgentIDAndUsageStatusAvailable.
func (mr *MockAgentStaffRepositoryMockRecorder) GetByAgentIDAndUsageStatusAvailable(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndUsageStatusAvailable", reflect.TypeOf((*MockAgentStaffRepository)(nil).GetByAgentIDAndUsageStatusAvailable), agentID)
}

// GetByNotIDAndAgentIDAndAllianceAgentID mocks base method.
func (m *MockAgentStaffRepository) GetByNotIDAndAgentIDAndAllianceAgentID(id, agentID, allianceAgentID uint) ([]*entity.AgentStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNotIDAndAgentIDAndAllianceAgentID", id, agentID, allianceAgentID)
	ret0, _ := ret[0].([]*entity.AgentStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNotIDAndAgentIDAndAllianceAgentID indicates an expected call of GetByNotIDAndAgentIDAndAllianceAgentID.
func (mr *MockAgentStaffRepositoryMockRecorder) GetByNotIDAndAgentIDAndAllianceAgentID(id, agentID, allianceAgentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNotIDAndAgentIDAndAllianceAgentID", reflect.TypeOf((*MockAgentStaffRepository)(nil).GetByNotIDAndAgentIDAndAllianceAgentID), id, agentID, allianceAgentID)
}

// Update mocks base method.
func (m *MockAgentStaffRepository) Update(id uint, agent *entity.AgentStaff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, agent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAgentStaffRepositoryMockRecorder) Update(id, agent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAgentStaffRepository)(nil).Update), id, agent)
}

// UpdateAuthority mocks base method.
func (m *MockAgentStaffRepository) UpdateAuthority(id, authority uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthority", id, authority)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthority indicates an expected call of UpdateAuthority.
func (mr *MockAgentStaffRepositoryMockRecorder) UpdateAuthority(id, authority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthority", reflect.TypeOf((*MockAgentStaffRepository)(nil).UpdateAuthority), id, authority)
}

// UpdateEmail mocks base method.
func (m *MockAgentStaffRepository) UpdateEmail(id uint, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", id, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockAgentStaffRepositoryMockRecorder) UpdateEmail(id, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockAgentStaffRepository)(nil).UpdateEmail), id, email)
}

// UpdateLastLogin mocks base method.
func (m *MockAgentStaffRepository) UpdateLastLogin(id uint, lastLoginTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastLogin", id, lastLoginTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastLogin indicates an expected call of UpdateLastLogin.
func (mr *MockAgentStaffRepositoryMockRecorder) UpdateLastLogin(id, lastLoginTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastLogin", reflect.TypeOf((*MockAgentStaffRepository)(nil).UpdateLastLogin), id, lastLoginTime)
}

// UpdateNotificationJobSeeker mocks base method.
func (m *MockAgentStaffRepository) UpdateNotificationJobSeeker(id uint, notificationJobSeeker bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationJobSeeker", id, notificationJobSeeker)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationJobSeeker indicates an expected call of UpdateNotificationJobSeeker.
func (mr *MockAgentStaffRepositoryMockRecorder) UpdateNotificationJobSeeker(id, notificationJobSeeker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationJobSeeker", reflect.TypeOf((*MockAgentStaffRepository)(nil).UpdateNotificationJobSeeker), id, notificationJobSeeker)
}

// UpdateNotificationUnwatched mocks base method.
func (m *MockAgentStaffRepository) UpdateNotificationUnwatched(id uint, notificationUnwatched bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationUnwatched", id, notificationUnwatched)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationUnwatched indicates an expected call of UpdateNotificationUnwatched.
func (mr *MockAgentStaffRepositoryMockRecorder) UpdateNotificationUnwatched(id, notificationUnwatched any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationUnwatched", reflect.TypeOf((*MockAgentStaffRepository)(nil).UpdateNotificationUnwatched), id, notificationUnwatched)
}

// UpdateUsageEnd mocks base method.
func (m *MockAgentStaffRepository) UpdateUsageEnd(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsageEnd", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsageEnd indicates an expected call of UpdateUsageEnd.
func (mr *MockAgentStaffRepositoryMockRecorder) UpdateUsageEnd(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsageEnd", reflect.TypeOf((*MockAgentStaffRepository)(nil).UpdateUsageEnd), id)
}

// UpdateUsageStart mocks base method.
func (m *MockAgentStaffRepository) UpdateUsageStart(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsageStart", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsageStart indicates an expected call of UpdateUsageStart.
func (mr *MockAgentStaffRepositoryMockRecorder) UpdateUsageStart(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsageStart", reflect.TypeOf((*MockAgentStaffRepository)(nil).UpdateUsageStart), id)
}

// MockAgentAllianceRepository is a mock of AgentAllianceRepository interface.
type MockAgentAllianceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAgentAllianceRepositoryMockRecorder
}

// MockAgentAllianceRepositoryMockRecorder is the mock recorder for MockAgentAllianceRepository.
type MockAgentAllianceRepositoryMockRecorder struct {
	mock *MockAgentAllianceRepository
}

// NewMockAgentAllianceRepository creates a new mock instance.
func NewMockAgentAllianceRepository(ctrl *gomock.Controller) *MockAgentAllianceRepository {
	mock := &MockAgentAllianceRepository{ctrl: ctrl}
	mock.recorder = &MockAgentAllianceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentAllianceRepository) EXPECT() *MockAgentAllianceRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockAgentAllianceRepository) All() ([]*entity.AgentAlliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.AgentAlliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockAgentAllianceRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockAgentAllianceRepository)(nil).All))
}

// Create mocks base method.
func (m *MockAgentAllianceRepository) Create(agentAlliance *entity.AgentAlliance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", agentAlliance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAgentAllianceRepositoryMockRecorder) Create(agentAlliance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAgentAllianceRepository)(nil).Create), agentAlliance)
}

// FindByAgentID mocks base method.
func (m *MockAgentAllianceRepository) FindByAgentID(agent1ID, agent2ID uint) (*entity.AgentAlliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAgentID", agent1ID, agent2ID)
	ret0, _ := ret[0].(*entity.AgentAlliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAgentID indicates an expected call of FindByAgentID.
func (mr *MockAgentAllianceRepositoryMockRecorder) FindByAgentID(agent1ID, agent2ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAgentID", reflect.TypeOf((*MockAgentAllianceRepository)(nil).FindByAgentID), agent1ID, agent2ID)
}

// FindByID mocks base method.
func (m *MockAgentAllianceRepository) FindByID(id uint) (*entity.AgentAlliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.AgentAlliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAgentAllianceRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAgentAllianceRepository)(nil).FindByID), id)
}

// GetByAgentIDAndRequestDone mocks base method.
func (m *MockAgentAllianceRepository) GetByAgentIDAndRequestDone(agentID uint) ([]*entity.AgentAlliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndRequestDone", agentID)
	ret0, _ := ret[0].([]*entity.AgentAlliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndRequestDone indicates an expected call of GetByAgentIDAndRequestDone.
func (mr *MockAgentAllianceRepositoryMockRecorder) GetByAgentIDAndRequestDone(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndRequestDone", reflect.TypeOf((*MockAgentAllianceRepository)(nil).GetByAgentIDAndRequestDone), agentID)
}

// GetByMyAgentIDAndOtherIDList mocks base method.
func (m *MockAgentAllianceRepository) GetByMyAgentIDAndOtherIDList(myAgentID uint, otherAgentIDList []uint) ([]*entity.AgentAlliance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMyAgentIDAndOtherIDList", myAgentID, otherAgentIDList)
	ret0, _ := ret[0].([]*entity.AgentAlliance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMyAgentIDAndOtherIDList indicates an expected call of GetByMyAgentIDAndOtherIDList.
func (mr *MockAgentAllianceRepositoryMockRecorder) GetByMyAgentIDAndOtherIDList(myAgentID, otherAgentIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMyAgentIDAndOtherIDList", reflect.TypeOf((*MockAgentAllianceRepository)(nil).GetByMyAgentIDAndOtherIDList), myAgentID, otherAgentIDList)
}

// Update mocks base method.
func (m *MockAgentAllianceRepository) Update(id uint, agentAlliance *entity.AgentAlliance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, agentAlliance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAgentAllianceRepositoryMockRecorder) Update(id, agentAlliance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAgentAllianceRepository)(nil).Update), id, agentAlliance)
}

// UpdateAgentRequest mocks base method.
func (m *MockAgentAllianceRepository) UpdateAgentRequest(id, agentID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentRequest", id, agentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentRequest indicates an expected call of UpdateAgentRequest.
func (mr *MockAgentAllianceRepositoryMockRecorder) UpdateAgentRequest(id, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentRequest", reflect.TypeOf((*MockAgentAllianceRepository)(nil).UpdateAgentRequest), id, agentID)
}

// MockAgentRobotRepository is a mock of AgentRobotRepository interface.
type MockAgentRobotRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAgentRobotRepositoryMockRecorder
}

// MockAgentRobotRepositoryMockRecorder is the mock recorder for MockAgentRobotRepository.
type MockAgentRobotRepositoryMockRecorder struct {
	mock *MockAgentRobotRepository
}

// NewMockAgentRobotRepository creates a new mock instance.
func NewMockAgentRobotRepository(ctrl *gomock.Controller) *MockAgentRobotRepository {
	mock := &MockAgentRobotRepository{ctrl: ctrl}
	mock.recorder = &MockAgentRobotRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentRobotRepository) EXPECT() *MockAgentRobotRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockAgentRobotRepository) All() ([]*entity.AgentRobot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.AgentRobot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockAgentRobotRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockAgentRobotRepository)(nil).All))
}

// Create mocks base method.
func (m *MockAgentRobotRepository) Create(robot *entity.AgentRobot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", robot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAgentRobotRepositoryMockRecorder) Create(robot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAgentRobotRepository)(nil).Create), robot)
}

// Delete mocks base method.
func (m *MockAgentRobotRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAgentRobotRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAgentRobotRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockAgentRobotRepository) FindByID(id uint) (*entity.AgentRobot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.AgentRobot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAgentRobotRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAgentRobotRepository)(nil).FindByID), id)
}

// GetByAgentID mocks base method.
func (m *MockAgentRobotRepository) GetByAgentID(agentID uint) ([]*entity.AgentRobot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.AgentRobot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockAgentRobotRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockAgentRobotRepository)(nil).GetByAgentID), agentID)
}

// Update mocks base method.
func (m *MockAgentRobotRepository) Update(id uint, robot *entity.AgentRobot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, robot)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAgentRobotRepositoryMockRecorder) Update(id, robot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAgentRobotRepository)(nil).Update), id, robot)
}

// MockAgentInflowChannelOptionRepository is a mock of AgentInflowChannelOptionRepository interface.
type MockAgentInflowChannelOptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAgentInflowChannelOptionRepositoryMockRecorder
}

// MockAgentInflowChannelOptionRepositoryMockRecorder is the mock recorder for MockAgentInflowChannelOptionRepository.
type MockAgentInflowChannelOptionRepositoryMockRecorder struct {
	mock *MockAgentInflowChannelOptionRepository
}

// NewMockAgentInflowChannelOptionRepository creates a new mock instance.
func NewMockAgentInflowChannelOptionRepository(ctrl *gomock.Controller) *MockAgentInflowChannelOptionRepository {
	mock := &MockAgentInflowChannelOptionRepository{ctrl: ctrl}
	mock.recorder = &MockAgentInflowChannelOptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentInflowChannelOptionRepository) EXPECT() *MockAgentInflowChannelOptionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAgentInflowChannelOptionRepository) Create(inflowChannelOption *entity.AgentInflowChannelOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", inflowChannelOption)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAgentInflowChannelOptionRepositoryMockRecorder) Create(inflowChannelOption any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAgentInflowChannelOptionRepository)(nil).Create), inflowChannelOption)
}

// FindByID mocks base method.
func (m *MockAgentInflowChannelOptionRepository) FindByID(id uint) (*entity.AgentInflowChannelOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.AgentInflowChannelOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAgentInflowChannelOptionRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAgentInflowChannelOptionRepository)(nil).FindByID), id)
}

// GetByAgentID mocks base method.
func (m *MockAgentInflowChannelOptionRepository) GetByAgentID(agentID uint) ([]*entity.AgentInflowChannelOption, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.AgentInflowChannelOption)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockAgentInflowChannelOptionRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockAgentInflowChannelOptionRepository)(nil).GetByAgentID), agentID)
}

// Update mocks base method.
func (m *MockAgentInflowChannelOptionRepository) Update(id uint, inflowChannelOption *entity.AgentInflowChannelOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, inflowChannelOption)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAgentInflowChannelOptionRepositoryMockRecorder) Update(id, inflowChannelOption any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAgentInflowChannelOptionRepository)(nil).Update), id, inflowChannelOption)
}

// MockEnterpriseProfileRepository is a mock of EnterpriseProfileRepository interface.
type MockEnterpriseProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnterpriseProfileRepositoryMockRecorder
}

// MockEnterpriseProfileRepositoryMockRecorder is the mock recorder for MockEnterpriseProfileRepository.
type MockEnterpriseProfileRepositoryMockRecorder struct {
	mock *MockEnterpriseProfileRepository
}

// NewMockEnterpriseProfileRepository creates a new mock instance.
func NewMockEnterpriseProfileRepository(ctrl *gomock.Controller) *MockEnterpriseProfileRepository {
	mock := &MockEnterpriseProfileRepository{ctrl: ctrl}
	mock.recorder = &MockEnterpriseProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnterpriseProfileRepository) EXPECT() *MockEnterpriseProfileRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockEnterpriseProfileRepository) All() ([]*entity.EnterpriseProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.EnterpriseProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockEnterpriseProfileRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockEnterpriseProfileRepository)(nil).All))
}

// CheckPostCode mocks base method.
func (m *MockEnterpriseProfileRepository) CheckPostCode(postCodeUnder string) (*entity.EnterpriseProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPostCode", postCodeUnder)
	ret0, _ := ret[0].(*entity.EnterpriseProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPostCode indicates an expected call of CheckPostCode.
func (mr *MockEnterpriseProfileRepositoryMockRecorder) CheckPostCode(postCodeUnder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPostCode", reflect.TypeOf((*MockEnterpriseProfileRepository)(nil).CheckPostCode), postCodeUnder)
}

// Create mocks base method.
func (m *MockEnterpriseProfileRepository) Create(enterprise *entity.EnterpriseProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", enterprise)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEnterpriseProfileRepositoryMockRecorder) Create(enterprise any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEnterpriseProfileRepository)(nil).Create), enterprise)
}

// Delete mocks base method.
func (m *MockEnterpriseProfileRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEnterpriseProfileRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEnterpriseProfileRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockEnterpriseProfileRepository) FindByID(id uint) (*entity.EnterpriseProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.EnterpriseProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockEnterpriseProfileRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockEnterpriseProfileRepository)(nil).FindByID), id)
}

// FindByJobInformationID mocks base method.
func (m *MockEnterpriseProfileRepository) FindByJobInformationID(jobInformationID uint) (*entity.EnterpriseProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByJobInformationID", jobInformationID)
	ret0, _ := ret[0].(*entity.EnterpriseProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByJobInformationID indicates an expected call of FindByJobInformationID.
func (mr *MockEnterpriseProfileRepositoryMockRecorder) FindByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByJobInformationID", reflect.TypeOf((*MockEnterpriseProfileRepository)(nil).FindByJobInformationID), jobInformationID)
}

// GetByAgentID mocks base method.
func (m *MockEnterpriseProfileRepository) GetByAgentID(agentID uint) ([]*entity.EnterpriseProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.EnterpriseProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockEnterpriseProfileRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockEnterpriseProfileRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentIDAndFreeWord mocks base method.
func (m *MockEnterpriseProfileRepository) GetByAgentIDAndFreeWord(agentID uint, freeWord string) ([]*entity.EnterpriseProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndFreeWord", agentID, freeWord)
	ret0, _ := ret[0].([]*entity.EnterpriseProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndFreeWord indicates an expected call of GetByAgentIDAndFreeWord.
func (mr *MockEnterpriseProfileRepositoryMockRecorder) GetByAgentIDAndFreeWord(agentID, freeWord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndFreeWord", reflect.TypeOf((*MockEnterpriseProfileRepository)(nil).GetByAgentIDAndFreeWord), agentID, freeWord)
}

// GetByAgentStaffID mocks base method.
func (m *MockEnterpriseProfileRepository) GetByAgentStaffID(agentStaffID uint) ([]*entity.EnterpriseProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentStaffID", agentStaffID)
	ret0, _ := ret[0].([]*entity.EnterpriseProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentStaffID indicates an expected call of GetByAgentStaffID.
func (mr *MockEnterpriseProfileRepositoryMockRecorder) GetByAgentStaffID(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentStaffID", reflect.TypeOf((*MockEnterpriseProfileRepository)(nil).GetByAgentStaffID), agentStaffID)
}

// Update mocks base method.
func (m *MockEnterpriseProfileRepository) Update(id uint, enterprise *entity.EnterpriseProfile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, enterprise)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockEnterpriseProfileRepositoryMockRecorder) Update(id, enterprise any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEnterpriseProfileRepository)(nil).Update), id, enterprise)
}

// UpdateAgentStaffID mocks base method.
func (m *MockEnterpriseProfileRepository) UpdateAgentStaffID(id, agentStaffID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentStaffID", id, agentStaffID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentStaffID indicates an expected call of UpdateAgentStaffID.
func (mr *MockEnterpriseProfileRepositoryMockRecorder) UpdateAgentStaffID(id, agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentStaffID", reflect.TypeOf((*MockEnterpriseProfileRepository)(nil).UpdateAgentStaffID), id, agentStaffID)
}

// MockEnterpriseIndustryRepository is a mock of EnterpriseIndustryRepository interface.
type MockEnterpriseIndustryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnterpriseIndustryRepositoryMockRecorder
}

// MockEnterpriseIndustryRepositoryMockRecorder is the mock recorder for MockEnterpriseIndustryRepository.
type MockEnterpriseIndustryRepositoryMockRecorder struct {
	mock *MockEnterpriseIndustryRepository
}

// NewMockEnterpriseIndustryRepository creates a new mock instance.
func NewMockEnterpriseIndustryRepository(ctrl *gomock.Controller) *MockEnterpriseIndustryRepository {
	mock := &MockEnterpriseIndustryRepository{ctrl: ctrl}
	mock.recorder = &MockEnterpriseIndustryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnterpriseIndustryRepository) EXPECT() *MockEnterpriseIndustryRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockEnterpriseIndustryRepository) All() ([]*entity.EnterpriseIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.EnterpriseIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockEnterpriseIndustryRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockEnterpriseIndustryRepository)(nil).All))
}

// Create mocks base method.
func (m *MockEnterpriseIndustryRepository) Create(industry *entity.EnterpriseIndustry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", industry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEnterpriseIndustryRepositoryMockRecorder) Create(industry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEnterpriseIndustryRepository)(nil).Create), industry)
}

// DeleteByEnterpriseID mocks base method.
func (m *MockEnterpriseIndustryRepository) DeleteByEnterpriseID(enterpriseID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByEnterpriseID indicates an expected call of DeleteByEnterpriseID.
func (mr *MockEnterpriseIndustryRepositoryMockRecorder) DeleteByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByEnterpriseID", reflect.TypeOf((*MockEnterpriseIndustryRepository)(nil).DeleteByEnterpriseID), enterpriseID)
}

// GetByAgentID mocks base method.
func (m *MockEnterpriseIndustryRepository) GetByAgentID(agentID uint) ([]*entity.EnterpriseIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.EnterpriseIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockEnterpriseIndustryRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockEnterpriseIndustryRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentStaffID mocks base method.
func (m *MockEnterpriseIndustryRepository) GetByAgentStaffID(agentStaffID uint) ([]*entity.EnterpriseIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentStaffID", agentStaffID)
	ret0, _ := ret[0].([]*entity.EnterpriseIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentStaffID indicates an expected call of GetByAgentStaffID.
func (mr *MockEnterpriseIndustryRepositoryMockRecorder) GetByAgentStaffID(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentStaffID", reflect.TypeOf((*MockEnterpriseIndustryRepository)(nil).GetByAgentStaffID), agentStaffID)
}

// GetByBillingAddressID mocks base method.
func (m *MockEnterpriseIndustryRepository) GetByBillingAddressID(enterpriseID uint) ([]*entity.EnterpriseIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", enterpriseID)
	ret0, _ := ret[0].([]*entity.EnterpriseIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockEnterpriseIndustryRepositoryMockRecorder) GetByBillingAddressID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockEnterpriseIndustryRepository)(nil).GetByBillingAddressID), enterpriseID)
}

// GetByEnterpriseID mocks base method.
func (m *MockEnterpriseIndustryRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.EnterpriseIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.EnterpriseIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockEnterpriseIndustryRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockEnterpriseIndustryRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByEnterpriseIDList mocks base method.
func (m *MockEnterpriseIndustryRepository) GetByEnterpriseIDList(enterpriseIDList []uint) ([]*entity.EnterpriseIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseIDList", enterpriseIDList)
	ret0, _ := ret[0].([]*entity.EnterpriseIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseIDList indicates an expected call of GetByEnterpriseIDList.
func (mr *MockEnterpriseIndustryRepositoryMockRecorder) GetByEnterpriseIDList(enterpriseIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseIDList", reflect.TypeOf((*MockEnterpriseIndustryRepository)(nil).GetByEnterpriseIDList), enterpriseIDList)
}

// GetByJobInformationID mocks base method.
func (m *MockEnterpriseIndustryRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.EnterpriseIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.EnterpriseIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockEnterpriseIndustryRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockEnterpriseIndustryRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockEnterpriseIndustryRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.EnterpriseIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.EnterpriseIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockEnterpriseIndustryRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockEnterpriseIndustryRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// MockEnterpriseReferenceMaterialRepository is a mock of EnterpriseReferenceMaterialRepository interface.
type MockEnterpriseReferenceMaterialRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnterpriseReferenceMaterialRepositoryMockRecorder
}

// MockEnterpriseReferenceMaterialRepositoryMockRecorder is the mock recorder for MockEnterpriseReferenceMaterialRepository.
type MockEnterpriseReferenceMaterialRepositoryMockRecorder struct {
	mock *MockEnterpriseReferenceMaterialRepository
}

// NewMockEnterpriseReferenceMaterialRepository creates a new mock instance.
func NewMockEnterpriseReferenceMaterialRepository(ctrl *gomock.Controller) *MockEnterpriseReferenceMaterialRepository {
	mock := &MockEnterpriseReferenceMaterialRepository{ctrl: ctrl}
	mock.recorder = &MockEnterpriseReferenceMaterialRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnterpriseReferenceMaterialRepository) EXPECT() *MockEnterpriseReferenceMaterialRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockEnterpriseReferenceMaterialRepository) All() ([]*entity.EnterpriseReferenceMaterial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.EnterpriseReferenceMaterial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockEnterpriseReferenceMaterialRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockEnterpriseReferenceMaterialRepository)(nil).All))
}

// Create mocks base method.
func (m *MockEnterpriseReferenceMaterialRepository) Create(referenceMaterial *entity.EnterpriseReferenceMaterial) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", referenceMaterial)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEnterpriseReferenceMaterialRepositoryMockRecorder) Create(referenceMaterial any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEnterpriseReferenceMaterialRepository)(nil).Create), referenceMaterial)
}

// DeleteByEnterpriseID mocks base method.
func (m *MockEnterpriseReferenceMaterialRepository) DeleteByEnterpriseID(enterpriseID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByEnterpriseID indicates an expected call of DeleteByEnterpriseID.
func (mr *MockEnterpriseReferenceMaterialRepositoryMockRecorder) DeleteByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByEnterpriseID", reflect.TypeOf((*MockEnterpriseReferenceMaterialRepository)(nil).DeleteByEnterpriseID), enterpriseID)
}

// FindByEnterpriseID mocks base method.
func (m *MockEnterpriseReferenceMaterialRepository) FindByEnterpriseID(enterpriseID uint) (*entity.EnterpriseReferenceMaterial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].(*entity.EnterpriseReferenceMaterial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEnterpriseID indicates an expected call of FindByEnterpriseID.
func (mr *MockEnterpriseReferenceMaterialRepositoryMockRecorder) FindByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEnterpriseID", reflect.TypeOf((*MockEnterpriseReferenceMaterialRepository)(nil).FindByEnterpriseID), enterpriseID)
}

// GetByAgentID mocks base method.
func (m *MockEnterpriseReferenceMaterialRepository) GetByAgentID(agentID uint) ([]*entity.EnterpriseReferenceMaterial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.EnterpriseReferenceMaterial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockEnterpriseReferenceMaterialRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockEnterpriseReferenceMaterialRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentStaffID mocks base method.
func (m *MockEnterpriseReferenceMaterialRepository) GetByAgentStaffID(agentStaffID uint) ([]*entity.EnterpriseReferenceMaterial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentStaffID", agentStaffID)
	ret0, _ := ret[0].([]*entity.EnterpriseReferenceMaterial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentStaffID indicates an expected call of GetByAgentStaffID.
func (mr *MockEnterpriseReferenceMaterialRepositoryMockRecorder) GetByAgentStaffID(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentStaffID", reflect.TypeOf((*MockEnterpriseReferenceMaterialRepository)(nil).GetByAgentStaffID), agentStaffID)
}

// UpdateByEnterpriseID mocks base method.
func (m *MockEnterpriseReferenceMaterialRepository) UpdateByEnterpriseID(enterpriseID uint, referenceMaterial *entity.EnterpriseReferenceMaterial) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByEnterpriseID", enterpriseID, referenceMaterial)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByEnterpriseID indicates an expected call of UpdateByEnterpriseID.
func (mr *MockEnterpriseReferenceMaterialRepositoryMockRecorder) UpdateByEnterpriseID(enterpriseID, referenceMaterial any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByEnterpriseID", reflect.TypeOf((*MockEnterpriseReferenceMaterialRepository)(nil).UpdateByEnterpriseID), enterpriseID, referenceMaterial)
}

// UpdateMaterialTypeByID mocks base method.
func (m *MockEnterpriseReferenceMaterialRepository) UpdateMaterialTypeByID(id, materialType uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMaterialTypeByID", id, materialType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMaterialTypeByID indicates an expected call of UpdateMaterialTypeByID.
func (mr *MockEnterpriseReferenceMaterialRepositoryMockRecorder) UpdateMaterialTypeByID(id, materialType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMaterialTypeByID", reflect.TypeOf((*MockEnterpriseReferenceMaterialRepository)(nil).UpdateMaterialTypeByID), id, materialType)
}

// MockEnterpriseActivityRepository is a mock of EnterpriseActivityRepository interface.
type MockEnterpriseActivityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEnterpriseActivityRepositoryMockRecorder
}

// MockEnterpriseActivityRepositoryMockRecorder is the mock recorder for MockEnterpriseActivityRepository.
type MockEnterpriseActivityRepositoryMockRecorder struct {
	mock *MockEnterpriseActivityRepository
}

// NewMockEnterpriseActivityRepository creates a new mock instance.
func NewMockEnterpriseActivityRepository(ctrl *gomock.Controller) *MockEnterpriseActivityRepository {
	mock := &MockEnterpriseActivityRepository{ctrl: ctrl}
	mock.recorder = &MockEnterpriseActivityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnterpriseActivityRepository) EXPECT() *MockEnterpriseActivityRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockEnterpriseActivityRepository) All() ([]*entity.EnterpriseActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.EnterpriseActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockEnterpriseActivityRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockEnterpriseActivityRepository)(nil).All))
}

// Create mocks base method.
func (m *MockEnterpriseActivityRepository) Create(activity *entity.EnterpriseActivity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", activity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEnterpriseActivityRepositoryMockRecorder) Create(activity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEnterpriseActivityRepository)(nil).Create), activity)
}

// GetByAgentID mocks base method.
func (m *MockEnterpriseActivityRepository) GetByAgentID(agentID uint) ([]*entity.EnterpriseActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.EnterpriseActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockEnterpriseActivityRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockEnterpriseActivityRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentStaffID mocks base method.
func (m *MockEnterpriseActivityRepository) GetByAgentStaffID(agentStaffID uint) ([]*entity.EnterpriseActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentStaffID", agentStaffID)
	ret0, _ := ret[0].([]*entity.EnterpriseActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentStaffID indicates an expected call of GetByAgentStaffID.
func (mr *MockEnterpriseActivityRepositoryMockRecorder) GetByAgentStaffID(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentStaffID", reflect.TypeOf((*MockEnterpriseActivityRepository)(nil).GetByAgentStaffID), agentStaffID)
}

// GetByEnterpriseID mocks base method.
func (m *MockEnterpriseActivityRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.EnterpriseActivity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.EnterpriseActivity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockEnterpriseActivityRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockEnterpriseActivityRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// MockBillingAddressRepository is a mock of BillingAddressRepository interface.
type MockBillingAddressRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBillingAddressRepositoryMockRecorder
}

// MockBillingAddressRepositoryMockRecorder is the mock recorder for MockBillingAddressRepository.
type MockBillingAddressRepositoryMockRecorder struct {
	mock *MockBillingAddressRepository
}

// NewMockBillingAddressRepository creates a new mock instance.
func NewMockBillingAddressRepository(ctrl *gomock.Controller) *MockBillingAddressRepository {
	mock := &MockBillingAddressRepository{ctrl: ctrl}
	mock.recorder = &MockBillingAddressRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingAddressRepository) EXPECT() *MockBillingAddressRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockBillingAddressRepository) All() ([]*entity.BillingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.BillingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockBillingAddressRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockBillingAddressRepository)(nil).All))
}

// Create mocks base method.
func (m *MockBillingAddressRepository) Create(billingAddress *entity.BillingAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", billingAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBillingAddressRepositoryMockRecorder) Create(billingAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillingAddressRepository)(nil).Create), billingAddress)
}

// Delete mocks base method.
func (m *MockBillingAddressRepository) Delete(billingAddressID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", billingAddressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBillingAddressRepositoryMockRecorder) Delete(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBillingAddressRepository)(nil).Delete), billingAddressID)
}

// FindByID mocks base method.
func (m *MockBillingAddressRepository) FindByID(billingAddressID uint) (*entity.BillingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", billingAddressID)
	ret0, _ := ret[0].(*entity.BillingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockBillingAddressRepositoryMockRecorder) FindByID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockBillingAddressRepository)(nil).FindByID), billingAddressID)
}

// GetByAgentID mocks base method.
func (m *MockBillingAddressRepository) GetByAgentID(agentID uint) ([]*entity.BillingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.BillingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockBillingAddressRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockBillingAddressRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentIDAndFreeWord mocks base method.
func (m *MockBillingAddressRepository) GetByAgentIDAndFreeWord(agentID uint, freeWord string) ([]*entity.BillingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndFreeWord", agentID, freeWord)
	ret0, _ := ret[0].([]*entity.BillingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndFreeWord indicates an expected call of GetByAgentIDAndFreeWord.
func (mr *MockBillingAddressRepositoryMockRecorder) GetByAgentIDAndFreeWord(agentID, freeWord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndFreeWord", reflect.TypeOf((*MockBillingAddressRepository)(nil).GetByAgentIDAndFreeWord), agentID, freeWord)
}

// GetByAgentStaffID mocks base method.
func (m *MockBillingAddressRepository) GetByAgentStaffID(agentStaffID uint) ([]*entity.BillingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentStaffID", agentStaffID)
	ret0, _ := ret[0].([]*entity.BillingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentStaffID indicates an expected call of GetByAgentStaffID.
func (mr *MockBillingAddressRepositoryMockRecorder) GetByAgentStaffID(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentStaffID", reflect.TypeOf((*MockBillingAddressRepository)(nil).GetByAgentStaffID), agentStaffID)
}

// GetByEnterpriseID mocks base method.
func (m *MockBillingAddressRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.BillingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.BillingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockBillingAddressRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockBillingAddressRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// Update mocks base method.
func (m *MockBillingAddressRepository) Update(id uint, billingAddress *entity.BillingAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, billingAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBillingAddressRepositoryMockRecorder) Update(id, billingAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBillingAddressRepository)(nil).Update), id, billingAddress)
}

// UpdateAgentStaffID mocks base method.
func (m *MockBillingAddressRepository) UpdateAgentStaffID(id, agentStaffID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentStaffID", id, agentStaffID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentStaffID indicates an expected call of UpdateAgentStaffID.
func (mr *MockBillingAddressRepositoryMockRecorder) UpdateAgentStaffID(id, agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentStaffID", reflect.TypeOf((*MockBillingAddressRepository)(nil).UpdateAgentStaffID), id, agentStaffID)
}

// UpdateAgentStaffIDByBillingAddressIDList mocks base method.
func (m *MockBillingAddressRepository) UpdateAgentStaffIDByBillingAddressIDList(idList []uint, agentStaffID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentStaffIDByBillingAddressIDList", idList, agentStaffID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentStaffIDByBillingAddressIDList indicates an expected call of UpdateAgentStaffIDByBillingAddressIDList.
func (mr *MockBillingAddressRepositoryMockRecorder) UpdateAgentStaffIDByBillingAddressIDList(idList, agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentStaffIDByBillingAddressIDList", reflect.TypeOf((*MockBillingAddressRepository)(nil).UpdateAgentStaffIDByBillingAddressIDList), idList, agentStaffID)
}

// MockBillingAddressHRStaffRepository is a mock of BillingAddressHRStaffRepository interface.
type MockBillingAddressHRStaffRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBillingAddressHRStaffRepositoryMockRecorder
}

// MockBillingAddressHRStaffRepositoryMockRecorder is the mock recorder for MockBillingAddressHRStaffRepository.
type MockBillingAddressHRStaffRepositoryMockRecorder struct {
	mock *MockBillingAddressHRStaffRepository
}

// NewMockBillingAddressHRStaffRepository creates a new mock instance.
func NewMockBillingAddressHRStaffRepository(ctrl *gomock.Controller) *MockBillingAddressHRStaffRepository {
	mock := &MockBillingAddressHRStaffRepository{ctrl: ctrl}
	mock.recorder = &MockBillingAddressHRStaffRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingAddressHRStaffRepository) EXPECT() *MockBillingAddressHRStaffRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockBillingAddressHRStaffRepository) All() ([]*entity.BillingAddressHRStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.BillingAddressHRStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockBillingAddressHRStaffRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockBillingAddressHRStaffRepository)(nil).All))
}

// Create mocks base method.
func (m *MockBillingAddressHRStaffRepository) Create(hrStaff *entity.BillingAddressHRStaff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", hrStaff)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBillingAddressHRStaffRepositoryMockRecorder) Create(hrStaff any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillingAddressHRStaffRepository)(nil).Create), hrStaff)
}

// DeleteByBillingAddressID mocks base method.
func (m *MockBillingAddressHRStaffRepository) DeleteByBillingAddressID(billingAddressID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByBillingAddressID indicates an expected call of DeleteByBillingAddressID.
func (mr *MockBillingAddressHRStaffRepositoryMockRecorder) DeleteByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByBillingAddressID", reflect.TypeOf((*MockBillingAddressHRStaffRepository)(nil).DeleteByBillingAddressID), billingAddressID)
}

// GetByBillingAddressID mocks base method.
func (m *MockBillingAddressHRStaffRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.BillingAddressHRStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.BillingAddressHRStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockBillingAddressHRStaffRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockBillingAddressHRStaffRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockBillingAddressHRStaffRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.BillingAddressHRStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.BillingAddressHRStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockBillingAddressHRStaffRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockBillingAddressHRStaffRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// MockBillingAddressRAStaffRepository is a mock of BillingAddressRAStaffRepository interface.
type MockBillingAddressRAStaffRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBillingAddressRAStaffRepositoryMockRecorder
}

// MockBillingAddressRAStaffRepositoryMockRecorder is the mock recorder for MockBillingAddressRAStaffRepository.
type MockBillingAddressRAStaffRepositoryMockRecorder struct {
	mock *MockBillingAddressRAStaffRepository
}

// NewMockBillingAddressRAStaffRepository creates a new mock instance.
func NewMockBillingAddressRAStaffRepository(ctrl *gomock.Controller) *MockBillingAddressRAStaffRepository {
	mock := &MockBillingAddressRAStaffRepository{ctrl: ctrl}
	mock.recorder = &MockBillingAddressRAStaffRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingAddressRAStaffRepository) EXPECT() *MockBillingAddressRAStaffRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockBillingAddressRAStaffRepository) All() ([]*entity.BillingAddressRAStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.BillingAddressRAStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockBillingAddressRAStaffRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockBillingAddressRAStaffRepository)(nil).All))
}

// Create mocks base method.
func (m *MockBillingAddressRAStaffRepository) Create(raStaff *entity.BillingAddressRAStaff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", raStaff)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBillingAddressRAStaffRepositoryMockRecorder) Create(raStaff any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBillingAddressRAStaffRepository)(nil).Create), raStaff)
}

// DeleteByBillingAddressID mocks base method.
func (m *MockBillingAddressRAStaffRepository) DeleteByBillingAddressID(billingAddressID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByBillingAddressID indicates an expected call of DeleteByBillingAddressID.
func (mr *MockBillingAddressRAStaffRepositoryMockRecorder) DeleteByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByBillingAddressID", reflect.TypeOf((*MockBillingAddressRAStaffRepository)(nil).DeleteByBillingAddressID), billingAddressID)
}

// GetByBillingAddressID mocks base method.
func (m *MockBillingAddressRAStaffRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.BillingAddressRAStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.BillingAddressRAStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockBillingAddressRAStaffRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockBillingAddressRAStaffRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockBillingAddressRAStaffRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.BillingAddressRAStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.BillingAddressRAStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockBillingAddressRAStaffRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockBillingAddressRAStaffRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// MockJobInformationRepository is a mock of JobInformationRepository interface.
type MockJobInformationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationRepositoryMockRecorder
}

// MockJobInformationRepositoryMockRecorder is the mock recorder for MockJobInformationRepository.
type MockJobInformationRepositoryMockRecorder struct {
	mock *MockJobInformationRepository
}

// NewMockJobInformationRepository creates a new mock instance.
func NewMockJobInformationRepository(ctrl *gomock.Controller) *MockJobInformationRepository {
	mock := &MockJobInformationRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationRepository) EXPECT() *MockJobInformationRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationRepository) All() ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationRepository) Create(jobInformation *entity.JobInformation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", jobInformation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationRepositoryMockRecorder) Create(jobInformation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationRepository)(nil).Create), jobInformation)
}

// Delete mocks base method.
func (m *MockJobInformationRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockJobInformationRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockJobInformationRepository)(nil).Delete), id)
}

// DeleteByBillingAddressID mocks base method.
func (m *MockJobInformationRepository) DeleteByBillingAddressID(billingAddressID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByBillingAddressID indicates an expected call of DeleteByBillingAddressID.
func (mr *MockJobInformationRepositoryMockRecorder) DeleteByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByBillingAddressID", reflect.TypeOf((*MockJobInformationRepository)(nil).DeleteByBillingAddressID), billingAddressID)
}

// FindByID mocks base method.
func (m *MockJobInformationRepository) FindByID(jobInformationD uint) (*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", jobInformationD)
	ret0, _ := ret[0].(*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockJobInformationRepositoryMockRecorder) FindByID(jobInformationD any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockJobInformationRepository)(nil).FindByID), jobInformationD)
}

// FindByTaskGroupUUID mocks base method.
func (m *MockJobInformationRepository) FindByTaskGroupUUID(uuid uuid.UUID) (*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTaskGroupUUID", uuid)
	ret0, _ := ret[0].(*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTaskGroupUUID indicates an expected call of FindByTaskGroupUUID.
func (mr *MockJobInformationRepositoryMockRecorder) FindByTaskGroupUUID(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTaskGroupUUID", reflect.TypeOf((*MockJobInformationRepository)(nil).FindByTaskGroupUUID), uuid)
}

// FindByUUID mocks base method.
func (m *MockJobInformationRepository) FindByUUID(uuid uuid.UUID) (*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", uuid)
	ret0, _ := ret[0].(*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockJobInformationRepositoryMockRecorder) FindByUUID(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockJobInformationRepository)(nil).FindByUUID), uuid)
}

// GetActiveAllByAgentID mocks base method.
func (m *MockJobInformationRepository) GetActiveAllByAgentID(agentID uint) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveAllByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveAllByAgentID indicates an expected call of GetActiveAllByAgentID.
func (mr *MockJobInformationRepositoryMockRecorder) GetActiveAllByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveAllByAgentID", reflect.TypeOf((*MockJobInformationRepository)(nil).GetActiveAllByAgentID), agentID)
}

// GetActiveAllByAgentIDAndDiagnosisParamWithoutExternal mocks base method.
func (m *MockJobInformationRepository) GetActiveAllByAgentIDAndDiagnosisParamWithoutExternal(agentID uint, diagnosisParam entity.DiagnosisParam) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveAllByAgentIDAndDiagnosisParamWithoutExternal", agentID, diagnosisParam)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveAllByAgentIDAndDiagnosisParamWithoutExternal indicates an expected call of GetActiveAllByAgentIDAndDiagnosisParamWithoutExternal.
func (mr *MockJobInformationRepositoryMockRecorder) GetActiveAllByAgentIDAndDiagnosisParamWithoutExternal(agentID, diagnosisParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveAllByAgentIDAndDiagnosisParamWithoutExternal", reflect.TypeOf((*MockJobInformationRepository)(nil).GetActiveAllByAgentIDAndDiagnosisParamWithoutExternal), agentID, diagnosisParam)
}

// GetActiveAllByAgentIDAndFreeWord mocks base method.
func (m *MockJobInformationRepository) GetActiveAllByAgentIDAndFreeWord(agentID uint, freeWord string) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveAllByAgentIDAndFreeWord", agentID, freeWord)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveAllByAgentIDAndFreeWord indicates an expected call of GetActiveAllByAgentIDAndFreeWord.
func (mr *MockJobInformationRepositoryMockRecorder) GetActiveAllByAgentIDAndFreeWord(agentID, freeWord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveAllByAgentIDAndFreeWord", reflect.TypeOf((*MockJobInformationRepository)(nil).GetActiveAllByAgentIDAndFreeWord), agentID, freeWord)
}

// GetActiveAllByAgentIDWithoutExternal mocks base method.
func (m *MockJobInformationRepository) GetActiveAllByAgentIDWithoutExternal(agentID uint) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveAllByAgentIDWithoutExternal", agentID)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveAllByAgentIDWithoutExternal indicates an expected call of GetActiveAllByAgentIDWithoutExternal.
func (mr *MockJobInformationRepositoryMockRecorder) GetActiveAllByAgentIDWithoutExternal(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveAllByAgentIDWithoutExternal", reflect.TypeOf((*MockJobInformationRepository)(nil).GetActiveAllByAgentIDWithoutExternal), agentID)
}

// GetActiveAllianceByAgentIDAndFreeWordAndAlliance mocks base method.
func (m *MockJobInformationRepository) GetActiveAllianceByAgentIDAndFreeWordAndAlliance(agentID uint, freeWord string, agentAllianceList []*entity.AgentAlliance) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveAllianceByAgentIDAndFreeWordAndAlliance", agentID, freeWord, agentAllianceList)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveAllianceByAgentIDAndFreeWordAndAlliance indicates an expected call of GetActiveAllianceByAgentIDAndFreeWordAndAlliance.
func (mr *MockJobInformationRepositoryMockRecorder) GetActiveAllianceByAgentIDAndFreeWordAndAlliance(agentID, freeWord, agentAllianceList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveAllianceByAgentIDAndFreeWordAndAlliance", reflect.TypeOf((*MockJobInformationRepository)(nil).GetActiveAllianceByAgentIDAndFreeWordAndAlliance), agentID, freeWord, agentAllianceList)
}

// GetActiveByAgentIDAndFreeWord mocks base method.
func (m *MockJobInformationRepository) GetActiveByAgentIDAndFreeWord(agentID uint, freeWord string) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveByAgentIDAndFreeWord", agentID, freeWord)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveByAgentIDAndFreeWord indicates an expected call of GetActiveByAgentIDAndFreeWord.
func (mr *MockJobInformationRepositoryMockRecorder) GetActiveByAgentIDAndFreeWord(agentID, freeWord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveByAgentIDAndFreeWord", reflect.TypeOf((*MockJobInformationRepository)(nil).GetActiveByAgentIDAndFreeWord), agentID, freeWord)
}

// GetAlreadySoundOutByJobSeekerUUID mocks base method.
func (m *MockJobInformationRepository) GetAlreadySoundOutByJobSeekerUUID(jobSeekerUUID uuid.UUID) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlreadySoundOutByJobSeekerUUID", jobSeekerUUID)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlreadySoundOutByJobSeekerUUID indicates an expected call of GetAlreadySoundOutByJobSeekerUUID.
func (mr *MockJobInformationRepositoryMockRecorder) GetAlreadySoundOutByJobSeekerUUID(jobSeekerUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlreadySoundOutByJobSeekerUUID", reflect.TypeOf((*MockJobInformationRepository)(nil).GetAlreadySoundOutByJobSeekerUUID), jobSeekerUUID)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationRepository) GetByAgentID(agentID uint) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentIDAndAlliance mocks base method.
func (m *MockJobInformationRepository) GetByAgentIDAndAlliance(agentID uint, agentAllianceList []*entity.AgentAlliance) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndAlliance", agentID, agentAllianceList)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndAlliance indicates an expected call of GetByAgentIDAndAlliance.
func (mr *MockJobInformationRepositoryMockRecorder) GetByAgentIDAndAlliance(agentID, agentAllianceList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndAlliance", reflect.TypeOf((*MockJobInformationRepository)(nil).GetByAgentIDAndAlliance), agentID, agentAllianceList)
}

// GetByAgentIDAndExternalType mocks base method.
func (m *MockJobInformationRepository) GetByAgentIDAndExternalType(agentID uint, externalType entity.JobInformatinoExternalType) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndExternalType", agentID, externalType)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndExternalType indicates an expected call of GetByAgentIDAndExternalType.
func (mr *MockJobInformationRepositoryMockRecorder) GetByAgentIDAndExternalType(agentID, externalType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndExternalType", reflect.TypeOf((*MockJobInformationRepository)(nil).GetByAgentIDAndExternalType), agentID, externalType)
}

// GetByAgentIDAndFreeWord mocks base method.
func (m *MockJobInformationRepository) GetByAgentIDAndFreeWord(agentID uint, freeWord string) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndFreeWord", agentID, freeWord)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndFreeWord indicates an expected call of GetByAgentIDAndFreeWord.
func (mr *MockJobInformationRepositoryMockRecorder) GetByAgentIDAndFreeWord(agentID, freeWord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndFreeWord", reflect.TypeOf((*MockJobInformationRepository)(nil).GetByAgentIDAndFreeWord), agentID, freeWord)
}

// GetByAgentIDAndFreeWordAndAlliance mocks base method.
func (m *MockJobInformationRepository) GetByAgentIDAndFreeWordAndAlliance(agentID uint, freeWord string, agentAllianceList []*entity.AgentAlliance) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndFreeWordAndAlliance", agentID, freeWord, agentAllianceList)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndFreeWordAndAlliance indicates an expected call of GetByAgentIDAndFreeWordAndAlliance.
func (mr *MockJobInformationRepositoryMockRecorder) GetByAgentIDAndFreeWordAndAlliance(agentID, freeWord, agentAllianceList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndFreeWordAndAlliance", reflect.TypeOf((*MockJobInformationRepository)(nil).GetByAgentIDAndFreeWordAndAlliance), agentID, freeWord, agentAllianceList)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByIDList mocks base method.
func (m *MockJobInformationRepository) GetByIDList(idList []uint) ([]*entity.JobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobInformationRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobInformationRepository)(nil).GetByIDList), idList)
}

// Update mocks base method.
func (m *MockJobInformationRepository) Update(id uint, jobInformation *entity.JobInformation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, jobInformation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockJobInformationRepositoryMockRecorder) Update(id, jobInformation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockJobInformationRepository)(nil).Update), id, jobInformation)
}

// UpdateIsGuaranteedInterview mocks base method.
func (m *MockJobInformationRepository) UpdateIsGuaranteedInterview(id uint, isGuaranteedInterview bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsGuaranteedInterview", id, isGuaranteedInterview)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsGuaranteedInterview indicates an expected call of UpdateIsGuaranteedInterview.
func (mr *MockJobInformationRepositoryMockRecorder) UpdateIsGuaranteedInterview(id, isGuaranteedInterview any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsGuaranteedInterview", reflect.TypeOf((*MockJobInformationRepository)(nil).UpdateIsGuaranteedInterview), id, isGuaranteedInterview)
}

// UpdateRecruitmentState mocks base method.
func (m *MockJobInformationRepository) UpdateRecruitmentState(id uint, recruitmentState null.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecruitmentState", id, recruitmentState)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecruitmentState indicates an expected call of UpdateRecruitmentState.
func (mr *MockJobInformationRepositoryMockRecorder) UpdateRecruitmentState(id, recruitmentState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecruitmentState", reflect.TypeOf((*MockJobInformationRepository)(nil).UpdateRecruitmentState), id, recruitmentState)
}

// MockJobInformationTargetRepository is a mock of JobInformationTargetRepository interface.
type MockJobInformationTargetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationTargetRepositoryMockRecorder
}

// MockJobInformationTargetRepositoryMockRecorder is the mock recorder for MockJobInformationTargetRepository.
type MockJobInformationTargetRepositoryMockRecorder struct {
	mock *MockJobInformationTargetRepository
}

// NewMockJobInformationTargetRepository creates a new mock instance.
func NewMockJobInformationTargetRepository(ctrl *gomock.Controller) *MockJobInformationTargetRepository {
	mock := &MockJobInformationTargetRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationTargetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationTargetRepository) EXPECT() *MockJobInformationTargetRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationTargetRepository) All() ([]*entity.JobInformationTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationTargetRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationTargetRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationTargetRepository) Create(target *entity.JobInformationTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationTargetRepositoryMockRecorder) Create(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationTargetRepository)(nil).Create), target)
}

// DeleteByJobInformationID mocks base method.
func (m *MockJobInformationTargetRepository) DeleteByJobInformationID(jobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobInformationID", jobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobInformationID indicates an expected call of DeleteByJobInformationID.
func (mr *MockJobInformationTargetRepositoryMockRecorder) DeleteByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobInformationID", reflect.TypeOf((*MockJobInformationTargetRepository)(nil).DeleteByJobInformationID), jobInformationID)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationTargetRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationTargetRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationTargetRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationTargetRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationTargetRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationTargetRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationTargetRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationTargetRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationTargetRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationTargetRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationTargetRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationTargetRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationTargetRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationTargetRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationTargetRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// MockJobInformationOccupationRepository is a mock of JobInformationOccupationRepository interface.
type MockJobInformationOccupationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationOccupationRepositoryMockRecorder
}

// MockJobInformationOccupationRepositoryMockRecorder is the mock recorder for MockJobInformationOccupationRepository.
type MockJobInformationOccupationRepositoryMockRecorder struct {
	mock *MockJobInformationOccupationRepository
}

// NewMockJobInformationOccupationRepository creates a new mock instance.
func NewMockJobInformationOccupationRepository(ctrl *gomock.Controller) *MockJobInformationOccupationRepository {
	mock := &MockJobInformationOccupationRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationOccupationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationOccupationRepository) EXPECT() *MockJobInformationOccupationRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationOccupationRepository) All() ([]*entity.JobInformationOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationOccupationRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationOccupationRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationOccupationRepository) Create(occupation *entity.JobInformationOccupation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", occupation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationOccupationRepositoryMockRecorder) Create(occupation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationOccupationRepository)(nil).Create), occupation)
}

// DeleteByJobInformationID mocks base method.
func (m *MockJobInformationOccupationRepository) DeleteByJobInformationID(jobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobInformationID", jobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobInformationID indicates an expected call of DeleteByJobInformationID.
func (mr *MockJobInformationOccupationRepositoryMockRecorder) DeleteByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobInformationID", reflect.TypeOf((*MockJobInformationOccupationRepository)(nil).DeleteByJobInformationID), jobInformationID)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationOccupationRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationOccupationRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationOccupationRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationOccupationRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationOccupationRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationOccupationRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationOccupationRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationOccupationRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationOccupationRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationOccupationRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationOccupationRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationOccupationRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationOccupationRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationOccupationRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationOccupationRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// MockJobInformationFeatureRepository is a mock of JobInformationFeatureRepository interface.
type MockJobInformationFeatureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationFeatureRepositoryMockRecorder
}

// MockJobInformationFeatureRepositoryMockRecorder is the mock recorder for MockJobInformationFeatureRepository.
type MockJobInformationFeatureRepositoryMockRecorder struct {
	mock *MockJobInformationFeatureRepository
}

// NewMockJobInformationFeatureRepository creates a new mock instance.
func NewMockJobInformationFeatureRepository(ctrl *gomock.Controller) *MockJobInformationFeatureRepository {
	mock := &MockJobInformationFeatureRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationFeatureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationFeatureRepository) EXPECT() *MockJobInformationFeatureRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationFeatureRepository) All() ([]*entity.JobInformationFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationFeatureRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationFeatureRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationFeatureRepository) Create(feature *entity.JobInformationFeature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", feature)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationFeatureRepositoryMockRecorder) Create(feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationFeatureRepository)(nil).Create), feature)
}

// DeleteByJobInformationID mocks base method.
func (m *MockJobInformationFeatureRepository) DeleteByJobInformationID(jobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobInformationID", jobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobInformationID indicates an expected call of DeleteByJobInformationID.
func (mr *MockJobInformationFeatureRepositoryMockRecorder) DeleteByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobInformationID", reflect.TypeOf((*MockJobInformationFeatureRepository)(nil).DeleteByJobInformationID), jobInformationID)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationFeatureRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationFeatureRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationFeatureRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentIDForGuestJobSeeker mocks base method.
func (m *MockJobInformationFeatureRepository) GetByAgentIDForGuestJobSeeker(agentID uint) ([]*entity.JobInformationFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDForGuestJobSeeker", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDForGuestJobSeeker indicates an expected call of GetByAgentIDForGuestJobSeeker.
func (mr *MockJobInformationFeatureRepositoryMockRecorder) GetByAgentIDForGuestJobSeeker(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDForGuestJobSeeker", reflect.TypeOf((*MockJobInformationFeatureRepository)(nil).GetByAgentIDForGuestJobSeeker), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationFeatureRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationFeatureRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationFeatureRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationFeatureRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationFeatureRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationFeatureRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationFeatureRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationFeatureRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationFeatureRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationFeatureRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationFeatureRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationFeatureRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// GetByJobInformationIDListForGuestJobSeeker mocks base method.
func (m *MockJobInformationFeatureRepository) GetByJobInformationIDListForGuestJobSeeker(jobInformationIDList []uint) ([]*entity.JobInformationFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDListForGuestJobSeeker", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDListForGuestJobSeeker indicates an expected call of GetByJobInformationIDListForGuestJobSeeker.
func (mr *MockJobInformationFeatureRepositoryMockRecorder) GetByJobInformationIDListForGuestJobSeeker(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDListForGuestJobSeeker", reflect.TypeOf((*MockJobInformationFeatureRepository)(nil).GetByJobInformationIDListForGuestJobSeeker), jobInformationIDList)
}

// MockJobInformationPrefectureRepository is a mock of JobInformationPrefectureRepository interface.
type MockJobInformationPrefectureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationPrefectureRepositoryMockRecorder
}

// MockJobInformationPrefectureRepositoryMockRecorder is the mock recorder for MockJobInformationPrefectureRepository.
type MockJobInformationPrefectureRepositoryMockRecorder struct {
	mock *MockJobInformationPrefectureRepository
}

// NewMockJobInformationPrefectureRepository creates a new mock instance.
func NewMockJobInformationPrefectureRepository(ctrl *gomock.Controller) *MockJobInformationPrefectureRepository {
	mock := &MockJobInformationPrefectureRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationPrefectureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationPrefectureRepository) EXPECT() *MockJobInformationPrefectureRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationPrefectureRepository) All() ([]*entity.JobInformationPrefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationPrefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationPrefectureRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationPrefectureRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationPrefectureRepository) Create(prefecture *entity.JobInformationPrefecture) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", prefecture)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationPrefectureRepositoryMockRecorder) Create(prefecture any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationPrefectureRepository)(nil).Create), prefecture)
}

// DeleteByJobInformationID mocks base method.
func (m *MockJobInformationPrefectureRepository) DeleteByJobInformationID(jobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobInformationID", jobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobInformationID indicates an expected call of DeleteByJobInformationID.
func (mr *MockJobInformationPrefectureRepositoryMockRecorder) DeleteByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobInformationID", reflect.TypeOf((*MockJobInformationPrefectureRepository)(nil).DeleteByJobInformationID), jobInformationID)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationPrefectureRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationPrefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationPrefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationPrefectureRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationPrefectureRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationPrefectureRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationPrefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationPrefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationPrefectureRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationPrefectureRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationPrefectureRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationPrefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationPrefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationPrefectureRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationPrefectureRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationPrefectureRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationPrefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationPrefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationPrefectureRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationPrefectureRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationPrefectureRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationPrefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationPrefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationPrefectureRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationPrefectureRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// MockJobInformationWorkCharmPointRepository is a mock of JobInformationWorkCharmPointRepository interface.
type MockJobInformationWorkCharmPointRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationWorkCharmPointRepositoryMockRecorder
}

// MockJobInformationWorkCharmPointRepositoryMockRecorder is the mock recorder for MockJobInformationWorkCharmPointRepository.
type MockJobInformationWorkCharmPointRepositoryMockRecorder struct {
	mock *MockJobInformationWorkCharmPointRepository
}

// NewMockJobInformationWorkCharmPointRepository creates a new mock instance.
func NewMockJobInformationWorkCharmPointRepository(ctrl *gomock.Controller) *MockJobInformationWorkCharmPointRepository {
	mock := &MockJobInformationWorkCharmPointRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationWorkCharmPointRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationWorkCharmPointRepository) EXPECT() *MockJobInformationWorkCharmPointRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationWorkCharmPointRepository) All() ([]*entity.JobInformationWorkCharmPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationWorkCharmPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationWorkCharmPointRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationWorkCharmPointRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationWorkCharmPointRepository) Create(workCharmPoint *entity.JobInformationWorkCharmPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", workCharmPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationWorkCharmPointRepositoryMockRecorder) Create(workCharmPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationWorkCharmPointRepository)(nil).Create), workCharmPoint)
}

// DeleteByJobInformationID mocks base method.
func (m *MockJobInformationWorkCharmPointRepository) DeleteByJobInformationID(jobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobInformationID", jobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobInformationID indicates an expected call of DeleteByJobInformationID.
func (mr *MockJobInformationWorkCharmPointRepositoryMockRecorder) DeleteByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobInformationID", reflect.TypeOf((*MockJobInformationWorkCharmPointRepository)(nil).DeleteByJobInformationID), jobInformationID)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationWorkCharmPointRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationWorkCharmPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationWorkCharmPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationWorkCharmPointRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationWorkCharmPointRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationWorkCharmPointRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationWorkCharmPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationWorkCharmPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationWorkCharmPointRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationWorkCharmPointRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationWorkCharmPointRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationWorkCharmPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationWorkCharmPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationWorkCharmPointRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationWorkCharmPointRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationWorkCharmPointRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationWorkCharmPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationWorkCharmPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationWorkCharmPointRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationWorkCharmPointRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationWorkCharmPointRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationWorkCharmPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationWorkCharmPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationWorkCharmPointRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationWorkCharmPointRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// MockJobInformationEmploymentStatusRepository is a mock of JobInformationEmploymentStatusRepository interface.
type MockJobInformationEmploymentStatusRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationEmploymentStatusRepositoryMockRecorder
}

// MockJobInformationEmploymentStatusRepositoryMockRecorder is the mock recorder for MockJobInformationEmploymentStatusRepository.
type MockJobInformationEmploymentStatusRepositoryMockRecorder struct {
	mock *MockJobInformationEmploymentStatusRepository
}

// NewMockJobInformationEmploymentStatusRepository creates a new mock instance.
func NewMockJobInformationEmploymentStatusRepository(ctrl *gomock.Controller) *MockJobInformationEmploymentStatusRepository {
	mock := &MockJobInformationEmploymentStatusRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationEmploymentStatusRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationEmploymentStatusRepository) EXPECT() *MockJobInformationEmploymentStatusRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationEmploymentStatusRepository) All() ([]*entity.JobInformationEmploymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationEmploymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationEmploymentStatusRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationEmploymentStatusRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationEmploymentStatusRepository) Create(employmentStatus *entity.JobInformationEmploymentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", employmentStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationEmploymentStatusRepositoryMockRecorder) Create(employmentStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationEmploymentStatusRepository)(nil).Create), employmentStatus)
}

// DeleteByJobInformationID mocks base method.
func (m *MockJobInformationEmploymentStatusRepository) DeleteByJobInformationID(jobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobInformationID", jobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobInformationID indicates an expected call of DeleteByJobInformationID.
func (mr *MockJobInformationEmploymentStatusRepositoryMockRecorder) DeleteByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobInformationID", reflect.TypeOf((*MockJobInformationEmploymentStatusRepository)(nil).DeleteByJobInformationID), jobInformationID)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationEmploymentStatusRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationEmploymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationEmploymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationEmploymentStatusRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationEmploymentStatusRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationEmploymentStatusRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationEmploymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationEmploymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationEmploymentStatusRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationEmploymentStatusRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationEmploymentStatusRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationEmploymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationEmploymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationEmploymentStatusRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationEmploymentStatusRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationEmploymentStatusRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationEmploymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationEmploymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationEmploymentStatusRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationEmploymentStatusRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationEmploymentStatusRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationEmploymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationEmploymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationEmploymentStatusRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationEmploymentStatusRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// MockJobInformationRequiredConditionRepository is a mock of JobInformationRequiredConditionRepository interface.
type MockJobInformationRequiredConditionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationRequiredConditionRepositoryMockRecorder
}

// MockJobInformationRequiredConditionRepositoryMockRecorder is the mock recorder for MockJobInformationRequiredConditionRepository.
type MockJobInformationRequiredConditionRepositoryMockRecorder struct {
	mock *MockJobInformationRequiredConditionRepository
}

// NewMockJobInformationRequiredConditionRepository creates a new mock instance.
func NewMockJobInformationRequiredConditionRepository(ctrl *gomock.Controller) *MockJobInformationRequiredConditionRepository {
	mock := &MockJobInformationRequiredConditionRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationRequiredConditionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationRequiredConditionRepository) EXPECT() *MockJobInformationRequiredConditionRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationRequiredConditionRepository) All() ([]*entity.JobInformationRequiredCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationRequiredCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationRequiredConditionRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationRequiredConditionRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationRequiredConditionRepository) Create(requiredCondition *entity.JobInformationRequiredCondition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredCondition)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationRequiredConditionRepositoryMockRecorder) Create(requiredCondition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationRequiredConditionRepository)(nil).Create), requiredCondition)
}

// DeleteByJobInformationID mocks base method.
func (m *MockJobInformationRequiredConditionRepository) DeleteByJobInformationID(jobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobInformationID", jobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobInformationID indicates an expected call of DeleteByJobInformationID.
func (mr *MockJobInformationRequiredConditionRepositoryMockRecorder) DeleteByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobInformationID", reflect.TypeOf((*MockJobInformationRequiredConditionRepository)(nil).DeleteByJobInformationID), jobInformationID)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationRequiredConditionRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationRequiredCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationRequiredConditionRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationRequiredConditionRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationRequiredConditionRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationRequiredCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationRequiredConditionRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationRequiredConditionRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationRequiredConditionRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationRequiredCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationRequiredConditionRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationRequiredConditionRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationRequiredConditionRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationRequiredCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationRequiredConditionRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationRequiredConditionRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationRequiredConditionRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationRequiredCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationRequiredConditionRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationRequiredConditionRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// MockJobInformationRequiredLicenseRepository is a mock of JobInformationRequiredLicenseRepository interface.
type MockJobInformationRequiredLicenseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationRequiredLicenseRepositoryMockRecorder
}

// MockJobInformationRequiredLicenseRepositoryMockRecorder is the mock recorder for MockJobInformationRequiredLicenseRepository.
type MockJobInformationRequiredLicenseRepositoryMockRecorder struct {
	mock *MockJobInformationRequiredLicenseRepository
}

// NewMockJobInformationRequiredLicenseRepository creates a new mock instance.
func NewMockJobInformationRequiredLicenseRepository(ctrl *gomock.Controller) *MockJobInformationRequiredLicenseRepository {
	mock := &MockJobInformationRequiredLicenseRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationRequiredLicenseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationRequiredLicenseRepository) EXPECT() *MockJobInformationRequiredLicenseRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationRequiredLicenseRepository) All() ([]*entity.JobInformationRequiredLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationRequiredLicenseRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationRequiredLicenseRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationRequiredLicenseRepository) Create(requiredLicense *entity.JobInformationRequiredLicense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredLicense)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationRequiredLicenseRepositoryMockRecorder) Create(requiredLicense any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationRequiredLicenseRepository)(nil).Create), requiredLicense)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationRequiredLicenseRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationRequiredLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationRequiredLicenseRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationRequiredLicenseRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationRequiredLicenseRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationRequiredLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationRequiredLicenseRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationRequiredLicenseRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationRequiredLicenseRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationRequiredLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationRequiredLicenseRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationRequiredLicenseRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationRequiredLicenseRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationRequiredLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationRequiredLicenseRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationRequiredLicenseRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationRequiredLicenseRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationRequiredLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationRequiredLicenseRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationRequiredLicenseRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// GetByJobInformationIDListAndLicenceTypeList mocks base method.
func (m *MockJobInformationRequiredLicenseRepository) GetByJobInformationIDListAndLicenceTypeList(jobInformationIDList []uint, licenceTypeList []null.Int) ([]*entity.JobInformationRequiredLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDListAndLicenceTypeList", jobInformationIDList, licenceTypeList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDListAndLicenceTypeList indicates an expected call of GetByJobInformationIDListAndLicenceTypeList.
func (mr *MockJobInformationRequiredLicenseRepositoryMockRecorder) GetByJobInformationIDListAndLicenceTypeList(jobInformationIDList, licenceTypeList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDListAndLicenceTypeList", reflect.TypeOf((*MockJobInformationRequiredLicenseRepository)(nil).GetByJobInformationIDListAndLicenceTypeList), jobInformationIDList, licenceTypeList)
}

// MockJobInformationRequiredPCToolRepository is a mock of JobInformationRequiredPCToolRepository interface.
type MockJobInformationRequiredPCToolRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationRequiredPCToolRepositoryMockRecorder
}

// MockJobInformationRequiredPCToolRepositoryMockRecorder is the mock recorder for MockJobInformationRequiredPCToolRepository.
type MockJobInformationRequiredPCToolRepositoryMockRecorder struct {
	mock *MockJobInformationRequiredPCToolRepository
}

// NewMockJobInformationRequiredPCToolRepository creates a new mock instance.
func NewMockJobInformationRequiredPCToolRepository(ctrl *gomock.Controller) *MockJobInformationRequiredPCToolRepository {
	mock := &MockJobInformationRequiredPCToolRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationRequiredPCToolRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationRequiredPCToolRepository) EXPECT() *MockJobInformationRequiredPCToolRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationRequiredPCToolRepository) All() ([]*entity.JobInformationRequiredPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationRequiredPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationRequiredPCToolRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationRequiredPCToolRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationRequiredPCToolRepository) Create(requiredPCTool *entity.JobInformationRequiredPCTool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredPCTool)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationRequiredPCToolRepositoryMockRecorder) Create(requiredPCTool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationRequiredPCToolRepository)(nil).Create), requiredPCTool)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationRequiredPCToolRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationRequiredPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationRequiredPCToolRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationRequiredPCToolRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationRequiredPCToolRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationRequiredPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationRequiredPCToolRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationRequiredPCToolRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationRequiredPCToolRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationRequiredPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationRequiredPCToolRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationRequiredPCToolRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationRequiredPCToolRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationRequiredPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationRequiredPCToolRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationRequiredPCToolRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationRequiredPCToolRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationRequiredPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationRequiredPCToolRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationRequiredPCToolRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// MockJobInformationRequiredLanguageRepository is a mock of JobInformationRequiredLanguageRepository interface.
type MockJobInformationRequiredLanguageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationRequiredLanguageRepositoryMockRecorder
}

// MockJobInformationRequiredLanguageRepositoryMockRecorder is the mock recorder for MockJobInformationRequiredLanguageRepository.
type MockJobInformationRequiredLanguageRepositoryMockRecorder struct {
	mock *MockJobInformationRequiredLanguageRepository
}

// NewMockJobInformationRequiredLanguageRepository creates a new mock instance.
func NewMockJobInformationRequiredLanguageRepository(ctrl *gomock.Controller) *MockJobInformationRequiredLanguageRepository {
	mock := &MockJobInformationRequiredLanguageRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationRequiredLanguageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationRequiredLanguageRepository) EXPECT() *MockJobInformationRequiredLanguageRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationRequiredLanguageRepository) All() ([]*entity.JobInformationRequiredLanguage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLanguage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationRequiredLanguageRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationRequiredLanguageRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationRequiredLanguageRepository) Create(requiredLanguage *entity.JobInformationRequiredLanguage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredLanguage)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationRequiredLanguageRepositoryMockRecorder) Create(requiredLanguage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationRequiredLanguageRepository)(nil).Create), requiredLanguage)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationRequiredLanguageRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationRequiredLanguage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLanguage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationRequiredLanguageRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationRequiredLanguageRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationRequiredLanguageRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationRequiredLanguage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLanguage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationRequiredLanguageRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationRequiredLanguageRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationRequiredLanguageRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationRequiredLanguage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLanguage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationRequiredLanguageRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationRequiredLanguageRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationRequiredLanguageRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationRequiredLanguage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLanguage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationRequiredLanguageRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationRequiredLanguageRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationRequiredLanguageRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationRequiredLanguage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLanguage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationRequiredLanguageRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationRequiredLanguageRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// MockJobInformationRequiredLanguageTypeRepository is a mock of JobInformationRequiredLanguageTypeRepository interface.
type MockJobInformationRequiredLanguageTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationRequiredLanguageTypeRepositoryMockRecorder
}

// MockJobInformationRequiredLanguageTypeRepositoryMockRecorder is the mock recorder for MockJobInformationRequiredLanguageTypeRepository.
type MockJobInformationRequiredLanguageTypeRepositoryMockRecorder struct {
	mock *MockJobInformationRequiredLanguageTypeRepository
}

// NewMockJobInformationRequiredLanguageTypeRepository creates a new mock instance.
func NewMockJobInformationRequiredLanguageTypeRepository(ctrl *gomock.Controller) *MockJobInformationRequiredLanguageTypeRepository {
	mock := &MockJobInformationRequiredLanguageTypeRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationRequiredLanguageTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationRequiredLanguageTypeRepository) EXPECT() *MockJobInformationRequiredLanguageTypeRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationRequiredLanguageTypeRepository) All() ([]*entity.JobInformationRequiredLanguageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLanguageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationRequiredLanguageTypeRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationRequiredLanguageTypeRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationRequiredLanguageTypeRepository) Create(requiredLanguageType *entity.JobInformationRequiredLanguageType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredLanguageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationRequiredLanguageTypeRepositoryMockRecorder) Create(requiredLanguageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationRequiredLanguageTypeRepository)(nil).Create), requiredLanguageType)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationRequiredLanguageTypeRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationRequiredLanguageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLanguageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationRequiredLanguageTypeRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationRequiredLanguageTypeRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationRequiredLanguageTypeRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationRequiredLanguageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLanguageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationRequiredLanguageTypeRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationRequiredLanguageTypeRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationRequiredLanguageTypeRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationRequiredLanguageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLanguageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationRequiredLanguageTypeRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationRequiredLanguageTypeRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationRequiredLanguageTypeRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationRequiredLanguageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLanguageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationRequiredLanguageTypeRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationRequiredLanguageTypeRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationRequiredLanguageTypeRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationRequiredLanguageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLanguageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationRequiredLanguageTypeRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationRequiredLanguageTypeRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// GetByJobInformationIDListAndLanguageTypeList mocks base method.
func (m *MockJobInformationRequiredLanguageTypeRepository) GetByJobInformationIDListAndLanguageTypeList(jobInformationIDList []uint, languageTypeList []entity.Language) ([]*entity.JobInformationRequiredLanguageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDListAndLanguageTypeList", jobInformationIDList, languageTypeList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredLanguageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDListAndLanguageTypeList indicates an expected call of GetByJobInformationIDListAndLanguageTypeList.
func (mr *MockJobInformationRequiredLanguageTypeRepositoryMockRecorder) GetByJobInformationIDListAndLanguageTypeList(jobInformationIDList, languageTypeList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDListAndLanguageTypeList", reflect.TypeOf((*MockJobInformationRequiredLanguageTypeRepository)(nil).GetByJobInformationIDListAndLanguageTypeList), jobInformationIDList, languageTypeList)
}

// MockJobInformationRequiredExperienceDevelopmentRepository is a mock of JobInformationRequiredExperienceDevelopmentRepository interface.
type MockJobInformationRequiredExperienceDevelopmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder
}

// MockJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder is the mock recorder for MockJobInformationRequiredExperienceDevelopmentRepository.
type MockJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder struct {
	mock *MockJobInformationRequiredExperienceDevelopmentRepository
}

// NewMockJobInformationRequiredExperienceDevelopmentRepository creates a new mock instance.
func NewMockJobInformationRequiredExperienceDevelopmentRepository(ctrl *gomock.Controller) *MockJobInformationRequiredExperienceDevelopmentRepository {
	mock := &MockJobInformationRequiredExperienceDevelopmentRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationRequiredExperienceDevelopmentRepository) EXPECT() *MockJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentRepository) All() ([]*entity.JobInformationRequiredExperienceDevelopment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceDevelopment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentRepository) Create(requiredExperienceDevelopment *entity.JobInformationRequiredExperienceDevelopment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredExperienceDevelopment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) Create(requiredExperienceDevelopment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentRepository)(nil).Create), requiredExperienceDevelopment)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationRequiredExperienceDevelopment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceDevelopment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationRequiredExperienceDevelopment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceDevelopment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationRequiredExperienceDevelopment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceDevelopment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationRequiredExperienceDevelopment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceDevelopment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationRequiredExperienceDevelopment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceDevelopment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// MockJobInformationRequiredExperienceDevelopmentTypeRepository is a mock of JobInformationRequiredExperienceDevelopmentTypeRepository interface.
type MockJobInformationRequiredExperienceDevelopmentTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder
}

// MockJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder is the mock recorder for MockJobInformationRequiredExperienceDevelopmentTypeRepository.
type MockJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder struct {
	mock *MockJobInformationRequiredExperienceDevelopmentTypeRepository
}

// NewMockJobInformationRequiredExperienceDevelopmentTypeRepository creates a new mock instance.
func NewMockJobInformationRequiredExperienceDevelopmentTypeRepository(ctrl *gomock.Controller) *MockJobInformationRequiredExperienceDevelopmentTypeRepository {
	mock := &MockJobInformationRequiredExperienceDevelopmentTypeRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationRequiredExperienceDevelopmentTypeRepository) EXPECT() *MockJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentTypeRepository) All() ([]*entity.JobInformationRequiredExperienceDevelopmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceDevelopmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentTypeRepository) Create(requiredExperienceDevelopmentType *entity.JobInformationRequiredExperienceDevelopmentType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredExperienceDevelopmentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) Create(requiredExperienceDevelopmentType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).Create), requiredExperienceDevelopmentType)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentTypeRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationRequiredExperienceDevelopmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceDevelopmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentTypeRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationRequiredExperienceDevelopmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceDevelopmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentTypeRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationRequiredExperienceDevelopmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceDevelopmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentTypeRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationRequiredExperienceDevelopmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceDevelopmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationRequiredExperienceDevelopmentTypeRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationRequiredExperienceDevelopmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceDevelopmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// MockJobInformationRequiredExperienceJobRepository is a mock of JobInformationRequiredExperienceJobRepository interface.
type MockJobInformationRequiredExperienceJobRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationRequiredExperienceJobRepositoryMockRecorder
}

// MockJobInformationRequiredExperienceJobRepositoryMockRecorder is the mock recorder for MockJobInformationRequiredExperienceJobRepository.
type MockJobInformationRequiredExperienceJobRepositoryMockRecorder struct {
	mock *MockJobInformationRequiredExperienceJobRepository
}

// NewMockJobInformationRequiredExperienceJobRepository creates a new mock instance.
func NewMockJobInformationRequiredExperienceJobRepository(ctrl *gomock.Controller) *MockJobInformationRequiredExperienceJobRepository {
	mock := &MockJobInformationRequiredExperienceJobRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationRequiredExperienceJobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationRequiredExperienceJobRepository) EXPECT() *MockJobInformationRequiredExperienceJobRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationRequiredExperienceJobRepository) All() ([]*entity.JobInformationRequiredExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationRequiredExperienceJobRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationRequiredExperienceJobRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationRequiredExperienceJobRepository) Create(requiredExperienceJob *entity.JobInformationRequiredExperienceJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredExperienceJob)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationRequiredExperienceJobRepositoryMockRecorder) Create(requiredExperienceJob any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationRequiredExperienceJobRepository)(nil).Create), requiredExperienceJob)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationRequiredExperienceJobRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationRequiredExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationRequiredExperienceJobRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationRequiredExperienceJobRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationRequiredExperienceJobRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationRequiredExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationRequiredExperienceJobRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationRequiredExperienceJobRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationRequiredExperienceJobRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationRequiredExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationRequiredExperienceJobRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationRequiredExperienceJobRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationRequiredExperienceJobRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationRequiredExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationRequiredExperienceJobRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationRequiredExperienceJobRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationRequiredExperienceJobRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationRequiredExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationRequiredExperienceJobRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationRequiredExperienceJobRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// MockJobInformationRequiredExperienceIndustryRepository is a mock of JobInformationRequiredExperienceIndustryRepository interface.
type MockJobInformationRequiredExperienceIndustryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationRequiredExperienceIndustryRepositoryMockRecorder
}

// MockJobInformationRequiredExperienceIndustryRepositoryMockRecorder is the mock recorder for MockJobInformationRequiredExperienceIndustryRepository.
type MockJobInformationRequiredExperienceIndustryRepositoryMockRecorder struct {
	mock *MockJobInformationRequiredExperienceIndustryRepository
}

// NewMockJobInformationRequiredExperienceIndustryRepository creates a new mock instance.
func NewMockJobInformationRequiredExperienceIndustryRepository(ctrl *gomock.Controller) *MockJobInformationRequiredExperienceIndustryRepository {
	mock := &MockJobInformationRequiredExperienceIndustryRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationRequiredExperienceIndustryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationRequiredExperienceIndustryRepository) EXPECT() *MockJobInformationRequiredExperienceIndustryRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationRequiredExperienceIndustryRepository) All() ([]*entity.JobInformationRequiredExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationRequiredExperienceIndustryRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationRequiredExperienceIndustryRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationRequiredExperienceIndustryRepository) Create(requiredExperienceIndustry *entity.JobInformationRequiredExperienceIndustry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredExperienceIndustry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationRequiredExperienceIndustryRepositoryMockRecorder) Create(requiredExperienceIndustry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationRequiredExperienceIndustryRepository)(nil).Create), requiredExperienceIndustry)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationRequiredExperienceIndustryRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationRequiredExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationRequiredExperienceIndustryRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationRequiredExperienceIndustryRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationRequiredExperienceIndustryRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationRequiredExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationRequiredExperienceIndustryRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationRequiredExperienceIndustryRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationRequiredExperienceIndustryRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationRequiredExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationRequiredExperienceIndustryRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationRequiredExperienceIndustryRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationRequiredExperienceIndustryRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationRequiredExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationRequiredExperienceIndustryRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationRequiredExperienceIndustryRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationRequiredExperienceIndustryRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationRequiredExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationRequiredExperienceIndustryRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationRequiredExperienceIndustryRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// GetByJobInformationIDListAndIndustryList mocks base method.
func (m *MockJobInformationRequiredExperienceIndustryRepository) GetByJobInformationIDListAndIndustryList(jobInformationIDList []uint, industryList []entity.ExperienceIndustry) ([]*entity.JobInformationRequiredExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDListAndIndustryList", jobInformationIDList, industryList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDListAndIndustryList indicates an expected call of GetByJobInformationIDListAndIndustryList.
func (mr *MockJobInformationRequiredExperienceIndustryRepositoryMockRecorder) GetByJobInformationIDListAndIndustryList(jobInformationIDList, industryList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDListAndIndustryList", reflect.TypeOf((*MockJobInformationRequiredExperienceIndustryRepository)(nil).GetByJobInformationIDListAndIndustryList), jobInformationIDList, industryList)
}

// MockJobInformationRequiredExperienceOccupationRepository is a mock of JobInformationRequiredExperienceOccupationRepository interface.
type MockJobInformationRequiredExperienceOccupationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationRequiredExperienceOccupationRepositoryMockRecorder
}

// MockJobInformationRequiredExperienceOccupationRepositoryMockRecorder is the mock recorder for MockJobInformationRequiredExperienceOccupationRepository.
type MockJobInformationRequiredExperienceOccupationRepositoryMockRecorder struct {
	mock *MockJobInformationRequiredExperienceOccupationRepository
}

// NewMockJobInformationRequiredExperienceOccupationRepository creates a new mock instance.
func NewMockJobInformationRequiredExperienceOccupationRepository(ctrl *gomock.Controller) *MockJobInformationRequiredExperienceOccupationRepository {
	mock := &MockJobInformationRequiredExperienceOccupationRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationRequiredExperienceOccupationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationRequiredExperienceOccupationRepository) EXPECT() *MockJobInformationRequiredExperienceOccupationRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationRequiredExperienceOccupationRepository) All() ([]*entity.JobInformationRequiredExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationRequiredExperienceOccupationRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationRequiredExperienceOccupationRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationRequiredExperienceOccupationRepository) Create(requiredExperienceOccupation *entity.JobInformationRequiredExperienceOccupation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredExperienceOccupation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationRequiredExperienceOccupationRepositoryMockRecorder) Create(requiredExperienceOccupation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationRequiredExperienceOccupationRepository)(nil).Create), requiredExperienceOccupation)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationRequiredExperienceOccupationRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationRequiredExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationRequiredExperienceOccupationRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationRequiredExperienceOccupationRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationRequiredExperienceOccupationRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationRequiredExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationRequiredExperienceOccupationRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationRequiredExperienceOccupationRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationRequiredExperienceOccupationRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationRequiredExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationRequiredExperienceOccupationRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationRequiredExperienceOccupationRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationRequiredExperienceOccupationRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationRequiredExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationRequiredExperienceOccupationRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationRequiredExperienceOccupationRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationRequiredExperienceOccupationRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationRequiredExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationRequiredExperienceOccupationRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationRequiredExperienceOccupationRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// GetByJobInformationIDListAndOccupationList mocks base method.
func (m *MockJobInformationRequiredExperienceOccupationRepository) GetByJobInformationIDListAndOccupationList(jobInformationIDList []uint, occupationList []entity.ExperienceOccupation) ([]*entity.JobInformationRequiredExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDListAndOccupationList", jobInformationIDList, occupationList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDListAndOccupationList indicates an expected call of GetByJobInformationIDListAndOccupationList.
func (mr *MockJobInformationRequiredExperienceOccupationRepositoryMockRecorder) GetByJobInformationIDListAndOccupationList(jobInformationIDList, occupationList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDListAndOccupationList", reflect.TypeOf((*MockJobInformationRequiredExperienceOccupationRepository)(nil).GetByJobInformationIDListAndOccupationList), jobInformationIDList, occupationList)
}

// MockJobInformationRequiredSocialExperienceRepository is a mock of JobInformationRequiredSocialExperienceRepository interface.
type MockJobInformationRequiredSocialExperienceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationRequiredSocialExperienceRepositoryMockRecorder
}

// MockJobInformationRequiredSocialExperienceRepositoryMockRecorder is the mock recorder for MockJobInformationRequiredSocialExperienceRepository.
type MockJobInformationRequiredSocialExperienceRepositoryMockRecorder struct {
	mock *MockJobInformationRequiredSocialExperienceRepository
}

// NewMockJobInformationRequiredSocialExperienceRepository creates a new mock instance.
func NewMockJobInformationRequiredSocialExperienceRepository(ctrl *gomock.Controller) *MockJobInformationRequiredSocialExperienceRepository {
	mock := &MockJobInformationRequiredSocialExperienceRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationRequiredSocialExperienceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationRequiredSocialExperienceRepository) EXPECT() *MockJobInformationRequiredSocialExperienceRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationRequiredSocialExperienceRepository) All() ([]*entity.JobInformationRequiredSocialExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationRequiredSocialExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationRequiredSocialExperienceRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationRequiredSocialExperienceRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationRequiredSocialExperienceRepository) Create(requiredSocialExperience *entity.JobInformationRequiredSocialExperience) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredSocialExperience)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationRequiredSocialExperienceRepositoryMockRecorder) Create(requiredSocialExperience any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationRequiredSocialExperienceRepository)(nil).Create), requiredSocialExperience)
}

// DeleteByJobInformationID mocks base method.
func (m *MockJobInformationRequiredSocialExperienceRepository) DeleteByJobInformationID(jobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobInformationID", jobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobInformationID indicates an expected call of DeleteByJobInformationID.
func (mr *MockJobInformationRequiredSocialExperienceRepositoryMockRecorder) DeleteByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobInformationID", reflect.TypeOf((*MockJobInformationRequiredSocialExperienceRepository)(nil).DeleteByJobInformationID), jobInformationID)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationRequiredSocialExperienceRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationRequiredSocialExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredSocialExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationRequiredSocialExperienceRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationRequiredSocialExperienceRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationRequiredSocialExperienceRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationRequiredSocialExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredSocialExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationRequiredSocialExperienceRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationRequiredSocialExperienceRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationRequiredSocialExperienceRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationRequiredSocialExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredSocialExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationRequiredSocialExperienceRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationRequiredSocialExperienceRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationRequiredSocialExperienceRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationRequiredSocialExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredSocialExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationRequiredSocialExperienceRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationRequiredSocialExperienceRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationRequiredSocialExperienceRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationRequiredSocialExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationRequiredSocialExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationRequiredSocialExperienceRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationRequiredSocialExperienceRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// MockJobInformationSelectionFlowPatternRepository is a mock of JobInformationSelectionFlowPatternRepository interface.
type MockJobInformationSelectionFlowPatternRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationSelectionFlowPatternRepositoryMockRecorder
}

// MockJobInformationSelectionFlowPatternRepositoryMockRecorder is the mock recorder for MockJobInformationSelectionFlowPatternRepository.
type MockJobInformationSelectionFlowPatternRepositoryMockRecorder struct {
	mock *MockJobInformationSelectionFlowPatternRepository
}

// NewMockJobInformationSelectionFlowPatternRepository creates a new mock instance.
func NewMockJobInformationSelectionFlowPatternRepository(ctrl *gomock.Controller) *MockJobInformationSelectionFlowPatternRepository {
	mock := &MockJobInformationSelectionFlowPatternRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationSelectionFlowPatternRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationSelectionFlowPatternRepository) EXPECT() *MockJobInformationSelectionFlowPatternRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationSelectionFlowPatternRepository) All() ([]*entity.JobInformationSelectionFlowPattern, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationSelectionFlowPattern)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationSelectionFlowPatternRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationSelectionFlowPatternRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationSelectionFlowPatternRepository) Create(selectionFlowPattern *entity.JobInformationSelectionFlowPattern) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", selectionFlowPattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationSelectionFlowPatternRepositoryMockRecorder) Create(selectionFlowPattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationSelectionFlowPatternRepository)(nil).Create), selectionFlowPattern)
}

// Delete mocks base method.
func (m *MockJobInformationSelectionFlowPatternRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockJobInformationSelectionFlowPatternRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockJobInformationSelectionFlowPatternRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockJobInformationSelectionFlowPatternRepository) FindByID(id uint) (*entity.JobInformationSelectionFlowPattern, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.JobInformationSelectionFlowPattern)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockJobInformationSelectionFlowPatternRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockJobInformationSelectionFlowPatternRepository)(nil).FindByID), id)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationSelectionFlowPatternRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationSelectionFlowPattern, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationSelectionFlowPattern)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationSelectionFlowPatternRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationSelectionFlowPatternRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationSelectionFlowPatternRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationSelectionFlowPattern, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationSelectionFlowPattern)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationSelectionFlowPatternRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationSelectionFlowPatternRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationSelectionFlowPatternRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationSelectionFlowPattern, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationSelectionFlowPattern)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationSelectionFlowPatternRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationSelectionFlowPatternRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationSelectionFlowPatternRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationSelectionFlowPattern, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationSelectionFlowPattern)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationSelectionFlowPatternRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationSelectionFlowPatternRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationSelectionFlowPatternRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationSelectionFlowPattern, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationSelectionFlowPattern)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationSelectionFlowPatternRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationSelectionFlowPatternRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// GetOpenByJobInformationID mocks base method.
func (m *MockJobInformationSelectionFlowPatternRepository) GetOpenByJobInformationID(jobInformationID uint) ([]*entity.JobInformationSelectionFlowPattern, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationSelectionFlowPattern)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenByJobInformationID indicates an expected call of GetOpenByJobInformationID.
func (mr *MockJobInformationSelectionFlowPatternRepositoryMockRecorder) GetOpenByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenByJobInformationID", reflect.TypeOf((*MockJobInformationSelectionFlowPatternRepository)(nil).GetOpenByJobInformationID), jobInformationID)
}

// Update mocks base method.
func (m *MockJobInformationSelectionFlowPatternRepository) Update(id uint, selectionFlowPattern *entity.JobInformationSelectionFlowPattern) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, selectionFlowPattern)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockJobInformationSelectionFlowPatternRepositoryMockRecorder) Update(id, selectionFlowPattern any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockJobInformationSelectionFlowPatternRepository)(nil).Update), id, selectionFlowPattern)
}

// MockJobInformationSelectionInformationRepository is a mock of JobInformationSelectionInformationRepository interface.
type MockJobInformationSelectionInformationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationSelectionInformationRepositoryMockRecorder
}

// MockJobInformationSelectionInformationRepositoryMockRecorder is the mock recorder for MockJobInformationSelectionInformationRepository.
type MockJobInformationSelectionInformationRepositoryMockRecorder struct {
	mock *MockJobInformationSelectionInformationRepository
}

// NewMockJobInformationSelectionInformationRepository creates a new mock instance.
func NewMockJobInformationSelectionInformationRepository(ctrl *gomock.Controller) *MockJobInformationSelectionInformationRepository {
	mock := &MockJobInformationSelectionInformationRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationSelectionInformationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationSelectionInformationRepository) EXPECT() *MockJobInformationSelectionInformationRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationSelectionInformationRepository) All() ([]*entity.JobInformationSelectionInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationSelectionInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationSelectionInformationRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationSelectionInformationRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationSelectionInformationRepository) Create(selectionInformation *entity.JobInformationSelectionInformation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", selectionInformation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationSelectionInformationRepositoryMockRecorder) Create(selectionInformation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationSelectionInformationRepository)(nil).Create), selectionInformation)
}

// FindByJobSeekerIDAndJobInformationIDAndSelectionType mocks base method.
func (m *MockJobInformationSelectionInformationRepository) FindByJobSeekerIDAndJobInformationIDAndSelectionType(jobSeekerID, jobInformationID uint, selectionType null.Int) (*entity.JobInformationSelectionInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByJobSeekerIDAndJobInformationIDAndSelectionType", jobSeekerID, jobInformationID, selectionType)
	ret0, _ := ret[0].(*entity.JobInformationSelectionInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByJobSeekerIDAndJobInformationIDAndSelectionType indicates an expected call of FindByJobSeekerIDAndJobInformationIDAndSelectionType.
func (mr *MockJobInformationSelectionInformationRepositoryMockRecorder) FindByJobSeekerIDAndJobInformationIDAndSelectionType(jobSeekerID, jobInformationID, selectionType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByJobSeekerIDAndJobInformationIDAndSelectionType", reflect.TypeOf((*MockJobInformationSelectionInformationRepository)(nil).FindByJobSeekerIDAndJobInformationIDAndSelectionType), jobSeekerID, jobInformationID, selectionType)
}

// FindBySelectionFlowIDAndSelectionType mocks base method.
func (m *MockJobInformationSelectionInformationRepository) FindBySelectionFlowIDAndSelectionType(selectionFlowID, selectionType uint) (*entity.JobInformationSelectionInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySelectionFlowIDAndSelectionType", selectionFlowID, selectionType)
	ret0, _ := ret[0].(*entity.JobInformationSelectionInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySelectionFlowIDAndSelectionType indicates an expected call of FindBySelectionFlowIDAndSelectionType.
func (mr *MockJobInformationSelectionInformationRepositoryMockRecorder) FindBySelectionFlowIDAndSelectionType(selectionFlowID, selectionType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySelectionFlowIDAndSelectionType", reflect.TypeOf((*MockJobInformationSelectionInformationRepository)(nil).FindBySelectionFlowIDAndSelectionType), selectionFlowID, selectionType)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationSelectionInformationRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationSelectionInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationSelectionInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationSelectionInformationRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationSelectionInformationRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationSelectionInformationRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationSelectionInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationSelectionInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationSelectionInformationRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationSelectionInformationRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationSelectionInformationRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationSelectionInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationSelectionInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationSelectionInformationRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationSelectionInformationRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationSelectionInformationRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationSelectionInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationSelectionInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationSelectionInformationRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationSelectionInformationRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationSelectionInformationRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationSelectionInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationSelectionInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationSelectionInformationRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationSelectionInformationRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// GetBySelectionFlowID mocks base method.
func (m *MockJobInformationSelectionInformationRepository) GetBySelectionFlowID(selectionFlowID uint) ([]*entity.JobInformationSelectionInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySelectionFlowID", selectionFlowID)
	ret0, _ := ret[0].([]*entity.JobInformationSelectionInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySelectionFlowID indicates an expected call of GetBySelectionFlowID.
func (mr *MockJobInformationSelectionInformationRepositoryMockRecorder) GetBySelectionFlowID(selectionFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySelectionFlowID", reflect.TypeOf((*MockJobInformationSelectionInformationRepository)(nil).GetBySelectionFlowID), selectionFlowID)
}

// Update mocks base method.
func (m *MockJobInformationSelectionInformationRepository) Update(id uint, selectionInformation *entity.JobInformationSelectionInformation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, selectionInformation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockJobInformationSelectionInformationRepositoryMockRecorder) Update(id, selectionInformation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockJobInformationSelectionInformationRepository)(nil).Update), id, selectionInformation)
}

// MockJobInformationHideToAgentRepository is a mock of JobInformationHideToAgentRepository interface.
type MockJobInformationHideToAgentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationHideToAgentRepositoryMockRecorder
}

// MockJobInformationHideToAgentRepositoryMockRecorder is the mock recorder for MockJobInformationHideToAgentRepository.
type MockJobInformationHideToAgentRepositoryMockRecorder struct {
	mock *MockJobInformationHideToAgentRepository
}

// NewMockJobInformationHideToAgentRepository creates a new mock instance.
func NewMockJobInformationHideToAgentRepository(ctrl *gomock.Controller) *MockJobInformationHideToAgentRepository {
	mock := &MockJobInformationHideToAgentRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationHideToAgentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationHideToAgentRepository) EXPECT() *MockJobInformationHideToAgentRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobInformationHideToAgentRepository) All() ([]*entity.JobInformationHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobInformationHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobInformationHideToAgentRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobInformationHideToAgentRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobInformationHideToAgentRepository) Create(hideToAgent *entity.JobInformationHideToAgent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", hideToAgent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationHideToAgentRepositoryMockRecorder) Create(hideToAgent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationHideToAgentRepository)(nil).Create), hideToAgent)
}

// DeleteByJobInformationID mocks base method.
func (m *MockJobInformationHideToAgentRepository) DeleteByJobInformationID(jobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobInformationID", jobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobInformationID indicates an expected call of DeleteByJobInformationID.
func (mr *MockJobInformationHideToAgentRepositoryMockRecorder) DeleteByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobInformationID", reflect.TypeOf((*MockJobInformationHideToAgentRepository)(nil).DeleteByJobInformationID), jobInformationID)
}

// GetByAgentID mocks base method.
func (m *MockJobInformationHideToAgentRepository) GetByAgentID(agentID uint) ([]*entity.JobInformationHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobInformationHideToAgentRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobInformationHideToAgentRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentIDList mocks base method.
func (m *MockJobInformationHideToAgentRepository) GetByAgentIDList(agentIDList []uint) ([]*entity.JobInformationHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDList", agentIDList)
	ret0, _ := ret[0].([]*entity.JobInformationHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDList indicates an expected call of GetByAgentIDList.
func (mr *MockJobInformationHideToAgentRepositoryMockRecorder) GetByAgentIDList(agentIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDList", reflect.TypeOf((*MockJobInformationHideToAgentRepository)(nil).GetByAgentIDList), agentIDList)
}

// GetByBillingAddressID mocks base method.
func (m *MockJobInformationHideToAgentRepository) GetByBillingAddressID(billingAddressID uint) ([]*entity.JobInformationHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.JobInformationHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAddressID indicates an expected call of GetByBillingAddressID.
func (mr *MockJobInformationHideToAgentRepositoryMockRecorder) GetByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAddressID", reflect.TypeOf((*MockJobInformationHideToAgentRepository)(nil).GetByBillingAddressID), billingAddressID)
}

// GetByEnterpriseID mocks base method.
func (m *MockJobInformationHideToAgentRepository) GetByEnterpriseID(enterpriseID uint) ([]*entity.JobInformationHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEnterpriseID", enterpriseID)
	ret0, _ := ret[0].([]*entity.JobInformationHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEnterpriseID indicates an expected call of GetByEnterpriseID.
func (mr *MockJobInformationHideToAgentRepositoryMockRecorder) GetByEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEnterpriseID", reflect.TypeOf((*MockJobInformationHideToAgentRepository)(nil).GetByEnterpriseID), enterpriseID)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationHideToAgentRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationHideToAgentRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationHideToAgentRepository)(nil).GetByJobInformationID), jobInformationID)
}

// GetByJobInformationIDList mocks base method.
func (m *MockJobInformationHideToAgentRepository) GetByJobInformationIDList(jobInformationIDList []uint) ([]*entity.JobInformationHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", jobInformationIDList)
	ret0, _ := ret[0].([]*entity.JobInformationHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockJobInformationHideToAgentRepositoryMockRecorder) GetByJobInformationIDList(jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockJobInformationHideToAgentRepository)(nil).GetByJobInformationIDList), jobInformationIDList)
}

// GetHideByAgentID mocks base method.
func (m *MockJobInformationHideToAgentRepository) GetHideByAgentID(agentID uint) ([]*entity.JobInformationHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHideByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobInformationHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHideByAgentID indicates an expected call of GetHideByAgentID.
func (mr *MockJobInformationHideToAgentRepositoryMockRecorder) GetHideByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHideByAgentID", reflect.TypeOf((*MockJobInformationHideToAgentRepository)(nil).GetHideByAgentID), agentID)
}

// MockJobInformationExternalIDRepository is a mock of JobInformationExternalIDRepository interface.
type MockJobInformationExternalIDRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationExternalIDRepositoryMockRecorder
}

// MockJobInformationExternalIDRepositoryMockRecorder is the mock recorder for MockJobInformationExternalIDRepository.
type MockJobInformationExternalIDRepositoryMockRecorder struct {
	mock *MockJobInformationExternalIDRepository
}

// NewMockJobInformationExternalIDRepository creates a new mock instance.
func NewMockJobInformationExternalIDRepository(ctrl *gomock.Controller) *MockJobInformationExternalIDRepository {
	mock := &MockJobInformationExternalIDRepository{ctrl: ctrl}
	mock.recorder = &MockJobInformationExternalIDRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationExternalIDRepository) EXPECT() *MockJobInformationExternalIDRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockJobInformationExternalIDRepository) Create(externalID *entity.JobInformationExternalID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", externalID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobInformationExternalIDRepositoryMockRecorder) Create(externalID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobInformationExternalIDRepository)(nil).Create), externalID)
}

// DeleteByJobInformationID mocks base method.
func (m *MockJobInformationExternalIDRepository) DeleteByJobInformationID(jobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobInformationID", jobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobInformationID indicates an expected call of DeleteByJobInformationID.
func (mr *MockJobInformationExternalIDRepositoryMockRecorder) DeleteByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobInformationID", reflect.TypeOf((*MockJobInformationExternalIDRepository)(nil).DeleteByJobInformationID), jobInformationID)
}

// GetByAgentIDAndExternalType mocks base method.
func (m *MockJobInformationExternalIDRepository) GetByAgentIDAndExternalType(agentID uint, externalType entity.JobInformatinoExternalType) ([]*entity.JobInformationExternalID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndExternalType", agentID, externalType)
	ret0, _ := ret[0].([]*entity.JobInformationExternalID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndExternalType indicates an expected call of GetByAgentIDAndExternalType.
func (mr *MockJobInformationExternalIDRepositoryMockRecorder) GetByAgentIDAndExternalType(agentID, externalType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndExternalType", reflect.TypeOf((*MockJobInformationExternalIDRepository)(nil).GetByAgentIDAndExternalType), agentID, externalType)
}

// GetByJobInformationID mocks base method.
func (m *MockJobInformationExternalIDRepository) GetByJobInformationID(jobInformationID uint) ([]*entity.JobInformationExternalID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.JobInformationExternalID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationID indicates an expected call of GetByJobInformationID.
func (mr *MockJobInformationExternalIDRepositoryMockRecorder) GetByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationID", reflect.TypeOf((*MockJobInformationExternalIDRepository)(nil).GetByJobInformationID), jobInformationID)
}

// MockJobSeekerRepository is a mock of JobSeekerRepository interface.
type MockJobSeekerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerRepositoryMockRecorder
}

// MockJobSeekerRepositoryMockRecorder is the mock recorder for MockJobSeekerRepository.
type MockJobSeekerRepositoryMockRecorder struct {
	mock *MockJobSeekerRepository
}

// NewMockJobSeekerRepository creates a new mock instance.
func NewMockJobSeekerRepository(ctrl *gomock.Controller) *MockJobSeekerRepository {
	mock := &MockJobSeekerRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerRepository) EXPECT() *MockJobSeekerRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerRepository) All() ([]*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerRepository)(nil).All))
}

// CountByEmail mocks base method.
func (m *MockJobSeekerRepository) CountByEmail(email string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByEmail", email)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByEmail indicates an expected call of CountByEmail.
func (mr *MockJobSeekerRepositoryMockRecorder) CountByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByEmail", reflect.TypeOf((*MockJobSeekerRepository)(nil).CountByEmail), email)
}

// Create mocks base method.
func (m *MockJobSeekerRepository) Create(jobSeeker *entity.JobSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", jobSeeker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerRepositoryMockRecorder) Create(jobSeeker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerRepository)(nil).Create), jobSeeker)
}

// Delete mocks base method.
func (m *MockJobSeekerRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockJobSeekerRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockJobSeekerRepository)(nil).Delete), id)
}

// FindByAgentIDAndLineID mocks base method.
func (m *MockJobSeekerRepository) FindByAgentIDAndLineID(agentID uint, lineID string) (*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAgentIDAndLineID", agentID, lineID)
	ret0, _ := ret[0].(*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAgentIDAndLineID indicates an expected call of FindByAgentIDAndLineID.
func (mr *MockJobSeekerRepositoryMockRecorder) FindByAgentIDAndLineID(agentID, lineID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAgentIDAndLineID", reflect.TypeOf((*MockJobSeekerRepository)(nil).FindByAgentIDAndLineID), agentID, lineID)
}

// FindByEmailForLP mocks base method.
func (m *MockJobSeekerRepository) FindByEmailForLP(email string, agentID uint) (*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmailForLP", email, agentID)
	ret0, _ := ret[0].(*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmailForLP indicates an expected call of FindByEmailForLP.
func (mr *MockJobSeekerRepositoryMockRecorder) FindByEmailForLP(email, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmailForLP", reflect.TypeOf((*MockJobSeekerRepository)(nil).FindByEmailForLP), email, agentID)
}

// FindByID mocks base method.
func (m *MockJobSeekerRepository) FindByID(id uint) (*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockJobSeekerRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockJobSeekerRepository)(nil).FindByID), id)
}

// FindByNameAndPhoneNumberByMotoyuiAgent mocks base method.
func (m *MockJobSeekerRepository) FindByNameAndPhoneNumberByMotoyuiAgent(firstName, lastName, firstFurigana, lastFurigana, phoneNumber string) (*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNameAndPhoneNumberByMotoyuiAgent", firstName, lastName, firstFurigana, lastFurigana, phoneNumber)
	ret0, _ := ret[0].(*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNameAndPhoneNumberByMotoyuiAgent indicates an expected call of FindByNameAndPhoneNumberByMotoyuiAgent.
func (mr *MockJobSeekerRepositoryMockRecorder) FindByNameAndPhoneNumberByMotoyuiAgent(firstName, lastName, firstFurigana, lastFurigana, phoneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNameAndPhoneNumberByMotoyuiAgent", reflect.TypeOf((*MockJobSeekerRepository)(nil).FindByNameAndPhoneNumberByMotoyuiAgent), firstName, lastName, firstFurigana, lastFurigana, phoneNumber)
}

// FindByPhoneNumberForLP mocks base method.
func (m *MockJobSeekerRepository) FindByPhoneNumberForLP(phoneNumber string, agentID uint) (*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhoneNumberForLP", phoneNumber, agentID)
	ret0, _ := ret[0].(*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhoneNumberForLP indicates an expected call of FindByPhoneNumberForLP.
func (mr *MockJobSeekerRepositoryMockRecorder) FindByPhoneNumberForLP(phoneNumber, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhoneNumberForLP", reflect.TypeOf((*MockJobSeekerRepository)(nil).FindByPhoneNumberForLP), phoneNumber, agentID)
}

// FindByResetPasswordTokenForLP mocks base method.
func (m *MockJobSeekerRepository) FindByResetPasswordTokenForLP(resetPasswordToken string, agentID uint) (*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByResetPasswordTokenForLP", resetPasswordToken, agentID)
	ret0, _ := ret[0].(*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByResetPasswordTokenForLP indicates an expected call of FindByResetPasswordTokenForLP.
func (mr *MockJobSeekerRepositoryMockRecorder) FindByResetPasswordTokenForLP(resetPasswordToken, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByResetPasswordTokenForLP", reflect.TypeOf((*MockJobSeekerRepository)(nil).FindByResetPasswordTokenForLP), resetPasswordToken, agentID)
}

// FindByTaskGroupUUID mocks base method.
func (m *MockJobSeekerRepository) FindByTaskGroupUUID(taskGroupUUID uuid.UUID) (*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTaskGroupUUID", taskGroupUUID)
	ret0, _ := ret[0].(*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTaskGroupUUID indicates an expected call of FindByTaskGroupUUID.
func (mr *MockJobSeekerRepositoryMockRecorder) FindByTaskGroupUUID(taskGroupUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTaskGroupUUID", reflect.TypeOf((*MockJobSeekerRepository)(nil).FindByTaskGroupUUID), taskGroupUUID)
}

// FindByUUID mocks base method.
func (m *MockJobSeekerRepository) FindByUUID(uuid uuid.UUID) (*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", uuid)
	ret0, _ := ret[0].(*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockJobSeekerRepositoryMockRecorder) FindByUUID(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockJobSeekerRepository)(nil).FindByUUID), uuid)
}

// GetActiveAllAndFreeWord mocks base method.
func (m *MockJobSeekerRepository) GetActiveAllAndFreeWord(agentID uint, freeWord string) ([]*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveAllAndFreeWord", agentID, freeWord)
	ret0, _ := ret[0].([]*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveAllAndFreeWord indicates an expected call of GetActiveAllAndFreeWord.
func (mr *MockJobSeekerRepositoryMockRecorder) GetActiveAllAndFreeWord(agentID, freeWord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveAllAndFreeWord", reflect.TypeOf((*MockJobSeekerRepository)(nil).GetActiveAllAndFreeWord), agentID, freeWord)
}

// GetActiveOwnAndFreeWord mocks base method.
func (m *MockJobSeekerRepository) GetActiveOwnAndFreeWord(agentID uint, freeWord string) ([]*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveOwnAndFreeWord", agentID, freeWord)
	ret0, _ := ret[0].([]*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveOwnAndFreeWord indicates an expected call of GetActiveOwnAndFreeWord.
func (mr *MockJobSeekerRepositoryMockRecorder) GetActiveOwnAndFreeWord(agentID, freeWord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveOwnAndFreeWord", reflect.TypeOf((*MockJobSeekerRepository)(nil).GetActiveOwnAndFreeWord), agentID, freeWord)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerRepository) GetByAgentID(agentID uint) ([]*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentIDAndFreeWord mocks base method.
func (m *MockJobSeekerRepository) GetByAgentIDAndFreeWord(agentID uint, freeWord string) ([]*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndFreeWord", agentID, freeWord)
	ret0, _ := ret[0].([]*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndFreeWord indicates an expected call of GetByAgentIDAndFreeWord.
func (mr *MockJobSeekerRepositoryMockRecorder) GetByAgentIDAndFreeWord(agentID, freeWord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndFreeWord", reflect.TypeOf((*MockJobSeekerRepository)(nil).GetByAgentIDAndFreeWord), agentID, freeWord)
}

// GetByAgentIDAndFreeWordAndAlliance mocks base method.
func (m *MockJobSeekerRepository) GetByAgentIDAndFreeWordAndAlliance(agentID uint, freeWord string, allaicenAgentList []*entity.AgentAlliance) ([]*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndFreeWordAndAlliance", agentID, freeWord, allaicenAgentList)
	ret0, _ := ret[0].([]*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndFreeWordAndAlliance indicates an expected call of GetByAgentIDAndFreeWordAndAlliance.
func (mr *MockJobSeekerRepositoryMockRecorder) GetByAgentIDAndFreeWordAndAlliance(agentID, freeWord, allaicenAgentList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndFreeWordAndAlliance", reflect.TypeOf((*MockJobSeekerRepository)(nil).GetByAgentIDAndFreeWordAndAlliance), agentID, freeWord, allaicenAgentList)
}

// GetByAgentIDWithinTwoDays mocks base method.
func (m *MockJobSeekerRepository) GetByAgentIDWithinTwoDays(agentID uint) ([]*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDWithinTwoDays", agentID)
	ret0, _ := ret[0].([]*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDWithinTwoDays indicates an expected call of GetByAgentIDWithinTwoDays.
func (mr *MockJobSeekerRepositoryMockRecorder) GetByAgentIDWithinTwoDays(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDWithinTwoDays", reflect.TypeOf((*MockJobSeekerRepository)(nil).GetByAgentIDWithinTwoDays), agentID)
}

// GetByAgentStaffIDAndNotRelease mocks base method.
func (m *MockJobSeekerRepository) GetByAgentStaffIDAndNotRelease(agentStaffID uint) ([]*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentStaffIDAndNotRelease", agentStaffID)
	ret0, _ := ret[0].([]*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentStaffIDAndNotRelease indicates an expected call of GetByAgentStaffIDAndNotRelease.
func (mr *MockJobSeekerRepositoryMockRecorder) GetByAgentStaffIDAndNotRelease(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentStaffIDAndNotRelease", reflect.TypeOf((*MockJobSeekerRepository)(nil).GetByAgentStaffIDAndNotRelease), agentStaffID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerRepository) GetByIDList(idList []uint) ([]*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerRepository)(nil).GetByIDList), idList)
}

// GetByOtherAgentIDAndFreeWord mocks base method.
func (m *MockJobSeekerRepository) GetByOtherAgentIDAndFreeWord(agentID uint, freeWord string, agentAllianceList []*entity.AgentAlliance) ([]*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOtherAgentIDAndFreeWord", agentID, freeWord, agentAllianceList)
	ret0, _ := ret[0].([]*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOtherAgentIDAndFreeWord indicates an expected call of GetByOtherAgentIDAndFreeWord.
func (mr *MockJobSeekerRepositoryMockRecorder) GetByOtherAgentIDAndFreeWord(agentID, freeWord, agentAllianceList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOtherAgentIDAndFreeWord", reflect.TypeOf((*MockJobSeekerRepository)(nil).GetByOtherAgentIDAndFreeWord), agentID, freeWord, agentAllianceList)
}

// GetDuplicateByNameAndFuriganaAndEmailAndPhoneNumber mocks base method.
func (m *MockJobSeekerRepository) GetDuplicateByNameAndFuriganaAndEmailAndPhoneNumber(agentID uint, lastName, firstName, lastFurigana, firstFurigana, email, phoneNumber string) ([]*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuplicateByNameAndFuriganaAndEmailAndPhoneNumber", agentID, lastName, firstName, lastFurigana, firstFurigana, email, phoneNumber)
	ret0, _ := ret[0].([]*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDuplicateByNameAndFuriganaAndEmailAndPhoneNumber indicates an expected call of GetDuplicateByNameAndFuriganaAndEmailAndPhoneNumber.
func (mr *MockJobSeekerRepositoryMockRecorder) GetDuplicateByNameAndFuriganaAndEmailAndPhoneNumber(agentID, lastName, firstName, lastFurigana, firstFurigana, email, phoneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuplicateByNameAndFuriganaAndEmailAndPhoneNumber", reflect.TypeOf((*MockJobSeekerRepository)(nil).GetDuplicateByNameAndFuriganaAndEmailAndPhoneNumber), agentID, lastName, firstName, lastFurigana, firstFurigana, email, phoneNumber)
}

// GetReleaseByAgentID mocks base method.
func (m *MockJobSeekerRepository) GetReleaseByAgentID(agentID uint) ([]*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleaseByAgentID indicates an expected call of GetReleaseByAgentID.
func (mr *MockJobSeekerRepositoryMockRecorder) GetReleaseByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseByAgentID", reflect.TypeOf((*MockJobSeekerRepository)(nil).GetReleaseByAgentID), agentID)
}

// GetReleaseByStaffID mocks base method.
func (m *MockJobSeekerRepository) GetReleaseByStaffID(staffID uint) ([]*entity.JobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReleaseByStaffID indicates an expected call of GetReleaseByStaffID.
func (mr *MockJobSeekerRepositoryMockRecorder) GetReleaseByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseByStaffID", reflect.TypeOf((*MockJobSeekerRepository)(nil).GetReleaseByStaffID), staffID)
}

// Update mocks base method.
func (m *MockJobSeekerRepository) Update(id uint, jobSeeker *entity.JobSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, jobSeeker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockJobSeekerRepositoryMockRecorder) Update(id, jobSeeker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockJobSeekerRepository)(nil).Update), id, jobSeeker)
}

// UpdateAcceptancePoints mocks base method.
func (m *MockJobSeekerRepository) UpdateAcceptancePoints(id uint, acceptancePoints string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAcceptancePoints", id, acceptancePoints)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAcceptancePoints indicates an expected call of UpdateAcceptancePoints.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdateAcceptancePoints(id, acceptancePoints any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAcceptancePoints", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdateAcceptancePoints), id, acceptancePoints)
}

// UpdateActivityMemo mocks base method.
func (m *MockJobSeekerRepository) UpdateActivityMemo(id uint, activityMemo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActivityMemo", id, activityMemo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActivityMemo indicates an expected call of UpdateActivityMemo.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdateActivityMemo(id, activityMemo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActivityMemo", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdateActivityMemo), id, activityMemo)
}

// UpdateAgreement mocks base method.
func (m *MockJobSeekerRepository) UpdateAgreement(id uint, agreement bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgreement", id, agreement)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgreement indicates an expected call of UpdateAgreement.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdateAgreement(id, agreement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgreement", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdateAgreement), id, agreement)
}

// UpdateCanViewMatchingJob mocks base method.
func (m *MockJobSeekerRepository) UpdateCanViewMatchingJob(id uint, canView bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCanViewMatchingJob", id, canView)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCanViewMatchingJob indicates an expected call of UpdateCanViewMatchingJob.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdateCanViewMatchingJob(id, canView any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCanViewMatchingJob", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdateCanViewMatchingJob), id, canView)
}

// UpdateCreatedAt mocks base method.
func (m *MockJobSeekerRepository) UpdateCreatedAt(id uint, createdAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCreatedAt", id, createdAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCreatedAt indicates an expected call of UpdateCreatedAt.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdateCreatedAt(id, createdAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCreatedAt", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdateCreatedAt), id, createdAt)
}

// UpdateDesiredIncomeByUUID mocks base method.
func (m *MockJobSeekerRepository) UpdateDesiredIncomeByUUID(uuid uuid.UUID, desiredIncome null.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDesiredIncomeByUUID", uuid, desiredIncome)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDesiredIncomeByUUID indicates an expected call of UpdateDesiredIncomeByUUID.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdateDesiredIncomeByUUID(uuid, desiredIncome any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDesiredIncomeByUUID", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdateDesiredIncomeByUUID), uuid, desiredIncome)
}

// UpdateForDev mocks base method.
func (m *MockJobSeekerRepository) UpdateForDev(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateForDev", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateForDev indicates an expected call of UpdateForDev.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdateForDev(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForDev", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdateForDev), id)
}

// UpdateInterviewDate mocks base method.
func (m *MockJobSeekerRepository) UpdateInterviewDate(id uint, interviewDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInterviewDate", id, interviewDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInterviewDate indicates an expected call of UpdateInterviewDate.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdateInterviewDate(id, interviewDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInterviewDate", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdateInterviewDate), id, interviewDate)
}

// UpdateLineIDByUUID mocks base method.
func (m *MockJobSeekerRepository) UpdateLineIDByUUID(uuid uuid.UUID, lineID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLineIDByUUID", uuid, lineID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLineIDByUUID indicates an expected call of UpdateLineIDByUUID.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdateLineIDByUUID(uuid, lineID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLineIDByUUID", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdateLineIDByUUID), uuid, lineID)
}

// UpdatePassword mocks base method.
func (m *MockJobSeekerRepository) UpdatePassword(uuid uuid.UUID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", uuid, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdatePassword(uuid, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdatePassword), uuid, password)
}

// UpdatePhase mocks base method.
func (m *MockJobSeekerRepository) UpdatePhase(id uint, phase null.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhase", id, phase)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhase indicates an expected call of UpdatePhase.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdatePhase(id, phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhase", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdatePhase), id, phase)
}

// UpdatePhoneNumberByUUID mocks base method.
func (m *MockJobSeekerRepository) UpdatePhoneNumberByUUID(uuid uuid.UUID, phoneNumber string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoneNumberByUUID", uuid, phoneNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhoneNumberByUUID indicates an expected call of UpdatePhoneNumberByUUID.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdatePhoneNumberByUUID(uuid, phoneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoneNumberByUUID", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdatePhoneNumberByUUID), uuid, phoneNumber)
}

// UpdateResetPasswordToken mocks base method.
func (m *MockJobSeekerRepository) UpdateResetPasswordToken(uuid uuid.UUID, resetPasswordToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResetPasswordToken", uuid, resetPasswordToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResetPasswordToken indicates an expected call of UpdateResetPasswordToken.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdateResetPasswordToken(uuid, resetPasswordToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResetPasswordToken", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdateResetPasswordToken), uuid, resetPasswordToken)
}

// UpdateStaffID mocks base method.
func (m *MockJobSeekerRepository) UpdateStaffID(id uint, staffID null.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStaffID", id, staffID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStaffID indicates an expected call of UpdateStaffID.
func (mr *MockJobSeekerRepositoryMockRecorder) UpdateStaffID(id, staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStaffID", reflect.TypeOf((*MockJobSeekerRepository)(nil).UpdateStaffID), id, staffID)
}

// MockJobSeekerDocumentRepository is a mock of JobSeekerDocumentRepository interface.
type MockJobSeekerDocumentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerDocumentRepositoryMockRecorder
}

// MockJobSeekerDocumentRepositoryMockRecorder is the mock recorder for MockJobSeekerDocumentRepository.
type MockJobSeekerDocumentRepositoryMockRecorder struct {
	mock *MockJobSeekerDocumentRepository
}

// NewMockJobSeekerDocumentRepository creates a new mock instance.
func NewMockJobSeekerDocumentRepository(ctrl *gomock.Controller) *MockJobSeekerDocumentRepository {
	mock := &MockJobSeekerDocumentRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerDocumentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerDocumentRepository) EXPECT() *MockJobSeekerDocumentRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerDocumentRepository) All() ([]*entity.JobSeekerDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerDocumentRepository) Create(document *entity.JobSeekerDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) Create(document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).Create), document)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerDocumentRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// FindByJobSeekerID mocks base method.
func (m *MockJobSeekerDocumentRepository) FindByJobSeekerID(jobSeekerID uint) (*entity.JobSeekerDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(*entity.JobSeekerDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByJobSeekerID indicates an expected call of FindByJobSeekerID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) FindByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByJobSeekerID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).FindByJobSeekerID), jobSeekerID)
}

// FindByJobSeekerUUID mocks base method.
func (m *MockJobSeekerDocumentRepository) FindByJobSeekerUUID(jobSeekerUUID uuid.UUID) (*entity.JobSeekerDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByJobSeekerUUID", jobSeekerUUID)
	ret0, _ := ret[0].(*entity.JobSeekerDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByJobSeekerUUID indicates an expected call of FindByJobSeekerUUID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) FindByJobSeekerUUID(jobSeekerUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByJobSeekerUUID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).FindByJobSeekerUUID), jobSeekerUUID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerDocumentRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerDocumentRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).GetByIDList), idList)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerDocumentRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).GetByStaffID), staffID)
}

// UpdateByJobSeekerID mocks base method.
func (m *MockJobSeekerDocumentRepository) UpdateByJobSeekerID(jobSeekerID uint, document *entity.JobSeekerDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByJobSeekerID", jobSeekerID, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByJobSeekerID indicates an expected call of UpdateByJobSeekerID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) UpdateByJobSeekerID(jobSeekerID, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByJobSeekerID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).UpdateByJobSeekerID), jobSeekerID, document)
}

// UpdateCVOriginURLByJobSeekerID mocks base method.
func (m *MockJobSeekerDocumentRepository) UpdateCVOriginURLByJobSeekerID(jobSeekerID uint, cvOriginURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCVOriginURLByJobSeekerID", jobSeekerID, cvOriginURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCVOriginURLByJobSeekerID indicates an expected call of UpdateCVOriginURLByJobSeekerID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) UpdateCVOriginURLByJobSeekerID(jobSeekerID, cvOriginURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCVOriginURLByJobSeekerID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).UpdateCVOriginURLByJobSeekerID), jobSeekerID, cvOriginURL)
}

// UpdateCVPDFURLByJobSeekerID mocks base method.
func (m *MockJobSeekerDocumentRepository) UpdateCVPDFURLByJobSeekerID(jobSeekerID uint, cvPDFURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCVPDFURLByJobSeekerID", jobSeekerID, cvPDFURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCVPDFURLByJobSeekerID indicates an expected call of UpdateCVPDFURLByJobSeekerID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) UpdateCVPDFURLByJobSeekerID(jobSeekerID, cvPDFURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCVPDFURLByJobSeekerID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).UpdateCVPDFURLByJobSeekerID), jobSeekerID, cvPDFURL)
}

// UpdateIDPhotoURLByJobSeekerID mocks base method.
func (m *MockJobSeekerDocumentRepository) UpdateIDPhotoURLByJobSeekerID(jobSeekerID uint, idPhotoURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIDPhotoURLByJobSeekerID", jobSeekerID, idPhotoURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIDPhotoURLByJobSeekerID indicates an expected call of UpdateIDPhotoURLByJobSeekerID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) UpdateIDPhotoURLByJobSeekerID(jobSeekerID, idPhotoURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIDPhotoURLByJobSeekerID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).UpdateIDPhotoURLByJobSeekerID), jobSeekerID, idPhotoURL)
}

// UpdateOtherDocument1URLByJobSeekerID mocks base method.
func (m *MockJobSeekerDocumentRepository) UpdateOtherDocument1URLByJobSeekerID(jobSeekerID uint, otherDocument1URL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOtherDocument1URLByJobSeekerID", jobSeekerID, otherDocument1URL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOtherDocument1URLByJobSeekerID indicates an expected call of UpdateOtherDocument1URLByJobSeekerID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) UpdateOtherDocument1URLByJobSeekerID(jobSeekerID, otherDocument1URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOtherDocument1URLByJobSeekerID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).UpdateOtherDocument1URLByJobSeekerID), jobSeekerID, otherDocument1URL)
}

// UpdateOtherDocument2URLByJobSeekerID mocks base method.
func (m *MockJobSeekerDocumentRepository) UpdateOtherDocument2URLByJobSeekerID(jobSeekerID uint, otherDocument2URL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOtherDocument2URLByJobSeekerID", jobSeekerID, otherDocument2URL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOtherDocument2URLByJobSeekerID indicates an expected call of UpdateOtherDocument2URLByJobSeekerID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) UpdateOtherDocument2URLByJobSeekerID(jobSeekerID, otherDocument2URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOtherDocument2URLByJobSeekerID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).UpdateOtherDocument2URLByJobSeekerID), jobSeekerID, otherDocument2URL)
}

// UpdateOtherDocument3URLByJobSeekerID mocks base method.
func (m *MockJobSeekerDocumentRepository) UpdateOtherDocument3URLByJobSeekerID(jobSeekerID uint, otherDocument3URL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOtherDocument3URLByJobSeekerID", jobSeekerID, otherDocument3URL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOtherDocument3URLByJobSeekerID indicates an expected call of UpdateOtherDocument3URLByJobSeekerID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) UpdateOtherDocument3URLByJobSeekerID(jobSeekerID, otherDocument3URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOtherDocument3URLByJobSeekerID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).UpdateOtherDocument3URLByJobSeekerID), jobSeekerID, otherDocument3URL)
}

// UpdateRecommendationOriginURLByJobSeekerID mocks base method.
func (m *MockJobSeekerDocumentRepository) UpdateRecommendationOriginURLByJobSeekerID(jobSeekerID uint, recommendationOriginURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecommendationOriginURLByJobSeekerID", jobSeekerID, recommendationOriginURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecommendationOriginURLByJobSeekerID indicates an expected call of UpdateRecommendationOriginURLByJobSeekerID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) UpdateRecommendationOriginURLByJobSeekerID(jobSeekerID, recommendationOriginURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecommendationOriginURLByJobSeekerID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).UpdateRecommendationOriginURLByJobSeekerID), jobSeekerID, recommendationOriginURL)
}

// UpdateRecommendationPDFURLByJobSeekerID mocks base method.
func (m *MockJobSeekerDocumentRepository) UpdateRecommendationPDFURLByJobSeekerID(jobSeekerID uint, recommendationPDFURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecommendationPDFURLByJobSeekerID", jobSeekerID, recommendationPDFURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecommendationPDFURLByJobSeekerID indicates an expected call of UpdateRecommendationPDFURLByJobSeekerID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) UpdateRecommendationPDFURLByJobSeekerID(jobSeekerID, recommendationPDFURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecommendationPDFURLByJobSeekerID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).UpdateRecommendationPDFURLByJobSeekerID), jobSeekerID, recommendationPDFURL)
}

// UpdateResumeOriginURLByJobSeekerID mocks base method.
func (m *MockJobSeekerDocumentRepository) UpdateResumeOriginURLByJobSeekerID(jobSeekerID uint, resumeOriginURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResumeOriginURLByJobSeekerID", jobSeekerID, resumeOriginURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResumeOriginURLByJobSeekerID indicates an expected call of UpdateResumeOriginURLByJobSeekerID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) UpdateResumeOriginURLByJobSeekerID(jobSeekerID, resumeOriginURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResumeOriginURLByJobSeekerID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).UpdateResumeOriginURLByJobSeekerID), jobSeekerID, resumeOriginURL)
}

// UpdateResumePDFURLByJobSeekerID mocks base method.
func (m *MockJobSeekerDocumentRepository) UpdateResumePDFURLByJobSeekerID(jobSeekerID uint, resumePDFURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResumePDFURLByJobSeekerID", jobSeekerID, resumePDFURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResumePDFURLByJobSeekerID indicates an expected call of UpdateResumePDFURLByJobSeekerID.
func (mr *MockJobSeekerDocumentRepositoryMockRecorder) UpdateResumePDFURLByJobSeekerID(jobSeekerID, resumePDFURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResumePDFURLByJobSeekerID", reflect.TypeOf((*MockJobSeekerDocumentRepository)(nil).UpdateResumePDFURLByJobSeekerID), jobSeekerID, resumePDFURL)
}

// MockJobSeekerStudentHistoryRepository is a mock of JobSeekerStudentHistoryRepository interface.
type MockJobSeekerStudentHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerStudentHistoryRepositoryMockRecorder
}

// MockJobSeekerStudentHistoryRepositoryMockRecorder is the mock recorder for MockJobSeekerStudentHistoryRepository.
type MockJobSeekerStudentHistoryRepositoryMockRecorder struct {
	mock *MockJobSeekerStudentHistoryRepository
}

// NewMockJobSeekerStudentHistoryRepository creates a new mock instance.
func NewMockJobSeekerStudentHistoryRepository(ctrl *gomock.Controller) *MockJobSeekerStudentHistoryRepository {
	mock := &MockJobSeekerStudentHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerStudentHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerStudentHistoryRepository) EXPECT() *MockJobSeekerStudentHistoryRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerStudentHistoryRepository) All() ([]*entity.JobSeekerStudentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerStudentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerStudentHistoryRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerStudentHistoryRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerStudentHistoryRepository) Create(studentHistory *entity.JobSeekerStudentHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", studentHistory)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerStudentHistoryRepositoryMockRecorder) Create(studentHistory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerStudentHistoryRepository)(nil).Create), studentHistory)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerStudentHistoryRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerStudentHistoryRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerStudentHistoryRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerStudentHistoryRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerStudentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerStudentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerStudentHistoryRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerStudentHistoryRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerStudentHistoryRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerStudentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerStudentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerStudentHistoryRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerStudentHistoryRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerStudentHistoryRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerStudentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerStudentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerStudentHistoryRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerStudentHistoryRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerStudentHistoryRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerStudentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerStudentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerStudentHistoryRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerStudentHistoryRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerWorkHistoryRepository is a mock of JobSeekerWorkHistoryRepository interface.
type MockJobSeekerWorkHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerWorkHistoryRepositoryMockRecorder
}

// MockJobSeekerWorkHistoryRepositoryMockRecorder is the mock recorder for MockJobSeekerWorkHistoryRepository.
type MockJobSeekerWorkHistoryRepositoryMockRecorder struct {
	mock *MockJobSeekerWorkHistoryRepository
}

// NewMockJobSeekerWorkHistoryRepository creates a new mock instance.
func NewMockJobSeekerWorkHistoryRepository(ctrl *gomock.Controller) *MockJobSeekerWorkHistoryRepository {
	mock := &MockJobSeekerWorkHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerWorkHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerWorkHistoryRepository) EXPECT() *MockJobSeekerWorkHistoryRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerWorkHistoryRepository) All() ([]*entity.JobSeekerWorkHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerWorkHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerWorkHistoryRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerWorkHistoryRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerWorkHistoryRepository) Create(workHistory *entity.JobSeekerWorkHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", workHistory)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerWorkHistoryRepositoryMockRecorder) Create(workHistory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerWorkHistoryRepository)(nil).Create), workHistory)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerWorkHistoryRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerWorkHistoryRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerWorkHistoryRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerWorkHistoryRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerWorkHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerWorkHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerWorkHistoryRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerWorkHistoryRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerWorkHistoryRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerWorkHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerWorkHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerWorkHistoryRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerWorkHistoryRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerWorkHistoryRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerWorkHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerWorkHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerWorkHistoryRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerWorkHistoryRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerWorkHistoryRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerWorkHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerWorkHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerWorkHistoryRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerWorkHistoryRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerExperienceIndustryRepository is a mock of JobSeekerExperienceIndustryRepository interface.
type MockJobSeekerExperienceIndustryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerExperienceIndustryRepositoryMockRecorder
}

// MockJobSeekerExperienceIndustryRepositoryMockRecorder is the mock recorder for MockJobSeekerExperienceIndustryRepository.
type MockJobSeekerExperienceIndustryRepositoryMockRecorder struct {
	mock *MockJobSeekerExperienceIndustryRepository
}

// NewMockJobSeekerExperienceIndustryRepository creates a new mock instance.
func NewMockJobSeekerExperienceIndustryRepository(ctrl *gomock.Controller) *MockJobSeekerExperienceIndustryRepository {
	mock := &MockJobSeekerExperienceIndustryRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerExperienceIndustryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerExperienceIndustryRepository) EXPECT() *MockJobSeekerExperienceIndustryRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerExperienceIndustryRepository) All() ([]*entity.JobSeekerExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerExperienceIndustryRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerExperienceIndustryRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerExperienceIndustryRepository) Create(experienceIndustry *entity.JobSeekerExperienceIndustry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", experienceIndustry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerExperienceIndustryRepositoryMockRecorder) Create(experienceIndustry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerExperienceIndustryRepository)(nil).Create), experienceIndustry)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerExperienceIndustryRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerExperienceIndustryRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerExperienceIndustryRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerExperienceIndustryRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerExperienceIndustryRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerExperienceIndustryRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerExperienceIndustryRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerExperienceIndustryRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerExperienceIndustryRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerExperienceIndustryRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerExperienceIndustryRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerExperienceIndustryRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerDepartmentHistoryRepository is a mock of JobSeekerDepartmentHistoryRepository interface.
type MockJobSeekerDepartmentHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerDepartmentHistoryRepositoryMockRecorder
}

// MockJobSeekerDepartmentHistoryRepositoryMockRecorder is the mock recorder for MockJobSeekerDepartmentHistoryRepository.
type MockJobSeekerDepartmentHistoryRepositoryMockRecorder struct {
	mock *MockJobSeekerDepartmentHistoryRepository
}

// NewMockJobSeekerDepartmentHistoryRepository creates a new mock instance.
func NewMockJobSeekerDepartmentHistoryRepository(ctrl *gomock.Controller) *MockJobSeekerDepartmentHistoryRepository {
	mock := &MockJobSeekerDepartmentHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerDepartmentHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerDepartmentHistoryRepository) EXPECT() *MockJobSeekerDepartmentHistoryRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerDepartmentHistoryRepository) All() ([]*entity.JobSeekerDepartmentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerDepartmentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerDepartmentHistoryRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerDepartmentHistoryRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerDepartmentHistoryRepository) Create(departmentHistory *entity.JobSeekerDepartmentHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", departmentHistory)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerDepartmentHistoryRepositoryMockRecorder) Create(departmentHistory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerDepartmentHistoryRepository)(nil).Create), departmentHistory)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerDepartmentHistoryRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerDepartmentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerDepartmentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerDepartmentHistoryRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerDepartmentHistoryRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerDepartmentHistoryRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerDepartmentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerDepartmentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerDepartmentHistoryRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerDepartmentHistoryRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerDepartmentHistoryRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerDepartmentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerDepartmentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerDepartmentHistoryRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerDepartmentHistoryRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerDepartmentHistoryRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerDepartmentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerDepartmentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerDepartmentHistoryRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerDepartmentHistoryRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerExperienceOccupationRepository is a mock of JobSeekerExperienceOccupationRepository interface.
type MockJobSeekerExperienceOccupationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerExperienceOccupationRepositoryMockRecorder
}

// MockJobSeekerExperienceOccupationRepositoryMockRecorder is the mock recorder for MockJobSeekerExperienceOccupationRepository.
type MockJobSeekerExperienceOccupationRepositoryMockRecorder struct {
	mock *MockJobSeekerExperienceOccupationRepository
}

// NewMockJobSeekerExperienceOccupationRepository creates a new mock instance.
func NewMockJobSeekerExperienceOccupationRepository(ctrl *gomock.Controller) *MockJobSeekerExperienceOccupationRepository {
	mock := &MockJobSeekerExperienceOccupationRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerExperienceOccupationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerExperienceOccupationRepository) EXPECT() *MockJobSeekerExperienceOccupationRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerExperienceOccupationRepository) All() ([]*entity.JobSeekerExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerExperienceOccupationRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerExperienceOccupationRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerExperienceOccupationRepository) Create(experienceOccupation *entity.JobSeekerExperienceOccupation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", experienceOccupation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerExperienceOccupationRepositoryMockRecorder) Create(experienceOccupation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerExperienceOccupationRepository)(nil).Create), experienceOccupation)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerExperienceOccupationRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerExperienceOccupationRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerExperienceOccupationRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerExperienceOccupationRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerExperienceOccupationRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerExperienceOccupationRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerExperienceOccupationRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerExperienceOccupationRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerExperienceOccupationRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerExperienceOccupationRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerExperienceOccupationRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerExperienceOccupationRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerLicenseRepository is a mock of JobSeekerLicenseRepository interface.
type MockJobSeekerLicenseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerLicenseRepositoryMockRecorder
}

// MockJobSeekerLicenseRepositoryMockRecorder is the mock recorder for MockJobSeekerLicenseRepository.
type MockJobSeekerLicenseRepositoryMockRecorder struct {
	mock *MockJobSeekerLicenseRepository
}

// NewMockJobSeekerLicenseRepository creates a new mock instance.
func NewMockJobSeekerLicenseRepository(ctrl *gomock.Controller) *MockJobSeekerLicenseRepository {
	mock := &MockJobSeekerLicenseRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerLicenseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerLicenseRepository) EXPECT() *MockJobSeekerLicenseRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerLicenseRepository) All() ([]*entity.JobSeekerLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerLicenseRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerLicenseRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerLicenseRepository) Create(license *entity.JobSeekerLicense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", license)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerLicenseRepositoryMockRecorder) Create(license any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerLicenseRepository)(nil).Create), license)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerLicenseRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerLicenseRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerLicenseRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerLicenseRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerLicenseRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerLicenseRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerLicenseRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerLicenseRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerLicenseRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerLicenseRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerLicenseRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerLicenseRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerLicenseRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerLicenseRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerLicenseRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerSelfPromotionRepository is a mock of JobSeekerSelfPromotionRepository interface.
type MockJobSeekerSelfPromotionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerSelfPromotionRepositoryMockRecorder
}

// MockJobSeekerSelfPromotionRepositoryMockRecorder is the mock recorder for MockJobSeekerSelfPromotionRepository.
type MockJobSeekerSelfPromotionRepositoryMockRecorder struct {
	mock *MockJobSeekerSelfPromotionRepository
}

// NewMockJobSeekerSelfPromotionRepository creates a new mock instance.
func NewMockJobSeekerSelfPromotionRepository(ctrl *gomock.Controller) *MockJobSeekerSelfPromotionRepository {
	mock := &MockJobSeekerSelfPromotionRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerSelfPromotionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerSelfPromotionRepository) EXPECT() *MockJobSeekerSelfPromotionRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerSelfPromotionRepository) All() ([]*entity.JobSeekerSelfPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerSelfPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerSelfPromotionRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerSelfPromotionRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerSelfPromotionRepository) Create(industry *entity.JobSeekerSelfPromotion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", industry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerSelfPromotionRepositoryMockRecorder) Create(industry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerSelfPromotionRepository)(nil).Create), industry)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerSelfPromotionRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerSelfPromotionRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerSelfPromotionRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerSelfPromotionRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerSelfPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerSelfPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerSelfPromotionRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerSelfPromotionRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerSelfPromotionRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerSelfPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerSelfPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerSelfPromotionRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerSelfPromotionRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerSelfPromotionRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerSelfPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerSelfPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerSelfPromotionRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerSelfPromotionRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerSelfPromotionRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerSelfPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerSelfPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerSelfPromotionRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerSelfPromotionRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerDesiredIndustryRepository is a mock of JobSeekerDesiredIndustryRepository interface.
type MockJobSeekerDesiredIndustryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerDesiredIndustryRepositoryMockRecorder
}

// MockJobSeekerDesiredIndustryRepositoryMockRecorder is the mock recorder for MockJobSeekerDesiredIndustryRepository.
type MockJobSeekerDesiredIndustryRepositoryMockRecorder struct {
	mock *MockJobSeekerDesiredIndustryRepository
}

// NewMockJobSeekerDesiredIndustryRepository creates a new mock instance.
func NewMockJobSeekerDesiredIndustryRepository(ctrl *gomock.Controller) *MockJobSeekerDesiredIndustryRepository {
	mock := &MockJobSeekerDesiredIndustryRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerDesiredIndustryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerDesiredIndustryRepository) EXPECT() *MockJobSeekerDesiredIndustryRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerDesiredIndustryRepository) All() ([]*entity.JobSeekerDesiredIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerDesiredIndustryRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerDesiredIndustryRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerDesiredIndustryRepository) Create(desiredIndustry *entity.JobSeekerDesiredIndustry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredIndustry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerDesiredIndustryRepositoryMockRecorder) Create(desiredIndustry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerDesiredIndustryRepository)(nil).Create), desiredIndustry)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerDesiredIndustryRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerDesiredIndustryRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerDesiredIndustryRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerDesiredIndustryRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerDesiredIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerDesiredIndustryRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerDesiredIndustryRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerDesiredIndustryRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerDesiredIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerDesiredIndustryRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerDesiredIndustryRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerDesiredIndustryRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerDesiredIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerDesiredIndustryRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerDesiredIndustryRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerDesiredIndustryRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerDesiredIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerDesiredIndustryRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerDesiredIndustryRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerDesiredOccupationRepository is a mock of JobSeekerDesiredOccupationRepository interface.
type MockJobSeekerDesiredOccupationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerDesiredOccupationRepositoryMockRecorder
}

// MockJobSeekerDesiredOccupationRepositoryMockRecorder is the mock recorder for MockJobSeekerDesiredOccupationRepository.
type MockJobSeekerDesiredOccupationRepositoryMockRecorder struct {
	mock *MockJobSeekerDesiredOccupationRepository
}

// NewMockJobSeekerDesiredOccupationRepository creates a new mock instance.
func NewMockJobSeekerDesiredOccupationRepository(ctrl *gomock.Controller) *MockJobSeekerDesiredOccupationRepository {
	mock := &MockJobSeekerDesiredOccupationRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerDesiredOccupationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerDesiredOccupationRepository) EXPECT() *MockJobSeekerDesiredOccupationRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerDesiredOccupationRepository) All() ([]*entity.JobSeekerDesiredOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerDesiredOccupationRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerDesiredOccupationRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerDesiredOccupationRepository) Create(desiredOccupation *entity.JobSeekerDesiredOccupation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredOccupation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerDesiredOccupationRepositoryMockRecorder) Create(desiredOccupation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerDesiredOccupationRepository)(nil).Create), desiredOccupation)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerDesiredOccupationRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerDesiredOccupationRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerDesiredOccupationRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerDesiredOccupationRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerDesiredOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerDesiredOccupationRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerDesiredOccupationRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerDesiredOccupationRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerDesiredOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerDesiredOccupationRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerDesiredOccupationRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerDesiredOccupationRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerDesiredOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerDesiredOccupationRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerDesiredOccupationRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerDesiredOccupationRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerDesiredOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerDesiredOccupationRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerDesiredOccupationRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerDesiredWorkLocationRepository is a mock of JobSeekerDesiredWorkLocationRepository interface.
type MockJobSeekerDesiredWorkLocationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerDesiredWorkLocationRepositoryMockRecorder
}

// MockJobSeekerDesiredWorkLocationRepositoryMockRecorder is the mock recorder for MockJobSeekerDesiredWorkLocationRepository.
type MockJobSeekerDesiredWorkLocationRepositoryMockRecorder struct {
	mock *MockJobSeekerDesiredWorkLocationRepository
}

// NewMockJobSeekerDesiredWorkLocationRepository creates a new mock instance.
func NewMockJobSeekerDesiredWorkLocationRepository(ctrl *gomock.Controller) *MockJobSeekerDesiredWorkLocationRepository {
	mock := &MockJobSeekerDesiredWorkLocationRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerDesiredWorkLocationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerDesiredWorkLocationRepository) EXPECT() *MockJobSeekerDesiredWorkLocationRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerDesiredWorkLocationRepository) All() ([]*entity.JobSeekerDesiredWorkLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredWorkLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerDesiredWorkLocationRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerDesiredWorkLocationRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerDesiredWorkLocationRepository) Create(desiredWorkLocation *entity.JobSeekerDesiredWorkLocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredWorkLocation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerDesiredWorkLocationRepositoryMockRecorder) Create(desiredWorkLocation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerDesiredWorkLocationRepository)(nil).Create), desiredWorkLocation)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerDesiredWorkLocationRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerDesiredWorkLocationRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerDesiredWorkLocationRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerDesiredWorkLocationRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerDesiredWorkLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredWorkLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerDesiredWorkLocationRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerDesiredWorkLocationRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerDesiredWorkLocationRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerDesiredWorkLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredWorkLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerDesiredWorkLocationRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerDesiredWorkLocationRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerDesiredWorkLocationRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerDesiredWorkLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredWorkLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerDesiredWorkLocationRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerDesiredWorkLocationRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerDesiredWorkLocationRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerDesiredWorkLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredWorkLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerDesiredWorkLocationRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerDesiredWorkLocationRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerDesiredHolidayTypeRepository is a mock of JobSeekerDesiredHolidayTypeRepository interface.
type MockJobSeekerDesiredHolidayTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerDesiredHolidayTypeRepositoryMockRecorder
}

// MockJobSeekerDesiredHolidayTypeRepositoryMockRecorder is the mock recorder for MockJobSeekerDesiredHolidayTypeRepository.
type MockJobSeekerDesiredHolidayTypeRepositoryMockRecorder struct {
	mock *MockJobSeekerDesiredHolidayTypeRepository
}

// NewMockJobSeekerDesiredHolidayTypeRepository creates a new mock instance.
func NewMockJobSeekerDesiredHolidayTypeRepository(ctrl *gomock.Controller) *MockJobSeekerDesiredHolidayTypeRepository {
	mock := &MockJobSeekerDesiredHolidayTypeRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerDesiredHolidayTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerDesiredHolidayTypeRepository) EXPECT() *MockJobSeekerDesiredHolidayTypeRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerDesiredHolidayTypeRepository) All() ([]*entity.JobSeekerDesiredHolidayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredHolidayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerDesiredHolidayTypeRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerDesiredHolidayTypeRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerDesiredHolidayTypeRepository) Create(desiredHolidayType *entity.JobSeekerDesiredHolidayType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredHolidayType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerDesiredHolidayTypeRepositoryMockRecorder) Create(desiredHolidayType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerDesiredHolidayTypeRepository)(nil).Create), desiredHolidayType)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerDesiredHolidayTypeRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerDesiredHolidayTypeRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerDesiredHolidayTypeRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerDesiredHolidayTypeRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerDesiredHolidayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredHolidayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerDesiredHolidayTypeRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerDesiredHolidayTypeRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerDesiredHolidayTypeRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerDesiredHolidayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredHolidayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerDesiredHolidayTypeRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerDesiredHolidayTypeRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerDesiredHolidayTypeRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerDesiredHolidayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredHolidayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerDesiredHolidayTypeRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerDesiredHolidayTypeRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerDesiredHolidayTypeRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerDesiredHolidayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredHolidayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerDesiredHolidayTypeRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerDesiredHolidayTypeRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerDevelopmentSkillRepository is a mock of JobSeekerDevelopmentSkillRepository interface.
type MockJobSeekerDevelopmentSkillRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerDevelopmentSkillRepositoryMockRecorder
}

// MockJobSeekerDevelopmentSkillRepositoryMockRecorder is the mock recorder for MockJobSeekerDevelopmentSkillRepository.
type MockJobSeekerDevelopmentSkillRepositoryMockRecorder struct {
	mock *MockJobSeekerDevelopmentSkillRepository
}

// NewMockJobSeekerDevelopmentSkillRepository creates a new mock instance.
func NewMockJobSeekerDevelopmentSkillRepository(ctrl *gomock.Controller) *MockJobSeekerDevelopmentSkillRepository {
	mock := &MockJobSeekerDevelopmentSkillRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerDevelopmentSkillRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerDevelopmentSkillRepository) EXPECT() *MockJobSeekerDevelopmentSkillRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerDevelopmentSkillRepository) All() ([]*entity.JobSeekerDevelopmentSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerDevelopmentSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerDevelopmentSkillRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerDevelopmentSkillRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerDevelopmentSkillRepository) Create(desiredWorkLocation *entity.JobSeekerDevelopmentSkill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredWorkLocation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerDevelopmentSkillRepositoryMockRecorder) Create(desiredWorkLocation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerDevelopmentSkillRepository)(nil).Create), desiredWorkLocation)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerDevelopmentSkillRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerDevelopmentSkillRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerDevelopmentSkillRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerDevelopmentSkillRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerDevelopmentSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerDevelopmentSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerDevelopmentSkillRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerDevelopmentSkillRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerDevelopmentSkillRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerDevelopmentSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerDevelopmentSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerDevelopmentSkillRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerDevelopmentSkillRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerDevelopmentSkillRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerDevelopmentSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerDevelopmentSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerDevelopmentSkillRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerDevelopmentSkillRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerDevelopmentSkillRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerDevelopmentSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerDevelopmentSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerDevelopmentSkillRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerDevelopmentSkillRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerLanguageSkillRepository is a mock of JobSeekerLanguageSkillRepository interface.
type MockJobSeekerLanguageSkillRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerLanguageSkillRepositoryMockRecorder
}

// MockJobSeekerLanguageSkillRepositoryMockRecorder is the mock recorder for MockJobSeekerLanguageSkillRepository.
type MockJobSeekerLanguageSkillRepositoryMockRecorder struct {
	mock *MockJobSeekerLanguageSkillRepository
}

// NewMockJobSeekerLanguageSkillRepository creates a new mock instance.
func NewMockJobSeekerLanguageSkillRepository(ctrl *gomock.Controller) *MockJobSeekerLanguageSkillRepository {
	mock := &MockJobSeekerLanguageSkillRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerLanguageSkillRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerLanguageSkillRepository) EXPECT() *MockJobSeekerLanguageSkillRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerLanguageSkillRepository) All() ([]*entity.JobSeekerLanguageSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerLanguageSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerLanguageSkillRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerLanguageSkillRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerLanguageSkillRepository) Create(desiredWorkLocation *entity.JobSeekerLanguageSkill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredWorkLocation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerLanguageSkillRepositoryMockRecorder) Create(desiredWorkLocation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerLanguageSkillRepository)(nil).Create), desiredWorkLocation)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerLanguageSkillRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerLanguageSkillRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerLanguageSkillRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerLanguageSkillRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerLanguageSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerLanguageSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerLanguageSkillRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerLanguageSkillRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerLanguageSkillRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerLanguageSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerLanguageSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerLanguageSkillRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerLanguageSkillRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerLanguageSkillRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerLanguageSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerLanguageSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerLanguageSkillRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerLanguageSkillRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerLanguageSkillRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerLanguageSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerLanguageSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerLanguageSkillRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerLanguageSkillRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerPCToolRepository is a mock of JobSeekerPCToolRepository interface.
type MockJobSeekerPCToolRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerPCToolRepositoryMockRecorder
}

// MockJobSeekerPCToolRepositoryMockRecorder is the mock recorder for MockJobSeekerPCToolRepository.
type MockJobSeekerPCToolRepositoryMockRecorder struct {
	mock *MockJobSeekerPCToolRepository
}

// NewMockJobSeekerPCToolRepository creates a new mock instance.
func NewMockJobSeekerPCToolRepository(ctrl *gomock.Controller) *MockJobSeekerPCToolRepository {
	mock := &MockJobSeekerPCToolRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerPCToolRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerPCToolRepository) EXPECT() *MockJobSeekerPCToolRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerPCToolRepository) All() ([]*entity.JobSeekerPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerPCToolRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerPCToolRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerPCToolRepository) Create(desiredWorkLocation *entity.JobSeekerPCTool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredWorkLocation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerPCToolRepositoryMockRecorder) Create(desiredWorkLocation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerPCToolRepository)(nil).Create), desiredWorkLocation)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerPCToolRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerPCToolRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerPCToolRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerPCToolRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerPCToolRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerPCToolRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerPCToolRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerPCToolRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerPCToolRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerPCToolRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerPCToolRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerPCToolRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerPCToolRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerPCToolRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerPCToolRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerHideToAgentRepository is a mock of JobSeekerHideToAgentRepository interface.
type MockJobSeekerHideToAgentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerHideToAgentRepositoryMockRecorder
}

// MockJobSeekerHideToAgentRepositoryMockRecorder is the mock recorder for MockJobSeekerHideToAgentRepository.
type MockJobSeekerHideToAgentRepositoryMockRecorder struct {
	mock *MockJobSeekerHideToAgentRepository
}

// NewMockJobSeekerHideToAgentRepository creates a new mock instance.
func NewMockJobSeekerHideToAgentRepository(ctrl *gomock.Controller) *MockJobSeekerHideToAgentRepository {
	mock := &MockJobSeekerHideToAgentRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerHideToAgentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerHideToAgentRepository) EXPECT() *MockJobSeekerHideToAgentRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerHideToAgentRepository) All() ([]*entity.JobSeekerHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerHideToAgentRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerHideToAgentRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerHideToAgentRepository) Create(hideToAgent *entity.JobSeekerHideToAgent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", hideToAgent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerHideToAgentRepositoryMockRecorder) Create(hideToAgent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerHideToAgentRepository)(nil).Create), hideToAgent)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerHideToAgentRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerHideToAgentRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerHideToAgentRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerHideToAgentRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerHideToAgentRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerHideToAgentRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentIDList mocks base method.
func (m *MockJobSeekerHideToAgentRepository) GetByAgentIDList(agentIDList []uint) ([]*entity.JobSeekerHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDList", agentIDList)
	ret0, _ := ret[0].([]*entity.JobSeekerHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDList indicates an expected call of GetByAgentIDList.
func (mr *MockJobSeekerHideToAgentRepositoryMockRecorder) GetByAgentIDList(agentIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDList", reflect.TypeOf((*MockJobSeekerHideToAgentRepository)(nil).GetByAgentIDList), agentIDList)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerHideToAgentRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerHideToAgentRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerHideToAgentRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerHideToAgentRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerHideToAgentRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerHideToAgentRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerHideToAgentRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerHideToAgentRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerHideToAgentRepository)(nil).GetByStaffID), staffID)
}

// GetHideByAgentID mocks base method.
func (m *MockJobSeekerHideToAgentRepository) GetHideByAgentID(agentID uint) ([]*entity.JobSeekerHideToAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHideByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerHideToAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHideByAgentID indicates an expected call of GetHideByAgentID.
func (mr *MockJobSeekerHideToAgentRepositoryMockRecorder) GetHideByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHideByAgentID", reflect.TypeOf((*MockJobSeekerHideToAgentRepository)(nil).GetHideByAgentID), agentID)
}

// MockJobSeekerDesiredCompanyScaleRepository is a mock of JobSeekerDesiredCompanyScaleRepository interface.
type MockJobSeekerDesiredCompanyScaleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerDesiredCompanyScaleRepositoryMockRecorder
}

// MockJobSeekerDesiredCompanyScaleRepositoryMockRecorder is the mock recorder for MockJobSeekerDesiredCompanyScaleRepository.
type MockJobSeekerDesiredCompanyScaleRepositoryMockRecorder struct {
	mock *MockJobSeekerDesiredCompanyScaleRepository
}

// NewMockJobSeekerDesiredCompanyScaleRepository creates a new mock instance.
func NewMockJobSeekerDesiredCompanyScaleRepository(ctrl *gomock.Controller) *MockJobSeekerDesiredCompanyScaleRepository {
	mock := &MockJobSeekerDesiredCompanyScaleRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerDesiredCompanyScaleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerDesiredCompanyScaleRepository) EXPECT() *MockJobSeekerDesiredCompanyScaleRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerDesiredCompanyScaleRepository) All() ([]*entity.JobSeekerDesiredCompanyScale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredCompanyScale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerDesiredCompanyScaleRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerDesiredCompanyScaleRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerDesiredCompanyScaleRepository) Create(desiredCompanyScale *entity.JobSeekerDesiredCompanyScale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredCompanyScale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerDesiredCompanyScaleRepositoryMockRecorder) Create(desiredCompanyScale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerDesiredCompanyScaleRepository)(nil).Create), desiredCompanyScale)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerDesiredCompanyScaleRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerDesiredCompanyScaleRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerDesiredCompanyScaleRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerDesiredCompanyScaleRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerDesiredCompanyScale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredCompanyScale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerDesiredCompanyScaleRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerDesiredCompanyScaleRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerDesiredCompanyScaleRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerDesiredCompanyScale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredCompanyScale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerDesiredCompanyScaleRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerDesiredCompanyScaleRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerDesiredCompanyScaleRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerDesiredCompanyScale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredCompanyScale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerDesiredCompanyScaleRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerDesiredCompanyScaleRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerDesiredCompanyScaleRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerDesiredCompanyScale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerDesiredCompanyScale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerDesiredCompanyScaleRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerDesiredCompanyScaleRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerExperienceJobRepository is a mock of JobSeekerExperienceJobRepository interface.
type MockJobSeekerExperienceJobRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerExperienceJobRepositoryMockRecorder
}

// MockJobSeekerExperienceJobRepositoryMockRecorder is the mock recorder for MockJobSeekerExperienceJobRepository.
type MockJobSeekerExperienceJobRepositoryMockRecorder struct {
	mock *MockJobSeekerExperienceJobRepository
}

// NewMockJobSeekerExperienceJobRepository creates a new mock instance.
func NewMockJobSeekerExperienceJobRepository(ctrl *gomock.Controller) *MockJobSeekerExperienceJobRepository {
	mock := &MockJobSeekerExperienceJobRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerExperienceJobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerExperienceJobRepository) EXPECT() *MockJobSeekerExperienceJobRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockJobSeekerExperienceJobRepository) All() ([]*entity.JobSeekerExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockJobSeekerExperienceJobRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockJobSeekerExperienceJobRepository)(nil).All))
}

// Create mocks base method.
func (m *MockJobSeekerExperienceJobRepository) Create(desiredCompanyScale *entity.JobSeekerExperienceJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredCompanyScale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerExperienceJobRepositoryMockRecorder) Create(desiredCompanyScale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerExperienceJobRepository)(nil).Create), desiredCompanyScale)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerExperienceJobRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerExperienceJobRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerExperienceJobRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// GetByAgentID mocks base method.
func (m *MockJobSeekerExperienceJobRepository) GetByAgentID(agentID uint) ([]*entity.JobSeekerExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockJobSeekerExperienceJobRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockJobSeekerExperienceJobRepository)(nil).GetByAgentID), agentID)
}

// GetByIDList mocks base method.
func (m *MockJobSeekerExperienceJobRepository) GetByIDList(idList []uint) ([]*entity.JobSeekerExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockJobSeekerExperienceJobRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockJobSeekerExperienceJobRepository)(nil).GetByIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerExperienceJobRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerExperienceJobRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerExperienceJobRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByStaffID mocks base method.
func (m *MockJobSeekerExperienceJobRepository) GetByStaffID(staffID uint) ([]*entity.JobSeekerExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.JobSeekerExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffID indicates an expected call of GetByStaffID.
func (mr *MockJobSeekerExperienceJobRepositoryMockRecorder) GetByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffID", reflect.TypeOf((*MockJobSeekerExperienceJobRepository)(nil).GetByStaffID), staffID)
}

// MockJobSeekerLPLoginTokenRepository is a mock of JobSeekerLPLoginTokenRepository interface.
type MockJobSeekerLPLoginTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerLPLoginTokenRepositoryMockRecorder
}

// MockJobSeekerLPLoginTokenRepositoryMockRecorder is the mock recorder for MockJobSeekerLPLoginTokenRepository.
type MockJobSeekerLPLoginTokenRepositoryMockRecorder struct {
	mock *MockJobSeekerLPLoginTokenRepository
}

// NewMockJobSeekerLPLoginTokenRepository creates a new mock instance.
func NewMockJobSeekerLPLoginTokenRepository(ctrl *gomock.Controller) *MockJobSeekerLPLoginTokenRepository {
	mock := &MockJobSeekerLPLoginTokenRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerLPLoginTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerLPLoginTokenRepository) EXPECT() *MockJobSeekerLPLoginTokenRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockJobSeekerLPLoginTokenRepository) Create(lpLoginToken *entity.JobSeekerLPLoginToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", lpLoginToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerLPLoginTokenRepositoryMockRecorder) Create(lpLoginToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerLPLoginTokenRepository)(nil).Create), lpLoginToken)
}

// DeleteByJobSeekerID mocks base method.
func (m *MockJobSeekerLPLoginTokenRepository) DeleteByJobSeekerID(jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByJobSeekerID indicates an expected call of DeleteByJobSeekerID.
func (mr *MockJobSeekerLPLoginTokenRepositoryMockRecorder) DeleteByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByJobSeekerID", reflect.TypeOf((*MockJobSeekerLPLoginTokenRepository)(nil).DeleteByJobSeekerID), jobSeekerID)
}

// FindByJobSeekerID mocks base method.
func (m *MockJobSeekerLPLoginTokenRepository) FindByJobSeekerID(jobSeekerID uint) (*entity.JobSeekerLPLoginToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(*entity.JobSeekerLPLoginToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByJobSeekerID indicates an expected call of FindByJobSeekerID.
func (mr *MockJobSeekerLPLoginTokenRepositoryMockRecorder) FindByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByJobSeekerID", reflect.TypeOf((*MockJobSeekerLPLoginTokenRepository)(nil).FindByJobSeekerID), jobSeekerID)
}

// UpdateByJobSeekerID mocks base method.
func (m *MockJobSeekerLPLoginTokenRepository) UpdateByJobSeekerID(jobSeekerID uint, lpLoginToken *entity.JobSeekerLPLoginToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByJobSeekerID", jobSeekerID, lpLoginToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByJobSeekerID indicates an expected call of UpdateByJobSeekerID.
func (mr *MockJobSeekerLPLoginTokenRepositoryMockRecorder) UpdateByJobSeekerID(jobSeekerID, lpLoginToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByJobSeekerID", reflect.TypeOf((*MockJobSeekerLPLoginTokenRepository)(nil).UpdateByJobSeekerID), jobSeekerID, lpLoginToken)
}

// MockJobSeekerInterestedJobListingRepository is a mock of JobSeekerInterestedJobListingRepository interface.
type MockJobSeekerInterestedJobListingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerInterestedJobListingRepositoryMockRecorder
}

// MockJobSeekerInterestedJobListingRepositoryMockRecorder is the mock recorder for MockJobSeekerInterestedJobListingRepository.
type MockJobSeekerInterestedJobListingRepositoryMockRecorder struct {
	mock *MockJobSeekerInterestedJobListingRepository
}

// NewMockJobSeekerInterestedJobListingRepository creates a new mock instance.
func NewMockJobSeekerInterestedJobListingRepository(ctrl *gomock.Controller) *MockJobSeekerInterestedJobListingRepository {
	mock := &MockJobSeekerInterestedJobListingRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerInterestedJobListingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerInterestedJobListingRepository) EXPECT() *MockJobSeekerInterestedJobListingRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockJobSeekerInterestedJobListingRepository) Create(interestedJobListing *entity.JobSeekerInterestedJobListing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", interestedJobListing)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerInterestedJobListingRepositoryMockRecorder) Create(interestedJobListing any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerInterestedJobListingRepository)(nil).Create), interestedJobListing)
}

// Delete mocks base method.
func (m *MockJobSeekerInterestedJobListingRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockJobSeekerInterestedJobListingRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockJobSeekerInterestedJobListingRepository)(nil).Delete), id)
}

// GetByJobSeekerUUIDAndInterestedType mocks base method.
func (m *MockJobSeekerInterestedJobListingRepository) GetByJobSeekerUUIDAndInterestedType(jobSeekerUUID uuid.UUID, interestedType entity.InterestedType) ([]*entity.JobSeekerInterestedJobListing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerUUIDAndInterestedType", jobSeekerUUID, interestedType)
	ret0, _ := ret[0].([]*entity.JobSeekerInterestedJobListing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerUUIDAndInterestedType indicates an expected call of GetByJobSeekerUUIDAndInterestedType.
func (mr *MockJobSeekerInterestedJobListingRepositoryMockRecorder) GetByJobSeekerUUIDAndInterestedType(jobSeekerUUID, interestedType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerUUIDAndInterestedType", reflect.TypeOf((*MockJobSeekerInterestedJobListingRepository)(nil).GetByJobSeekerUUIDAndInterestedType), jobSeekerUUID, interestedType)
}

// MockTaskGroupRepository is a mock of TaskGroupRepository interface.
type MockTaskGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskGroupRepositoryMockRecorder
}

// MockTaskGroupRepositoryMockRecorder is the mock recorder for MockTaskGroupRepository.
type MockTaskGroupRepositoryMockRecorder struct {
	mock *MockTaskGroupRepository
}

// NewMockTaskGroupRepository creates a new mock instance.
func NewMockTaskGroupRepository(ctrl *gomock.Controller) *MockTaskGroupRepository {
	mock := &MockTaskGroupRepository{ctrl: ctrl}
	mock.recorder = &MockTaskGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskGroupRepository) EXPECT() *MockTaskGroupRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskGroupRepository) Create(taskGroup *entity.TaskGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", taskGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskGroupRepositoryMockRecorder) Create(taskGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskGroupRepository)(nil).Create), taskGroup)
}

// Delete mocks base method.
func (m *MockTaskGroupRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskGroupRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskGroupRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockTaskGroupRepository) FindByID(id uint) (*entity.TaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.TaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTaskGroupRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTaskGroupRepository)(nil).FindByID), id)
}

// GetByJobInformationIDList mocks base method.
func (m *MockTaskGroupRepository) GetByJobInformationIDList(idList []uint) ([]*entity.TaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobInformationIDList", idList)
	ret0, _ := ret[0].([]*entity.TaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobInformationIDList indicates an expected call of GetByJobInformationIDList.
func (mr *MockTaskGroupRepositoryMockRecorder) GetByJobInformationIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobInformationIDList", reflect.TypeOf((*MockTaskGroupRepository)(nil).GetByJobInformationIDList), idList)
}

// GetByJobSeekerID mocks base method.
func (m *MockTaskGroupRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.TaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.TaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockTaskGroupRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockTaskGroupRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByJobSeekerIDList mocks base method.
func (m *MockTaskGroupRepository) GetByJobSeekerIDList(idList []uint) ([]*entity.TaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerIDList", idList)
	ret0, _ := ret[0].([]*entity.TaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerIDList indicates an expected call of GetByJobSeekerIDList.
func (mr *MockTaskGroupRepositoryMockRecorder) GetByJobSeekerIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerIDList", reflect.TypeOf((*MockTaskGroupRepository)(nil).GetByJobSeekerIDList), idList)
}

// GetNotDoubleSidedSameRAAndCAByStaffID mocks base method.
func (m *MockTaskGroupRepository) GetNotDoubleSidedSameRAAndCAByStaffID(agentStaffID uint) ([]*entity.TaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotDoubleSidedSameRAAndCAByStaffID", agentStaffID)
	ret0, _ := ret[0].([]*entity.TaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotDoubleSidedSameRAAndCAByStaffID indicates an expected call of GetNotDoubleSidedSameRAAndCAByStaffID.
func (mr *MockTaskGroupRepositoryMockRecorder) GetNotDoubleSidedSameRAAndCAByStaffID(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotDoubleSidedSameRAAndCAByStaffID", reflect.TypeOf((*MockTaskGroupRepository)(nil).GetNotDoubleSidedSameRAAndCAByStaffID), agentStaffID)
}

// UpdateCALastRequestAt mocks base method.
func (m *MockTaskGroupRepository) UpdateCALastRequestAt(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCALastRequestAt", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCALastRequestAt indicates an expected call of UpdateCALastRequestAt.
func (mr *MockTaskGroupRepositoryMockRecorder) UpdateCALastRequestAt(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCALastRequestAt", reflect.TypeOf((*MockTaskGroupRepository)(nil).UpdateCALastRequestAt), id)
}

// UpdateCALastWatchedAt mocks base method.
func (m *MockTaskGroupRepository) UpdateCALastWatchedAt(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCALastWatchedAt", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCALastWatchedAt indicates an expected call of UpdateCALastWatchedAt.
func (mr *MockTaskGroupRepositoryMockRecorder) UpdateCALastWatchedAt(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCALastWatchedAt", reflect.TypeOf((*MockTaskGroupRepository)(nil).UpdateCALastWatchedAt), id)
}

// UpdateExternalJob mocks base method.
func (m *MockTaskGroupRepository) UpdateExternalJob(id uint, externalJob entity.ExternalJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExternalJob", id, externalJob)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExternalJob indicates an expected call of UpdateExternalJob.
func (mr *MockTaskGroupRepositoryMockRecorder) UpdateExternalJob(id, externalJob any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalJob", reflect.TypeOf((*MockTaskGroupRepository)(nil).UpdateExternalJob), id, externalJob)
}

// UpdateIsDoubleSided mocks base method.
func (m *MockTaskGroupRepository) UpdateIsDoubleSided(id uint, isDoubleSided bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsDoubleSided", id, isDoubleSided)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsDoubleSided indicates an expected call of UpdateIsDoubleSided.
func (mr *MockTaskGroupRepositoryMockRecorder) UpdateIsDoubleSided(id, isDoubleSided any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsDoubleSided", reflect.TypeOf((*MockTaskGroupRepository)(nil).UpdateIsDoubleSided), id, isDoubleSided)
}

// UpdateJoiningDate mocks base method.
func (m *MockTaskGroupRepository) UpdateJoiningDate(id uint, joiningDate string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJoiningDate", id, joiningDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJoiningDate indicates an expected call of UpdateJoiningDate.
func (mr *MockTaskGroupRepositoryMockRecorder) UpdateJoiningDate(id, joiningDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJoiningDate", reflect.TypeOf((*MockTaskGroupRepository)(nil).UpdateJoiningDate), id, joiningDate)
}

// UpdateLastRequestAt mocks base method.
func (m *MockTaskGroupRepository) UpdateLastRequestAt(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastRequestAt", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastRequestAt indicates an expected call of UpdateLastRequestAt.
func (mr *MockTaskGroupRepositoryMockRecorder) UpdateLastRequestAt(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastRequestAt", reflect.TypeOf((*MockTaskGroupRepository)(nil).UpdateLastRequestAt), id)
}

// UpdateListIsDoubleSided mocks base method.
func (m *MockTaskGroupRepository) UpdateListIsDoubleSided(idList []uint, isDoubleSided bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListIsDoubleSided", idList, isDoubleSided)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateListIsDoubleSided indicates an expected call of UpdateListIsDoubleSided.
func (mr *MockTaskGroupRepositoryMockRecorder) UpdateListIsDoubleSided(idList, isDoubleSided any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListIsDoubleSided", reflect.TypeOf((*MockTaskGroupRepository)(nil).UpdateListIsDoubleSided), idList, isDoubleSided)
}

// UpdateRALastRequestAt mocks base method.
func (m *MockTaskGroupRepository) UpdateRALastRequestAt(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRALastRequestAt", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRALastRequestAt indicates an expected call of UpdateRALastRequestAt.
func (mr *MockTaskGroupRepositoryMockRecorder) UpdateRALastRequestAt(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRALastRequestAt", reflect.TypeOf((*MockTaskGroupRepository)(nil).UpdateRALastRequestAt), id)
}

// UpdateRALastWatchedAt mocks base method.
func (m *MockTaskGroupRepository) UpdateRALastWatchedAt(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRALastWatchedAt", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRALastWatchedAt indicates an expected call of UpdateRALastWatchedAt.
func (mr *MockTaskGroupRepositoryMockRecorder) UpdateRALastWatchedAt(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRALastWatchedAt", reflect.TypeOf((*MockTaskGroupRepository)(nil).UpdateRALastWatchedAt), id)
}

// UpdateSelectionFlowPatternID mocks base method.
func (m *MockTaskGroupRepository) UpdateSelectionFlowPatternID(id uint, selectionFlowID null.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSelectionFlowPatternID", id, selectionFlowID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSelectionFlowPatternID indicates an expected call of UpdateSelectionFlowPatternID.
func (mr *MockTaskGroupRepositoryMockRecorder) UpdateSelectionFlowPatternID(id, selectionFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSelectionFlowPatternID", reflect.TypeOf((*MockTaskGroupRepository)(nil).UpdateSelectionFlowPatternID), id, selectionFlowID)
}

// MockTaskGroupDocumentRepository is a mock of TaskGroupDocumentRepository interface.
type MockTaskGroupDocumentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskGroupDocumentRepositoryMockRecorder
}

// MockTaskGroupDocumentRepositoryMockRecorder is the mock recorder for MockTaskGroupDocumentRepository.
type MockTaskGroupDocumentRepositoryMockRecorder struct {
	mock *MockTaskGroupDocumentRepository
}

// NewMockTaskGroupDocumentRepository creates a new mock instance.
func NewMockTaskGroupDocumentRepository(ctrl *gomock.Controller) *MockTaskGroupDocumentRepository {
	mock := &MockTaskGroupDocumentRepository{ctrl: ctrl}
	mock.recorder = &MockTaskGroupDocumentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskGroupDocumentRepository) EXPECT() *MockTaskGroupDocumentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskGroupDocumentRepository) Create(document *entity.TaskGroupDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskGroupDocumentRepositoryMockRecorder) Create(document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskGroupDocumentRepository)(nil).Create), document)
}

// FindByGroupID mocks base method.
func (m *MockTaskGroupDocumentRepository) FindByGroupID(groupID uint) (*entity.TaskGroupDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGroupID", groupID)
	ret0, _ := ret[0].(*entity.TaskGroupDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGroupID indicates an expected call of FindByGroupID.
func (mr *MockTaskGroupDocumentRepositoryMockRecorder) FindByGroupID(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGroupID", reflect.TypeOf((*MockTaskGroupDocumentRepository)(nil).FindByGroupID), groupID)
}

// FindByID mocks base method.
func (m *MockTaskGroupDocumentRepository) FindByID(id uint) (*entity.TaskGroupDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.TaskGroupDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTaskGroupDocumentRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTaskGroupDocumentRepository)(nil).FindByID), id)
}

// Update mocks base method.
func (m *MockTaskGroupDocumentRepository) Update(id uint, document *entity.TaskGroupDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskGroupDocumentRepositoryMockRecorder) Update(id, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskGroupDocumentRepository)(nil).Update), id, document)
}

// UpdateDocument1URL mocks base method.
func (m *MockTaskGroupDocumentRepository) UpdateDocument1URL(id uint, document1URL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocument1URL", id, document1URL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDocument1URL indicates an expected call of UpdateDocument1URL.
func (mr *MockTaskGroupDocumentRepositoryMockRecorder) UpdateDocument1URL(id, document1URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocument1URL", reflect.TypeOf((*MockTaskGroupDocumentRepository)(nil).UpdateDocument1URL), id, document1URL)
}

// UpdateDocument2URL mocks base method.
func (m *MockTaskGroupDocumentRepository) UpdateDocument2URL(id uint, document2URL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocument2URL", id, document2URL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDocument2URL indicates an expected call of UpdateDocument2URL.
func (mr *MockTaskGroupDocumentRepositoryMockRecorder) UpdateDocument2URL(id, document2URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocument2URL", reflect.TypeOf((*MockTaskGroupDocumentRepository)(nil).UpdateDocument2URL), id, document2URL)
}

// UpdateDocument3URL mocks base method.
func (m *MockTaskGroupDocumentRepository) UpdateDocument3URL(id uint, document3URL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocument3URL", id, document3URL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDocument3URL indicates an expected call of UpdateDocument3URL.
func (mr *MockTaskGroupDocumentRepositoryMockRecorder) UpdateDocument3URL(id, document3URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocument3URL", reflect.TypeOf((*MockTaskGroupDocumentRepository)(nil).UpdateDocument3URL), id, document3URL)
}

// UpdateDocument4URL mocks base method.
func (m *MockTaskGroupDocumentRepository) UpdateDocument4URL(id uint, document4URL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocument4URL", id, document4URL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDocument4URL indicates an expected call of UpdateDocument4URL.
func (mr *MockTaskGroupDocumentRepositoryMockRecorder) UpdateDocument4URL(id, document4URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocument4URL", reflect.TypeOf((*MockTaskGroupDocumentRepository)(nil).UpdateDocument4URL), id, document4URL)
}

// UpdateDocument5URL mocks base method.
func (m *MockTaskGroupDocumentRepository) UpdateDocument5URL(id uint, document5URL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocument5URL", id, document5URL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDocument5URL indicates an expected call of UpdateDocument5URL.
func (mr *MockTaskGroupDocumentRepositoryMockRecorder) UpdateDocument5URL(id, document5URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocument5URL", reflect.TypeOf((*MockTaskGroupDocumentRepository)(nil).UpdateDocument5URL), id, document5URL)
}

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskRepository) Create(task *entity.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskRepositoryMockRecorder) Create(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskRepository)(nil).Create), task)
}

// Delete mocks base method.
func (m *MockTaskRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockTaskRepository) FindByID(id uint) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTaskRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTaskRepository)(nil).FindByID), id)
}

// FindByJobSeekerUUIDAndJobInformationUUID mocks base method.
func (m *MockTaskRepository) FindByJobSeekerUUIDAndJobInformationUUID(jobseekerUUID, jobInformationUUID uuid.UUID) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByJobSeekerUUIDAndJobInformationUUID", jobseekerUUID, jobInformationUUID)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByJobSeekerUUIDAndJobInformationUUID indicates an expected call of FindByJobSeekerUUIDAndJobInformationUUID.
func (mr *MockTaskRepositoryMockRecorder) FindByJobSeekerUUIDAndJobInformationUUID(jobseekerUUID, jobInformationUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByJobSeekerUUIDAndJobInformationUUID", reflect.TypeOf((*MockTaskRepository)(nil).FindByJobSeekerUUIDAndJobInformationUUID), jobseekerUUID, jobInformationUUID)
}

// FindLatestByGroupID mocks base method.
func (m *MockTaskRepository) FindLatestByGroupID(taskGroupID uint) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestByGroupID", taskGroupID)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestByGroupID indicates an expected call of FindLatestByGroupID.
func (mr *MockTaskRepositoryMockRecorder) FindLatestByGroupID(taskGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestByGroupID", reflect.TypeOf((*MockTaskRepository)(nil).FindLatestByGroupID), taskGroupID)
}

// FindLatestByGroupIDAndCollectResultPhase mocks base method.
func (m *MockTaskRepository) FindLatestByGroupIDAndCollectResultPhase(taskGroupID uint) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestByGroupIDAndCollectResultPhase", taskGroupID)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestByGroupIDAndCollectResultPhase indicates an expected call of FindLatestByGroupIDAndCollectResultPhase.
func (mr *MockTaskRepositoryMockRecorder) FindLatestByGroupIDAndCollectResultPhase(taskGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestByGroupIDAndCollectResultPhase", reflect.TypeOf((*MockTaskRepository)(nil).FindLatestByGroupIDAndCollectResultPhase), taskGroupID)
}

// FindLatestByJobSeekerIDAndJobInformationID mocks base method.
func (m *MockTaskRepository) FindLatestByJobSeekerIDAndJobInformationID(jobSeekerID, jobInformationID uint) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestByJobSeekerIDAndJobInformationID", jobSeekerID, jobInformationID)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestByJobSeekerIDAndJobInformationID indicates an expected call of FindLatestByJobSeekerIDAndJobInformationID.
func (mr *MockTaskRepositoryMockRecorder) FindLatestByJobSeekerIDAndJobInformationID(jobSeekerID, jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestByJobSeekerIDAndJobInformationID", reflect.TypeOf((*MockTaskRepository)(nil).FindLatestByJobSeekerIDAndJobInformationID), jobSeekerID, jobInformationID)
}

// FindLatestForContinue mocks base method.
func (m *MockTaskRepository) FindLatestForContinue(taskGroupID uint, phase null.Int) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestForContinue", taskGroupID, phase)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestForContinue indicates an expected call of FindLatestForContinue.
func (mr *MockTaskRepositoryMockRecorder) FindLatestForContinue(taskGroupID, phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestForContinue", reflect.TypeOf((*MockTaskRepository)(nil).FindLatestForContinue), taskGroupID, phase)
}

// FindLatestWithRelatedByJobSeekerUUIDAndJobInformationUUID mocks base method.
func (m *MockTaskRepository) FindLatestWithRelatedByJobSeekerUUIDAndJobInformationUUID(jobInformationUUID, jobseekerUUID uuid.UUID) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestWithRelatedByJobSeekerUUIDAndJobInformationUUID", jobInformationUUID, jobseekerUUID)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestWithRelatedByJobSeekerUUIDAndJobInformationUUID indicates an expected call of FindLatestWithRelatedByJobSeekerUUIDAndJobInformationUUID.
func (mr *MockTaskRepositoryMockRecorder) FindLatestWithRelatedByJobSeekerUUIDAndJobInformationUUID(jobInformationUUID, jobseekerUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestWithRelatedByJobSeekerUUIDAndJobInformationUUID", reflect.TypeOf((*MockTaskRepository)(nil).FindLatestWithRelatedByJobSeekerUUIDAndJobInformationUUID), jobInformationUUID, jobseekerUUID)
}

// GetActiveByBillingAddressID mocks base method.
func (m *MockTaskRepository) GetActiveByBillingAddressID(billingAddressID uint) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveByBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveByBillingAddressID indicates an expected call of GetActiveByBillingAddressID.
func (mr *MockTaskRepositoryMockRecorder) GetActiveByBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveByBillingAddressID", reflect.TypeOf((*MockTaskRepository)(nil).GetActiveByBillingAddressID), billingAddressID)
}

// GetActiveByJobInformationID mocks base method.
func (m *MockTaskRepository) GetActiveByJobInformationID(jobInformationID uint) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveByJobInformationID", jobInformationID)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveByJobInformationID indicates an expected call of GetActiveByJobInformationID.
func (mr *MockTaskRepositoryMockRecorder) GetActiveByJobInformationID(jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveByJobInformationID", reflect.TypeOf((*MockTaskRepository)(nil).GetActiveByJobInformationID), jobInformationID)
}

// GetActiveBySelectionFlowPatternID mocks base method.
func (m *MockTaskRepository) GetActiveBySelectionFlowPatternID(selectionID uint) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveBySelectionFlowPatternID", selectionID)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveBySelectionFlowPatternID indicates an expected call of GetActiveBySelectionFlowPatternID.
func (mr *MockTaskRepositoryMockRecorder) GetActiveBySelectionFlowPatternID(selectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveBySelectionFlowPatternID", reflect.TypeOf((*MockTaskRepository)(nil).GetActiveBySelectionFlowPatternID), selectionID)
}

// GetByAgentID mocks base method.
func (m *MockTaskRepository) GetByAgentID(agentID uint) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockTaskRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockTaskRepository)(nil).GetByAgentID), agentID)
}

// GetByEachAgentID mocks base method.
func (m *MockTaskRepository) GetByEachAgentID(agent1ID, agent2ID uint) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEachAgentID", agent1ID, agent2ID)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEachAgentID indicates an expected call of GetByEachAgentID.
func (mr *MockTaskRepositoryMockRecorder) GetByEachAgentID(agent1ID, agent2ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEachAgentID", reflect.TypeOf((*MockTaskRepository)(nil).GetByEachAgentID), agent1ID, agent2ID)
}

// GetByTaskGroupID mocks base method.
func (m *MockTaskRepository) GetByTaskGroupID(taskGroupID uint) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTaskGroupID", taskGroupID)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTaskGroupID indicates an expected call of GetByTaskGroupID.
func (mr *MockTaskRepositoryMockRecorder) GetByTaskGroupID(taskGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTaskGroupID", reflect.TypeOf((*MockTaskRepository)(nil).GetByTaskGroupID), taskGroupID)
}

// GetInterviewFinalSelectionPerformanceCountByAgentIDAndPeriod mocks base method.
func (m *MockTaskRepository) GetInterviewFinalSelectionPerformanceCountByAgentIDAndPeriod(agentID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewFinalSelectionPerformanceCountByAgentIDAndPeriod", agentID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewFinalSelectionPerformanceCountByAgentIDAndPeriod indicates an expected call of GetInterviewFinalSelectionPerformanceCountByAgentIDAndPeriod.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewFinalSelectionPerformanceCountByAgentIDAndPeriod(agentID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewFinalSelectionPerformanceCountByAgentIDAndPeriod", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewFinalSelectionPerformanceCountByAgentIDAndPeriod), agentID, startMonth, endMonth)
}

// GetInterviewFinalSelectionPerformanceCountByAgentIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetInterviewFinalSelectionPerformanceCountByAgentIDAndSalesMonth(agentID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewFinalSelectionPerformanceCountByAgentIDAndSalesMonth", agentID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewFinalSelectionPerformanceCountByAgentIDAndSalesMonth indicates an expected call of GetInterviewFinalSelectionPerformanceCountByAgentIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewFinalSelectionPerformanceCountByAgentIDAndSalesMonth(agentID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewFinalSelectionPerformanceCountByAgentIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewFinalSelectionPerformanceCountByAgentIDAndSalesMonth), agentID, saleMonth)
}

// GetInterviewFinalSelectionPerformanceCountByStaffIDAndPeriod mocks base method.
func (m *MockTaskRepository) GetInterviewFinalSelectionPerformanceCountByStaffIDAndPeriod(staffID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewFinalSelectionPerformanceCountByStaffIDAndPeriod", staffID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewFinalSelectionPerformanceCountByStaffIDAndPeriod indicates an expected call of GetInterviewFinalSelectionPerformanceCountByStaffIDAndPeriod.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewFinalSelectionPerformanceCountByStaffIDAndPeriod(staffID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewFinalSelectionPerformanceCountByStaffIDAndPeriod", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewFinalSelectionPerformanceCountByStaffIDAndPeriod), staffID, startMonth, endMonth)
}

// GetInterviewFinalSelectionPerformanceCountByStaffIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetInterviewFinalSelectionPerformanceCountByStaffIDAndSalesMonth(staffID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewFinalSelectionPerformanceCountByStaffIDAndSalesMonth", staffID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewFinalSelectionPerformanceCountByStaffIDAndSalesMonth indicates an expected call of GetInterviewFinalSelectionPerformanceCountByStaffIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewFinalSelectionPerformanceCountByStaffIDAndSalesMonth(staffID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewFinalSelectionPerformanceCountByStaffIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewFinalSelectionPerformanceCountByStaffIDAndSalesMonth), staffID, saleMonth)
}

// GetInterviewJobIntroductionPerformanceCountByAgentIDAndPeriod mocks base method.
func (m *MockTaskRepository) GetInterviewJobIntroductionPerformanceCountByAgentIDAndPeriod(agentID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewJobIntroductionPerformanceCountByAgentIDAndPeriod", agentID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewJobIntroductionPerformanceCountByAgentIDAndPeriod indicates an expected call of GetInterviewJobIntroductionPerformanceCountByAgentIDAndPeriod.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewJobIntroductionPerformanceCountByAgentIDAndPeriod(agentID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewJobIntroductionPerformanceCountByAgentIDAndPeriod", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewJobIntroductionPerformanceCountByAgentIDAndPeriod), agentID, startMonth, endMonth)
}

// GetInterviewJobIntroductionPerformanceCountByAgentIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetInterviewJobIntroductionPerformanceCountByAgentIDAndSalesMonth(agentID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewJobIntroductionPerformanceCountByAgentIDAndSalesMonth", agentID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewJobIntroductionPerformanceCountByAgentIDAndSalesMonth indicates an expected call of GetInterviewJobIntroductionPerformanceCountByAgentIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewJobIntroductionPerformanceCountByAgentIDAndSalesMonth(agentID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewJobIntroductionPerformanceCountByAgentIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewJobIntroductionPerformanceCountByAgentIDAndSalesMonth), agentID, saleMonth)
}

// GetInterviewJobIntroductionPerformanceCountByStaffIDAndPeriod mocks base method.
func (m *MockTaskRepository) GetInterviewJobIntroductionPerformanceCountByStaffIDAndPeriod(staffID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewJobIntroductionPerformanceCountByStaffIDAndPeriod", staffID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewJobIntroductionPerformanceCountByStaffIDAndPeriod indicates an expected call of GetInterviewJobIntroductionPerformanceCountByStaffIDAndPeriod.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewJobIntroductionPerformanceCountByStaffIDAndPeriod(staffID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewJobIntroductionPerformanceCountByStaffIDAndPeriod", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewJobIntroductionPerformanceCountByStaffIDAndPeriod), staffID, startMonth, endMonth)
}

// GetInterviewJobIntroductionPerformanceCountByStaffIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetInterviewJobIntroductionPerformanceCountByStaffIDAndSalesMonth(staffID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewJobIntroductionPerformanceCountByStaffIDAndSalesMonth", staffID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewJobIntroductionPerformanceCountByStaffIDAndSalesMonth indicates an expected call of GetInterviewJobIntroductionPerformanceCountByStaffIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewJobIntroductionPerformanceCountByStaffIDAndSalesMonth(staffID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewJobIntroductionPerformanceCountByStaffIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewJobIntroductionPerformanceCountByStaffIDAndSalesMonth), staffID, saleMonth)
}

// GetInterviewOfferPerformanceCountByAgentIDAndPeriod mocks base method.
func (m *MockTaskRepository) GetInterviewOfferPerformanceCountByAgentIDAndPeriod(agentID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewOfferPerformanceCountByAgentIDAndPeriod", agentID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewOfferPerformanceCountByAgentIDAndPeriod indicates an expected call of GetInterviewOfferPerformanceCountByAgentIDAndPeriod.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewOfferPerformanceCountByAgentIDAndPeriod(agentID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewOfferPerformanceCountByAgentIDAndPeriod", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewOfferPerformanceCountByAgentIDAndPeriod), agentID, startMonth, endMonth)
}

// GetInterviewOfferPerformanceCountByAgentIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetInterviewOfferPerformanceCountByAgentIDAndSalesMonth(agentID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewOfferPerformanceCountByAgentIDAndSalesMonth", agentID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewOfferPerformanceCountByAgentIDAndSalesMonth indicates an expected call of GetInterviewOfferPerformanceCountByAgentIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewOfferPerformanceCountByAgentIDAndSalesMonth(agentID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewOfferPerformanceCountByAgentIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewOfferPerformanceCountByAgentIDAndSalesMonth), agentID, saleMonth)
}

// GetInterviewOfferPerformanceCountByStaffIDAndPeriod mocks base method.
func (m *MockTaskRepository) GetInterviewOfferPerformanceCountByStaffIDAndPeriod(staffID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewOfferPerformanceCountByStaffIDAndPeriod", staffID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewOfferPerformanceCountByStaffIDAndPeriod indicates an expected call of GetInterviewOfferPerformanceCountByStaffIDAndPeriod.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewOfferPerformanceCountByStaffIDAndPeriod(staffID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewOfferPerformanceCountByStaffIDAndPeriod", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewOfferPerformanceCountByStaffIDAndPeriod), staffID, startMonth, endMonth)
}

// GetInterviewOfferPerformanceCountByStaffIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetInterviewOfferPerformanceCountByStaffIDAndSalesMonth(staffID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewOfferPerformanceCountByStaffIDAndSalesMonth", staffID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewOfferPerformanceCountByStaffIDAndSalesMonth indicates an expected call of GetInterviewOfferPerformanceCountByStaffIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewOfferPerformanceCountByStaffIDAndSalesMonth(staffID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewOfferPerformanceCountByStaffIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewOfferPerformanceCountByStaffIDAndSalesMonth), staffID, saleMonth)
}

// GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndPeriod mocks base method.
func (m *MockTaskRepository) GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndPeriod(agentID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndPeriod", agentID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndPeriod indicates an expected call of GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndPeriod.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndPeriod(agentID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndPeriod", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndPeriod), agentID, startMonth, endMonth)
}

// GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth(agentID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth", agentID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth indicates an expected call of GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth(agentID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth), agentID, saleMonth)
}

// GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndPeriod mocks base method.
func (m *MockTaskRepository) GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndPeriod(staffID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndPeriod", staffID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndPeriod indicates an expected call of GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndPeriod.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndPeriod(staffID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndPeriod", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndPeriod), staffID, startMonth, endMonth)
}

// GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth(staffID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth", staffID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth indicates an expected call of GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth(staffID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth), staffID, saleMonth)
}

// GetInterviewSelectionPerformanceCountByAgentIDAndPeriod mocks base method.
func (m *MockTaskRepository) GetInterviewSelectionPerformanceCountByAgentIDAndPeriod(agentID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewSelectionPerformanceCountByAgentIDAndPeriod", agentID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewSelectionPerformanceCountByAgentIDAndPeriod indicates an expected call of GetInterviewSelectionPerformanceCountByAgentIDAndPeriod.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewSelectionPerformanceCountByAgentIDAndPeriod(agentID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewSelectionPerformanceCountByAgentIDAndPeriod", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewSelectionPerformanceCountByAgentIDAndPeriod), agentID, startMonth, endMonth)
}

// GetInterviewSelectionPerformanceCountByAgentIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetInterviewSelectionPerformanceCountByAgentIDAndSalesMonth(agentID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewSelectionPerformanceCountByAgentIDAndSalesMonth", agentID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewSelectionPerformanceCountByAgentIDAndSalesMonth indicates an expected call of GetInterviewSelectionPerformanceCountByAgentIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewSelectionPerformanceCountByAgentIDAndSalesMonth(agentID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewSelectionPerformanceCountByAgentIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewSelectionPerformanceCountByAgentIDAndSalesMonth), agentID, saleMonth)
}

// GetInterviewSelectionPerformanceCountByStaffIDAndPeriod mocks base method.
func (m *MockTaskRepository) GetInterviewSelectionPerformanceCountByStaffIDAndPeriod(staffID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewSelectionPerformanceCountByStaffIDAndPeriod", staffID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewSelectionPerformanceCountByStaffIDAndPeriod indicates an expected call of GetInterviewSelectionPerformanceCountByStaffIDAndPeriod.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewSelectionPerformanceCountByStaffIDAndPeriod(staffID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewSelectionPerformanceCountByStaffIDAndPeriod", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewSelectionPerformanceCountByStaffIDAndPeriod), staffID, startMonth, endMonth)
}

// GetInterviewSelectionPerformanceCountByStaffIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetInterviewSelectionPerformanceCountByStaffIDAndSalesMonth(staffID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewSelectionPerformanceCountByStaffIDAndSalesMonth", staffID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewSelectionPerformanceCountByStaffIDAndSalesMonth indicates an expected call of GetInterviewSelectionPerformanceCountByStaffIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetInterviewSelectionPerformanceCountByStaffIDAndSalesMonth(staffID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewSelectionPerformanceCountByStaffIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetInterviewSelectionPerformanceCountByStaffIDAndSalesMonth), staffID, saleMonth)
}

// GetLatest mocks base method.
func (m *MockTaskRepository) GetLatest() ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatest")
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatest indicates an expected call of GetLatest.
func (mr *MockTaskRepositoryMockRecorder) GetLatest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatest", reflect.TypeOf((*MockTaskRepository)(nil).GetLatest))
}

// GetLatestAfterSelectPhaseByJobSeekerID mocks base method.
func (m *MockTaskRepository) GetLatestAfterSelectPhaseByJobSeekerID(jobSeekerID uint, phase entity.TaskCategory) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAfterSelectPhaseByJobSeekerID", jobSeekerID, phase)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAfterSelectPhaseByJobSeekerID indicates an expected call of GetLatestAfterSelectPhaseByJobSeekerID.
func (mr *MockTaskRepositoryMockRecorder) GetLatestAfterSelectPhaseByJobSeekerID(jobSeekerID, phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAfterSelectPhaseByJobSeekerID", reflect.TypeOf((*MockTaskRepository)(nil).GetLatestAfterSelectPhaseByJobSeekerID), jobSeekerID, phase)
}

// GetLatestByAgentID mocks base method.
func (m *MockTaskRepository) GetLatestByAgentID(agentID uint) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestByAgentID indicates an expected call of GetLatestByAgentID.
func (mr *MockTaskRepositoryMockRecorder) GetLatestByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestByAgentID", reflect.TypeOf((*MockTaskRepository)(nil).GetLatestByAgentID), agentID)
}

// GetLatestByAgentIDAndFreeWord mocks base method.
func (m *MockTaskRepository) GetLatestByAgentIDAndFreeWord(agentID uint, jobSeekerFreeWord, enterpriseFreeWord string) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestByAgentIDAndFreeWord", agentID, jobSeekerFreeWord, enterpriseFreeWord)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestByAgentIDAndFreeWord indicates an expected call of GetLatestByAgentIDAndFreeWord.
func (mr *MockTaskRepositoryMockRecorder) GetLatestByAgentIDAndFreeWord(agentID, jobSeekerFreeWord, enterpriseFreeWord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestByAgentIDAndFreeWord", reflect.TypeOf((*MockTaskRepository)(nil).GetLatestByAgentIDAndFreeWord), agentID, jobSeekerFreeWord, enterpriseFreeWord)
}

// GetLatestByJobSeekerUUIDAndJobInformationIDList mocks base method.
func (m *MockTaskRepository) GetLatestByJobSeekerUUIDAndJobInformationIDList(jobSeekerUUID uuid.UUID, jobInformationIDList []uint) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestByJobSeekerUUIDAndJobInformationIDList", jobSeekerUUID, jobInformationIDList)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestByJobSeekerUUIDAndJobInformationIDList indicates an expected call of GetLatestByJobSeekerUUIDAndJobInformationIDList.
func (mr *MockTaskRepositoryMockRecorder) GetLatestByJobSeekerUUIDAndJobInformationIDList(jobSeekerUUID, jobInformationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestByJobSeekerUUIDAndJobInformationIDList", reflect.TypeOf((*MockTaskRepository)(nil).GetLatestByJobSeekerUUIDAndJobInformationIDList), jobSeekerUUID, jobInformationIDList)
}

// GetLatestByStaffID mocks base method.
func (m *MockTaskRepository) GetLatestByStaffID(agentStaffID uint) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestByStaffID", agentStaffID)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestByStaffID indicates an expected call of GetLatestByStaffID.
func (mr *MockTaskRepositoryMockRecorder) GetLatestByStaffID(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestByStaffID", reflect.TypeOf((*MockTaskRepository)(nil).GetLatestByStaffID), agentStaffID)
}

// GetLatestSameByJobSeekerID mocks base method.
func (m *MockTaskRepository) GetLatestSameByJobSeekerID(jobSeekerID, taskID uint, phase, phaseSub null.Int) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSameByJobSeekerID", jobSeekerID, taskID, phase, phaseSub)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSameByJobSeekerID indicates an expected call of GetLatestSameByJobSeekerID.
func (mr *MockTaskRepositoryMockRecorder) GetLatestSameByJobSeekerID(jobSeekerID, taskID, phase, phaseSub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSameByJobSeekerID", reflect.TypeOf((*MockTaskRepository)(nil).GetLatestSameByJobSeekerID), jobSeekerID, taskID, phase, phaseSub)
}

// GetSeekerFinalSelectionPerformanceCountByAgentIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetSeekerFinalSelectionPerformanceCountByAgentIDAndSalesMonth(agentID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeekerFinalSelectionPerformanceCountByAgentIDAndSalesMonth", agentID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeekerFinalSelectionPerformanceCountByAgentIDAndSalesMonth indicates an expected call of GetSeekerFinalSelectionPerformanceCountByAgentIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetSeekerFinalSelectionPerformanceCountByAgentIDAndSalesMonth(agentID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeekerFinalSelectionPerformanceCountByAgentIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetSeekerFinalSelectionPerformanceCountByAgentIDAndSalesMonth), agentID, saleMonth)
}

// GetSeekerFinalSelectionPerformanceCountByStaffIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetSeekerFinalSelectionPerformanceCountByStaffIDAndSalesMonth(staffID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeekerFinalSelectionPerformanceCountByStaffIDAndSalesMonth", staffID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeekerFinalSelectionPerformanceCountByStaffIDAndSalesMonth indicates an expected call of GetSeekerFinalSelectionPerformanceCountByStaffIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetSeekerFinalSelectionPerformanceCountByStaffIDAndSalesMonth(staffID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeekerFinalSelectionPerformanceCountByStaffIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetSeekerFinalSelectionPerformanceCountByStaffIDAndSalesMonth), staffID, saleMonth)
}

// GetSeekerJobIntroductionPerformanceCountByAgentIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetSeekerJobIntroductionPerformanceCountByAgentIDAndSalesMonth(agentID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeekerJobIntroductionPerformanceCountByAgentIDAndSalesMonth", agentID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeekerJobIntroductionPerformanceCountByAgentIDAndSalesMonth indicates an expected call of GetSeekerJobIntroductionPerformanceCountByAgentIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetSeekerJobIntroductionPerformanceCountByAgentIDAndSalesMonth(agentID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeekerJobIntroductionPerformanceCountByAgentIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetSeekerJobIntroductionPerformanceCountByAgentIDAndSalesMonth), agentID, saleMonth)
}

// GetSeekerJobIntroductionPerformanceCountByStaffIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetSeekerJobIntroductionPerformanceCountByStaffIDAndSalesMonth(staffID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeekerJobIntroductionPerformanceCountByStaffIDAndSalesMonth", staffID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeekerJobIntroductionPerformanceCountByStaffIDAndSalesMonth indicates an expected call of GetSeekerJobIntroductionPerformanceCountByStaffIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetSeekerJobIntroductionPerformanceCountByStaffIDAndSalesMonth(staffID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeekerJobIntroductionPerformanceCountByStaffIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetSeekerJobIntroductionPerformanceCountByStaffIDAndSalesMonth), staffID, saleMonth)
}

// GetSeekerOfferPerformanceCountByAgentIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetSeekerOfferPerformanceCountByAgentIDAndSalesMonth(agentID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeekerOfferPerformanceCountByAgentIDAndSalesMonth", agentID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeekerOfferPerformanceCountByAgentIDAndSalesMonth indicates an expected call of GetSeekerOfferPerformanceCountByAgentIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetSeekerOfferPerformanceCountByAgentIDAndSalesMonth(agentID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeekerOfferPerformanceCountByAgentIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetSeekerOfferPerformanceCountByAgentIDAndSalesMonth), agentID, saleMonth)
}

// GetSeekerOfferPerformanceCountByStaffIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetSeekerOfferPerformanceCountByStaffIDAndSalesMonth(staffID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeekerOfferPerformanceCountByStaffIDAndSalesMonth", staffID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeekerOfferPerformanceCountByStaffIDAndSalesMonth indicates an expected call of GetSeekerOfferPerformanceCountByStaffIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetSeekerOfferPerformanceCountByStaffIDAndSalesMonth(staffID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeekerOfferPerformanceCountByStaffIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetSeekerOfferPerformanceCountByStaffIDAndSalesMonth), staffID, saleMonth)
}

// GetSeekerRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetSeekerRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth(agentID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeekerRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth", agentID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeekerRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth indicates an expected call of GetSeekerRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetSeekerRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth(agentID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeekerRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetSeekerRecommendationCompletionPerformanceCountByAgentIDAndSalesMonth), agentID, saleMonth)
}

// GetSeekerRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetSeekerRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth(staffID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeekerRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth", staffID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeekerRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth indicates an expected call of GetSeekerRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetSeekerRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth(staffID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeekerRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetSeekerRecommendationCompletionPerformanceCountByStaffIDAndSalesMonth), staffID, saleMonth)
}

// GetSeekerSelectionPerformanceCountByAgentIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetSeekerSelectionPerformanceCountByAgentIDAndSalesMonth(agentID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeekerSelectionPerformanceCountByAgentIDAndSalesMonth", agentID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeekerSelectionPerformanceCountByAgentIDAndSalesMonth indicates an expected call of GetSeekerSelectionPerformanceCountByAgentIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetSeekerSelectionPerformanceCountByAgentIDAndSalesMonth(agentID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeekerSelectionPerformanceCountByAgentIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetSeekerSelectionPerformanceCountByAgentIDAndSalesMonth), agentID, saleMonth)
}

// GetSeekerSelectionPerformanceCountByStaffIDAndSalesMonth mocks base method.
func (m *MockTaskRepository) GetSeekerSelectionPerformanceCountByStaffIDAndSalesMonth(staffID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSeekerSelectionPerformanceCountByStaffIDAndSalesMonth", staffID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSeekerSelectionPerformanceCountByStaffIDAndSalesMonth indicates an expected call of GetSeekerSelectionPerformanceCountByStaffIDAndSalesMonth.
func (mr *MockTaskRepositoryMockRecorder) GetSeekerSelectionPerformanceCountByStaffIDAndSalesMonth(staffID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSeekerSelectionPerformanceCountByStaffIDAndSalesMonth", reflect.TypeOf((*MockTaskRepository)(nil).GetSeekerSelectionPerformanceCountByStaffIDAndSalesMonth), staffID, saleMonth)
}

// GetWithRelatedByTaskGroupID mocks base method.
func (m *MockTaskRepository) GetWithRelatedByTaskGroupID(taskGroupID uint) ([]*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithRelatedByTaskGroupID", taskGroupID)
	ret0, _ := ret[0].([]*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithRelatedByTaskGroupID indicates an expected call of GetWithRelatedByTaskGroupID.
func (mr *MockTaskRepositoryMockRecorder) GetWithRelatedByTaskGroupID(taskGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithRelatedByTaskGroupID", reflect.TypeOf((*MockTaskRepository)(nil).GetWithRelatedByTaskGroupID), taskGroupID)
}

// Update mocks base method.
func (m *MockTaskRepository) Update(id uint, task *entity.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskRepositoryMockRecorder) Update(id, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskRepository)(nil).Update), id, task)
}

// MockTaskIsRecommendDocumentRepository is a mock of TaskIsRecommendDocumentRepository interface.
type MockTaskIsRecommendDocumentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskIsRecommendDocumentRepositoryMockRecorder
}

// MockTaskIsRecommendDocumentRepositoryMockRecorder is the mock recorder for MockTaskIsRecommendDocumentRepository.
type MockTaskIsRecommendDocumentRepositoryMockRecorder struct {
	mock *MockTaskIsRecommendDocumentRepository
}

// NewMockTaskIsRecommendDocumentRepository creates a new mock instance.
func NewMockTaskIsRecommendDocumentRepository(ctrl *gomock.Controller) *MockTaskIsRecommendDocumentRepository {
	mock := &MockTaskIsRecommendDocumentRepository{ctrl: ctrl}
	mock.recorder = &MockTaskIsRecommendDocumentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskIsRecommendDocumentRepository) EXPECT() *MockTaskIsRecommendDocumentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskIsRecommendDocumentRepository) Create(task *entity.TaskIsRecommendDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskIsRecommendDocumentRepositoryMockRecorder) Create(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskIsRecommendDocumentRepository)(nil).Create), task)
}

// FindByID mocks base method.
func (m *MockTaskIsRecommendDocumentRepository) FindByID(id uint) (*entity.TaskIsRecommendDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.TaskIsRecommendDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTaskIsRecommendDocumentRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTaskIsRecommendDocumentRepository)(nil).FindByID), id)
}

// FindByTaskID mocks base method.
func (m *MockTaskIsRecommendDocumentRepository) FindByTaskID(taskID uint) (*entity.TaskIsRecommendDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTaskID", taskID)
	ret0, _ := ret[0].(*entity.TaskIsRecommendDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTaskID indicates an expected call of FindByTaskID.
func (mr *MockTaskIsRecommendDocumentRepositoryMockRecorder) FindByTaskID(taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTaskID", reflect.TypeOf((*MockTaskIsRecommendDocumentRepository)(nil).FindByTaskID), taskID)
}

// GetByTaskIDList mocks base method.
func (m *MockTaskIsRecommendDocumentRepository) GetByTaskIDList(taskIDList []uint) ([]*entity.TaskIsRecommendDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTaskIDList", taskIDList)
	ret0, _ := ret[0].([]*entity.TaskIsRecommendDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTaskIDList indicates an expected call of GetByTaskIDList.
func (mr *MockTaskIsRecommendDocumentRepositoryMockRecorder) GetByTaskIDList(taskIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTaskIDList", reflect.TypeOf((*MockTaskIsRecommendDocumentRepository)(nil).GetByTaskIDList), taskIDList)
}

// Update mocks base method.
func (m *MockTaskIsRecommendDocumentRepository) Update(id uint, task *entity.TaskIsRecommendDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskIsRecommendDocumentRepositoryMockRecorder) Update(id, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskIsRecommendDocumentRepository)(nil).Update), id, task)
}

// MockEvaluationPointRepository is a mock of EvaluationPointRepository interface.
type MockEvaluationPointRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluationPointRepositoryMockRecorder
}

// MockEvaluationPointRepositoryMockRecorder is the mock recorder for MockEvaluationPointRepository.
type MockEvaluationPointRepositoryMockRecorder struct {
	mock *MockEvaluationPointRepository
}

// NewMockEvaluationPointRepository creates a new mock instance.
func NewMockEvaluationPointRepository(ctrl *gomock.Controller) *MockEvaluationPointRepository {
	mock := &MockEvaluationPointRepository{ctrl: ctrl}
	mock.recorder = &MockEvaluationPointRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluationPointRepository) EXPECT() *MockEvaluationPointRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEvaluationPointRepository) Create(evaluationPoint *entity.EvaluationPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", evaluationPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEvaluationPointRepositoryMockRecorder) Create(evaluationPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEvaluationPointRepository)(nil).Create), evaluationPoint)
}

// FindByID mocks base method.
func (m *MockEvaluationPointRepository) FindByID(id uint) (*entity.EvaluationPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.EvaluationPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockEvaluationPointRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockEvaluationPointRepository)(nil).FindByID), id)
}

// FindByTaskID mocks base method.
func (m *MockEvaluationPointRepository) FindByTaskID(taskID uint) (*entity.EvaluationPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTaskID", taskID)
	ret0, _ := ret[0].(*entity.EvaluationPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTaskID indicates an expected call of FindByTaskID.
func (mr *MockEvaluationPointRepositoryMockRecorder) FindByTaskID(taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTaskID", reflect.TypeOf((*MockEvaluationPointRepository)(nil).FindByTaskID), taskID)
}

// GetByJobSeekerIDAndJobInformationID mocks base method.
func (m *MockEvaluationPointRepository) GetByJobSeekerIDAndJobInformationID(jobSeekerID, jobInformationID uint) ([]*entity.EvaluationPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerIDAndJobInformationID", jobSeekerID, jobInformationID)
	ret0, _ := ret[0].([]*entity.EvaluationPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerIDAndJobInformationID indicates an expected call of GetByJobSeekerIDAndJobInformationID.
func (mr *MockEvaluationPointRepositoryMockRecorder) GetByJobSeekerIDAndJobInformationID(jobSeekerID, jobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerIDAndJobInformationID", reflect.TypeOf((*MockEvaluationPointRepository)(nil).GetByJobSeekerIDAndJobInformationID), jobSeekerID, jobInformationID)
}

// GetBySelectionFlowID mocks base method.
func (m *MockEvaluationPointRepository) GetBySelectionFlowID(selectionFlowID uint) ([]*entity.EvaluationPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySelectionFlowID", selectionFlowID)
	ret0, _ := ret[0].([]*entity.EvaluationPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySelectionFlowID indicates an expected call of GetBySelectionFlowID.
func (mr *MockEvaluationPointRepositoryMockRecorder) GetBySelectionFlowID(selectionFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySelectionFlowID", reflect.TypeOf((*MockEvaluationPointRepository)(nil).GetBySelectionFlowID), selectionFlowID)
}

// Update mocks base method.
func (m *MockEvaluationPointRepository) Update(id uint, evaluationPoint *entity.EvaluationPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, evaluationPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockEvaluationPointRepositoryMockRecorder) Update(id, evaluationPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEvaluationPointRepository)(nil).Update), id, evaluationPoint)
}

// MockMessageTemplateRepository is a mock of MessageTemplateRepository interface.
type MockMessageTemplateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageTemplateRepositoryMockRecorder
}

// MockMessageTemplateRepositoryMockRecorder is the mock recorder for MockMessageTemplateRepository.
type MockMessageTemplateRepositoryMockRecorder struct {
	mock *MockMessageTemplateRepository
}

// NewMockMessageTemplateRepository creates a new mock instance.
func NewMockMessageTemplateRepository(ctrl *gomock.Controller) *MockMessageTemplateRepository {
	mock := &MockMessageTemplateRepository{ctrl: ctrl}
	mock.recorder = &MockMessageTemplateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageTemplateRepository) EXPECT() *MockMessageTemplateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessageTemplateRepository) Create(messageTemplate *entity.MessageTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", messageTemplate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMessageTemplateRepositoryMockRecorder) Create(messageTemplate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessageTemplateRepository)(nil).Create), messageTemplate)
}

// Delete mocks base method.
func (m *MockMessageTemplateRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMessageTemplateRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMessageTemplateRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockMessageTemplateRepository) FindByID(id uint) (*entity.MessageTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.MessageTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockMessageTemplateRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockMessageTemplateRepository)(nil).FindByID), id)
}

// GetByAgentID mocks base method.
func (m *MockMessageTemplateRepository) GetByAgentID(agentID uint) ([]*entity.MessageTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.MessageTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockMessageTemplateRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockMessageTemplateRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentStaffID mocks base method.
func (m *MockMessageTemplateRepository) GetByAgentStaffID(agentStaffID uint) ([]*entity.MessageTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentStaffID", agentStaffID)
	ret0, _ := ret[0].([]*entity.MessageTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentStaffID indicates an expected call of GetByAgentStaffID.
func (mr *MockMessageTemplateRepositoryMockRecorder) GetByAgentStaffID(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentStaffID", reflect.TypeOf((*MockMessageTemplateRepository)(nil).GetByAgentStaffID), agentStaffID)
}

// GetByAgentStaffIDAndSendScene mocks base method.
func (m *MockMessageTemplateRepository) GetByAgentStaffIDAndSendScene(agentStaffID, sendScene uint) ([]*entity.MessageTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentStaffIDAndSendScene", agentStaffID, sendScene)
	ret0, _ := ret[0].([]*entity.MessageTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentStaffIDAndSendScene indicates an expected call of GetByAgentStaffIDAndSendScene.
func (mr *MockMessageTemplateRepositoryMockRecorder) GetByAgentStaffIDAndSendScene(agentStaffID, sendScene any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentStaffIDAndSendScene", reflect.TypeOf((*MockMessageTemplateRepository)(nil).GetByAgentStaffIDAndSendScene), agentStaffID, sendScene)
}

// Update mocks base method.
func (m *MockMessageTemplateRepository) Update(id uint, messageTemplate *entity.MessageTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, messageTemplate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMessageTemplateRepositoryMockRecorder) Update(id, messageTemplate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMessageTemplateRepository)(nil).Update), id, messageTemplate)
}

// MockSelectionQuestionnaireRepository is a mock of SelectionQuestionnaireRepository interface.
type MockSelectionQuestionnaireRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSelectionQuestionnaireRepositoryMockRecorder
}

// MockSelectionQuestionnaireRepositoryMockRecorder is the mock recorder for MockSelectionQuestionnaireRepository.
type MockSelectionQuestionnaireRepositoryMockRecorder struct {
	mock *MockSelectionQuestionnaireRepository
}

// NewMockSelectionQuestionnaireRepository creates a new mock instance.
func NewMockSelectionQuestionnaireRepository(ctrl *gomock.Controller) *MockSelectionQuestionnaireRepository {
	mock := &MockSelectionQuestionnaireRepository{ctrl: ctrl}
	mock.recorder = &MockSelectionQuestionnaireRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelectionQuestionnaireRepository) EXPECT() *MockSelectionQuestionnaireRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSelectionQuestionnaireRepository) Create(selectionQuestionnaire *entity.SelectionQuestionnaire) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", selectionQuestionnaire)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSelectionQuestionnaireRepositoryMockRecorder) Create(selectionQuestionnaire any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSelectionQuestionnaireRepository)(nil).Create), selectionQuestionnaire)
}

// CreateByUUID mocks base method.
func (m *MockSelectionQuestionnaireRepository) CreateByUUID(selectionQuestionnaire *entity.SelectionQuestionnaire, questionnaireUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByUUID", selectionQuestionnaire, questionnaireUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateByUUID indicates an expected call of CreateByUUID.
func (mr *MockSelectionQuestionnaireRepositoryMockRecorder) CreateByUUID(selectionQuestionnaire, questionnaireUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByUUID", reflect.TypeOf((*MockSelectionQuestionnaireRepository)(nil).CreateByUUID), selectionQuestionnaire, questionnaireUUID)
}

// FindByID mocks base method.
func (m *MockSelectionQuestionnaireRepository) FindByID(id uint) (*entity.SelectionQuestionnaire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.SelectionQuestionnaire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSelectionQuestionnaireRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSelectionQuestionnaireRepository)(nil).FindByID), id)
}

// FindByJobSeekerIDAndJobInformationIDAndSelectionPhase mocks base method.
func (m *MockSelectionQuestionnaireRepository) FindByJobSeekerIDAndJobInformationIDAndSelectionPhase(jobSeekerID, jobInformationID, selectionPhase uint) (*entity.SelectionQuestionnaire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByJobSeekerIDAndJobInformationIDAndSelectionPhase", jobSeekerID, jobInformationID, selectionPhase)
	ret0, _ := ret[0].(*entity.SelectionQuestionnaire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByJobSeekerIDAndJobInformationIDAndSelectionPhase indicates an expected call of FindByJobSeekerIDAndJobInformationIDAndSelectionPhase.
func (mr *MockSelectionQuestionnaireRepositoryMockRecorder) FindByJobSeekerIDAndJobInformationIDAndSelectionPhase(jobSeekerID, jobInformationID, selectionPhase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByJobSeekerIDAndJobInformationIDAndSelectionPhase", reflect.TypeOf((*MockSelectionQuestionnaireRepository)(nil).FindByJobSeekerIDAndJobInformationIDAndSelectionPhase), jobSeekerID, jobInformationID, selectionPhase)
}

// FindByJobSeekerUUIDAndJobInformationUUIDAndSelectionPhase mocks base method.
func (m *MockSelectionQuestionnaireRepository) FindByJobSeekerUUIDAndJobInformationUUIDAndSelectionPhase(jobSeekerUUID, jobInformationUUID uuid.UUID, selectionPhase uint) (*entity.SelectionQuestionnaire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByJobSeekerUUIDAndJobInformationUUIDAndSelectionPhase", jobSeekerUUID, jobInformationUUID, selectionPhase)
	ret0, _ := ret[0].(*entity.SelectionQuestionnaire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByJobSeekerUUIDAndJobInformationUUIDAndSelectionPhase indicates an expected call of FindByJobSeekerUUIDAndJobInformationUUIDAndSelectionPhase.
func (mr *MockSelectionQuestionnaireRepositoryMockRecorder) FindByJobSeekerUUIDAndJobInformationUUIDAndSelectionPhase(jobSeekerUUID, jobInformationUUID, selectionPhase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByJobSeekerUUIDAndJobInformationUUIDAndSelectionPhase", reflect.TypeOf((*MockSelectionQuestionnaireRepository)(nil).FindByJobSeekerUUIDAndJobInformationUUIDAndSelectionPhase), jobSeekerUUID, jobInformationUUID, selectionPhase)
}

// FindByUUID mocks base method.
func (m *MockSelectionQuestionnaireRepository) FindByUUID(uuid uuid.UUID) (*entity.SelectionQuestionnaire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", uuid)
	ret0, _ := ret[0].(*entity.SelectionQuestionnaire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockSelectionQuestionnaireRepositoryMockRecorder) FindByUUID(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockSelectionQuestionnaireRepository)(nil).FindByUUID), uuid)
}

// GetByJobSeekerID mocks base method.
func (m *MockSelectionQuestionnaireRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.SelectionQuestionnaire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.SelectionQuestionnaire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockSelectionQuestionnaireRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockSelectionQuestionnaireRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetBySelectionFlowID mocks base method.
func (m *MockSelectionQuestionnaireRepository) GetBySelectionFlowID(selectionFlowID uint) ([]*entity.SelectionQuestionnaire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySelectionFlowID", selectionFlowID)
	ret0, _ := ret[0].([]*entity.SelectionQuestionnaire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySelectionFlowID indicates an expected call of GetBySelectionFlowID.
func (mr *MockSelectionQuestionnaireRepositoryMockRecorder) GetBySelectionFlowID(selectionFlowID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySelectionFlowID", reflect.TypeOf((*MockSelectionQuestionnaireRepository)(nil).GetBySelectionFlowID), selectionFlowID)
}

// GetUnanswerdByJobSeekerUUID mocks base method.
func (m *MockSelectionQuestionnaireRepository) GetUnanswerdByJobSeekerUUID(jobSeekerUUID uuid.UUID) ([]*entity.SelectionQuestionnaire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnanswerdByJobSeekerUUID", jobSeekerUUID)
	ret0, _ := ret[0].([]*entity.SelectionQuestionnaire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnanswerdByJobSeekerUUID indicates an expected call of GetUnanswerdByJobSeekerUUID.
func (mr *MockSelectionQuestionnaireRepositoryMockRecorder) GetUnanswerdByJobSeekerUUID(jobSeekerUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnanswerdByJobSeekerUUID", reflect.TypeOf((*MockSelectionQuestionnaireRepository)(nil).GetUnanswerdByJobSeekerUUID), jobSeekerUUID)
}

// Update mocks base method.
func (m *MockSelectionQuestionnaireRepository) Update(id uint, selectionQuestionnaire *entity.SelectionQuestionnaire) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, selectionQuestionnaire)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSelectionQuestionnaireRepositoryMockRecorder) Update(id, selectionQuestionnaire any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSelectionQuestionnaireRepository)(nil).Update), id, selectionQuestionnaire)
}

// MockSelectionQuestionnaireMyRankingRepository is a mock of SelectionQuestionnaireMyRankingRepository interface.
type MockSelectionQuestionnaireMyRankingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSelectionQuestionnaireMyRankingRepositoryMockRecorder
}

// MockSelectionQuestionnaireMyRankingRepositoryMockRecorder is the mock recorder for MockSelectionQuestionnaireMyRankingRepository.
type MockSelectionQuestionnaireMyRankingRepositoryMockRecorder struct {
	mock *MockSelectionQuestionnaireMyRankingRepository
}

// NewMockSelectionQuestionnaireMyRankingRepository creates a new mock instance.
func NewMockSelectionQuestionnaireMyRankingRepository(ctrl *gomock.Controller) *MockSelectionQuestionnaireMyRankingRepository {
	mock := &MockSelectionQuestionnaireMyRankingRepository{ctrl: ctrl}
	mock.recorder = &MockSelectionQuestionnaireMyRankingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelectionQuestionnaireMyRankingRepository) EXPECT() *MockSelectionQuestionnaireMyRankingRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSelectionQuestionnaireMyRankingRepository) Create(selectionQuestionnaire *entity.SelectionQuestionnaireMyRanking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", selectionQuestionnaire)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSelectionQuestionnaireMyRankingRepositoryMockRecorder) Create(selectionQuestionnaire any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSelectionQuestionnaireMyRankingRepository)(nil).Create), selectionQuestionnaire)
}

// DeleteByQuestionnaireID mocks base method.
func (m *MockSelectionQuestionnaireMyRankingRepository) DeleteByQuestionnaireID(questionnaireID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByQuestionnaireID", questionnaireID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByQuestionnaireID indicates an expected call of DeleteByQuestionnaireID.
func (mr *MockSelectionQuestionnaireMyRankingRepositoryMockRecorder) DeleteByQuestionnaireID(questionnaireID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByQuestionnaireID", reflect.TypeOf((*MockSelectionQuestionnaireMyRankingRepository)(nil).DeleteByQuestionnaireID), questionnaireID)
}

// GetByQuestionnaireID mocks base method.
func (m *MockSelectionQuestionnaireMyRankingRepository) GetByQuestionnaireID(questionnaireID uint) ([]*entity.SelectionQuestionnaireMyRanking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByQuestionnaireID", questionnaireID)
	ret0, _ := ret[0].([]*entity.SelectionQuestionnaireMyRanking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByQuestionnaireID indicates an expected call of GetByQuestionnaireID.
func (mr *MockSelectionQuestionnaireMyRankingRepositoryMockRecorder) GetByQuestionnaireID(questionnaireID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByQuestionnaireID", reflect.TypeOf((*MockSelectionQuestionnaireMyRankingRepository)(nil).GetByQuestionnaireID), questionnaireID)
}

// GetByQuestionnaireIDList mocks base method.
func (m *MockSelectionQuestionnaireMyRankingRepository) GetByQuestionnaireIDList(idList []uint) ([]*entity.SelectionQuestionnaireMyRanking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByQuestionnaireIDList", idList)
	ret0, _ := ret[0].([]*entity.SelectionQuestionnaireMyRanking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByQuestionnaireIDList indicates an expected call of GetByQuestionnaireIDList.
func (mr *MockSelectionQuestionnaireMyRankingRepositoryMockRecorder) GetByQuestionnaireIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByQuestionnaireIDList", reflect.TypeOf((*MockSelectionQuestionnaireMyRankingRepository)(nil).GetByQuestionnaireIDList), idList)
}

// MockChatGroupWithJobSeekerRepository is a mock of ChatGroupWithJobSeekerRepository interface.
type MockChatGroupWithJobSeekerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatGroupWithJobSeekerRepositoryMockRecorder
}

// MockChatGroupWithJobSeekerRepositoryMockRecorder is the mock recorder for MockChatGroupWithJobSeekerRepository.
type MockChatGroupWithJobSeekerRepositoryMockRecorder struct {
	mock *MockChatGroupWithJobSeekerRepository
}

// NewMockChatGroupWithJobSeekerRepository creates a new mock instance.
func NewMockChatGroupWithJobSeekerRepository(ctrl *gomock.Controller) *MockChatGroupWithJobSeekerRepository {
	mock := &MockChatGroupWithJobSeekerRepository{ctrl: ctrl}
	mock.recorder = &MockChatGroupWithJobSeekerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatGroupWithJobSeekerRepository) EXPECT() *MockChatGroupWithJobSeekerRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockChatGroupWithJobSeekerRepository) All() ([]*entity.ChatGroupWithJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.ChatGroupWithJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockChatGroupWithJobSeekerRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockChatGroupWithJobSeekerRepository)(nil).All))
}

// CountNotificationByAgentID mocks base method.
func (m *MockChatGroupWithJobSeekerRepository) CountNotificationByAgentID(agentID uint) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountNotificationByAgentID", agentID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountNotificationByAgentID indicates an expected call of CountNotificationByAgentID.
func (mr *MockChatGroupWithJobSeekerRepositoryMockRecorder) CountNotificationByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountNotificationByAgentID", reflect.TypeOf((*MockChatGroupWithJobSeekerRepository)(nil).CountNotificationByAgentID), agentID)
}

// Create mocks base method.
func (m *MockChatGroupWithJobSeekerRepository) Create(chatGroupWithJobSeeker *entity.ChatGroupWithJobSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", chatGroupWithJobSeeker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChatGroupWithJobSeekerRepositoryMockRecorder) Create(chatGroupWithJobSeeker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatGroupWithJobSeekerRepository)(nil).Create), chatGroupWithJobSeeker)
}

// FindByAgentIDAndJobSeekerID mocks base method.
func (m *MockChatGroupWithJobSeekerRepository) FindByAgentIDAndJobSeekerID(agentID, jobSeekerID uint) (*entity.ChatGroupWithJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAgentIDAndJobSeekerID", agentID, jobSeekerID)
	ret0, _ := ret[0].(*entity.ChatGroupWithJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAgentIDAndJobSeekerID indicates an expected call of FindByAgentIDAndJobSeekerID.
func (mr *MockChatGroupWithJobSeekerRepositoryMockRecorder) FindByAgentIDAndJobSeekerID(agentID, jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAgentIDAndJobSeekerID", reflect.TypeOf((*MockChatGroupWithJobSeekerRepository)(nil).FindByAgentIDAndJobSeekerID), agentID, jobSeekerID)
}

// FindByID mocks base method.
func (m *MockChatGroupWithJobSeekerRepository) FindByID(id uint) (*entity.ChatGroupWithJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.ChatGroupWithJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockChatGroupWithJobSeekerRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockChatGroupWithJobSeekerRepository)(nil).FindByID), id)
}

// GetActiveJobSeekerByAgentID mocks base method.
func (m *MockChatGroupWithJobSeekerRepository) GetActiveJobSeekerByAgentID(agentID uint) ([]*entity.ChatGroupWithJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveJobSeekerByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.ChatGroupWithJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveJobSeekerByAgentID indicates an expected call of GetActiveJobSeekerByAgentID.
func (mr *MockChatGroupWithJobSeekerRepositoryMockRecorder) GetActiveJobSeekerByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveJobSeekerByAgentID", reflect.TypeOf((*MockChatGroupWithJobSeekerRepository)(nil).GetActiveJobSeekerByAgentID), agentID)
}

// GetByAgentID mocks base method.
func (m *MockChatGroupWithJobSeekerRepository) GetByAgentID(agentID uint) ([]*entity.ChatGroupWithJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.ChatGroupWithJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockChatGroupWithJobSeekerRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockChatGroupWithJobSeekerRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentIDAndFreeWord mocks base method.
func (m *MockChatGroupWithJobSeekerRepository) GetByAgentIDAndFreeWord(agentID uint, freeWord string) ([]*entity.ChatGroupWithJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndFreeWord", agentID, freeWord)
	ret0, _ := ret[0].([]*entity.ChatGroupWithJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndFreeWord indicates an expected call of GetByAgentIDAndFreeWord.
func (mr *MockChatGroupWithJobSeekerRepositoryMockRecorder) GetByAgentIDAndFreeWord(agentID, freeWord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndFreeWord", reflect.TypeOf((*MockChatGroupWithJobSeekerRepository)(nil).GetByAgentIDAndFreeWord), agentID, freeWord)
}

// UpdateAgentLastSendAt mocks base method.
func (m *MockChatGroupWithJobSeekerRepository) UpdateAgentLastSendAt(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentLastSendAt", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentLastSendAt indicates an expected call of UpdateAgentLastSendAt.
func (mr *MockChatGroupWithJobSeekerRepositoryMockRecorder) UpdateAgentLastSendAt(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentLastSendAt", reflect.TypeOf((*MockChatGroupWithJobSeekerRepository)(nil).UpdateAgentLastSendAt), id)
}

// UpdateAgentLastWatchedAt mocks base method.
func (m *MockChatGroupWithJobSeekerRepository) UpdateAgentLastWatchedAt(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentLastWatchedAt", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentLastWatchedAt indicates an expected call of UpdateAgentLastWatchedAt.
func (mr *MockChatGroupWithJobSeekerRepositoryMockRecorder) UpdateAgentLastWatchedAt(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentLastWatchedAt", reflect.TypeOf((*MockChatGroupWithJobSeekerRepository)(nil).UpdateAgentLastWatchedAt), id)
}

// UpdateJobSeekerLastWatchedAtAndSendAt mocks base method.
func (m *MockChatGroupWithJobSeekerRepository) UpdateJobSeekerLastWatchedAtAndSendAt(id uint, sendAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobSeekerLastWatchedAtAndSendAt", id, sendAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobSeekerLastWatchedAtAndSendAt indicates an expected call of UpdateJobSeekerLastWatchedAtAndSendAt.
func (mr *MockChatGroupWithJobSeekerRepositoryMockRecorder) UpdateJobSeekerLastWatchedAtAndSendAt(id, sendAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobSeekerLastWatchedAtAndSendAt", reflect.TypeOf((*MockChatGroupWithJobSeekerRepository)(nil).UpdateJobSeekerLastWatchedAtAndSendAt), id, sendAt)
}

// UpdateJobSeekerLineActive mocks base method.
func (m *MockChatGroupWithJobSeekerRepository) UpdateJobSeekerLineActive(jobSeekerID uint, isActive bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobSeekerLineActive", jobSeekerID, isActive)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobSeekerLineActive indicates an expected call of UpdateJobSeekerLineActive.
func (mr *MockChatGroupWithJobSeekerRepositoryMockRecorder) UpdateJobSeekerLineActive(jobSeekerID, isActive any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobSeekerLineActive", reflect.TypeOf((*MockChatGroupWithJobSeekerRepository)(nil).UpdateJobSeekerLineActive), jobSeekerID, isActive)
}

// MockChatMessageWithJobSeekerRepository is a mock of ChatMessageWithJobSeekerRepository interface.
type MockChatMessageWithJobSeekerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatMessageWithJobSeekerRepositoryMockRecorder
}

// MockChatMessageWithJobSeekerRepositoryMockRecorder is the mock recorder for MockChatMessageWithJobSeekerRepository.
type MockChatMessageWithJobSeekerRepositoryMockRecorder struct {
	mock *MockChatMessageWithJobSeekerRepository
}

// NewMockChatMessageWithJobSeekerRepository creates a new mock instance.
func NewMockChatMessageWithJobSeekerRepository(ctrl *gomock.Controller) *MockChatMessageWithJobSeekerRepository {
	mock := &MockChatMessageWithJobSeekerRepository{ctrl: ctrl}
	mock.recorder = &MockChatMessageWithJobSeekerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatMessageWithJobSeekerRepository) EXPECT() *MockChatMessageWithJobSeekerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChatMessageWithJobSeekerRepository) Create(chatMessageJobSeeker *entity.ChatMessageWithJobSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", chatMessageJobSeeker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChatMessageWithJobSeekerRepositoryMockRecorder) Create(chatMessageJobSeeker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatMessageWithJobSeekerRepository)(nil).Create), chatMessageJobSeeker)
}

// FindByLINEMessageID mocks base method.
func (m *MockChatMessageWithJobSeekerRepository) FindByLINEMessageID(messageID string) (*entity.ChatMessageWithJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLINEMessageID", messageID)
	ret0, _ := ret[0].(*entity.ChatMessageWithJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLINEMessageID indicates an expected call of FindByLINEMessageID.
func (mr *MockChatMessageWithJobSeekerRepositoryMockRecorder) FindByLINEMessageID(messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLINEMessageID", reflect.TypeOf((*MockChatMessageWithJobSeekerRepository)(nil).FindByLINEMessageID), messageID)
}

// GetByGroupID mocks base method.
func (m *MockChatMessageWithJobSeekerRepository) GetByGroupID(groupID uint) ([]*entity.ChatMessageWithJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGroupID", groupID)
	ret0, _ := ret[0].([]*entity.ChatMessageWithJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGroupID indicates an expected call of GetByGroupID.
func (mr *MockChatMessageWithJobSeekerRepositoryMockRecorder) GetByGroupID(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGroupID", reflect.TypeOf((*MockChatMessageWithJobSeekerRepository)(nil).GetByGroupID), groupID)
}

// MockEmailWithJobSeekerRepository is a mock of EmailWithJobSeekerRepository interface.
type MockEmailWithJobSeekerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailWithJobSeekerRepositoryMockRecorder
}

// MockEmailWithJobSeekerRepositoryMockRecorder is the mock recorder for MockEmailWithJobSeekerRepository.
type MockEmailWithJobSeekerRepositoryMockRecorder struct {
	mock *MockEmailWithJobSeekerRepository
}

// NewMockEmailWithJobSeekerRepository creates a new mock instance.
func NewMockEmailWithJobSeekerRepository(ctrl *gomock.Controller) *MockEmailWithJobSeekerRepository {
	mock := &MockEmailWithJobSeekerRepository{ctrl: ctrl}
	mock.recorder = &MockEmailWithJobSeekerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailWithJobSeekerRepository) EXPECT() *MockEmailWithJobSeekerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEmailWithJobSeekerRepository) Create(emailWithJobSeeker *entity.EmailWithJobSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", emailWithJobSeeker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEmailWithJobSeekerRepositoryMockRecorder) Create(emailWithJobSeeker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmailWithJobSeekerRepository)(nil).Create), emailWithJobSeeker)
}

// GetByJobSeekerID mocks base method.
func (m *MockEmailWithJobSeekerRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.EmailWithJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.EmailWithJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockEmailWithJobSeekerRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockEmailWithJobSeekerRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// MockInitialQuestionnaireRepository is a mock of InitialQuestionnaireRepository interface.
type MockInitialQuestionnaireRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInitialQuestionnaireRepositoryMockRecorder
}

// MockInitialQuestionnaireRepositoryMockRecorder is the mock recorder for MockInitialQuestionnaireRepository.
type MockInitialQuestionnaireRepositoryMockRecorder struct {
	mock *MockInitialQuestionnaireRepository
}

// NewMockInitialQuestionnaireRepository creates a new mock instance.
func NewMockInitialQuestionnaireRepository(ctrl *gomock.Controller) *MockInitialQuestionnaireRepository {
	mock := &MockInitialQuestionnaireRepository{ctrl: ctrl}
	mock.recorder = &MockInitialQuestionnaireRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitialQuestionnaireRepository) EXPECT() *MockInitialQuestionnaireRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInitialQuestionnaireRepository) Create(initialQuestionnaire *entity.InitialQuestionnaire) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", initialQuestionnaire)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInitialQuestionnaireRepositoryMockRecorder) Create(initialQuestionnaire any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInitialQuestionnaireRepository)(nil).Create), initialQuestionnaire)
}

// FindByJobSeekerID mocks base method.
func (m *MockInitialQuestionnaireRepository) FindByJobSeekerID(jobSeekerID uint) (*entity.InitialQuestionnaire, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(*entity.InitialQuestionnaire)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByJobSeekerID indicates an expected call of FindByJobSeekerID.
func (mr *MockInitialQuestionnaireRepositoryMockRecorder) FindByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByJobSeekerID", reflect.TypeOf((*MockInitialQuestionnaireRepository)(nil).FindByJobSeekerID), jobSeekerID)
}

// MockInitialQuestionnaireDesiredIndustryRepository is a mock of InitialQuestionnaireDesiredIndustryRepository interface.
type MockInitialQuestionnaireDesiredIndustryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInitialQuestionnaireDesiredIndustryRepositoryMockRecorder
}

// MockInitialQuestionnaireDesiredIndustryRepositoryMockRecorder is the mock recorder for MockInitialQuestionnaireDesiredIndustryRepository.
type MockInitialQuestionnaireDesiredIndustryRepositoryMockRecorder struct {
	mock *MockInitialQuestionnaireDesiredIndustryRepository
}

// NewMockInitialQuestionnaireDesiredIndustryRepository creates a new mock instance.
func NewMockInitialQuestionnaireDesiredIndustryRepository(ctrl *gomock.Controller) *MockInitialQuestionnaireDesiredIndustryRepository {
	mock := &MockInitialQuestionnaireDesiredIndustryRepository{ctrl: ctrl}
	mock.recorder = &MockInitialQuestionnaireDesiredIndustryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitialQuestionnaireDesiredIndustryRepository) EXPECT() *MockInitialQuestionnaireDesiredIndustryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInitialQuestionnaireDesiredIndustryRepository) Create(desiredIndustry *entity.InitialQuestionnaireDesiredIndustry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredIndustry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInitialQuestionnaireDesiredIndustryRepositoryMockRecorder) Create(desiredIndustry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInitialQuestionnaireDesiredIndustryRepository)(nil).Create), desiredIndustry)
}

// MockInitialQuestionnaireDesiredOccupationRepository is a mock of InitialQuestionnaireDesiredOccupationRepository interface.
type MockInitialQuestionnaireDesiredOccupationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInitialQuestionnaireDesiredOccupationRepositoryMockRecorder
}

// MockInitialQuestionnaireDesiredOccupationRepositoryMockRecorder is the mock recorder for MockInitialQuestionnaireDesiredOccupationRepository.
type MockInitialQuestionnaireDesiredOccupationRepositoryMockRecorder struct {
	mock *MockInitialQuestionnaireDesiredOccupationRepository
}

// NewMockInitialQuestionnaireDesiredOccupationRepository creates a new mock instance.
func NewMockInitialQuestionnaireDesiredOccupationRepository(ctrl *gomock.Controller) *MockInitialQuestionnaireDesiredOccupationRepository {
	mock := &MockInitialQuestionnaireDesiredOccupationRepository{ctrl: ctrl}
	mock.recorder = &MockInitialQuestionnaireDesiredOccupationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitialQuestionnaireDesiredOccupationRepository) EXPECT() *MockInitialQuestionnaireDesiredOccupationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInitialQuestionnaireDesiredOccupationRepository) Create(desiredOccupation *entity.InitialQuestionnaireDesiredOccupation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredOccupation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInitialQuestionnaireDesiredOccupationRepositoryMockRecorder) Create(desiredOccupation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInitialQuestionnaireDesiredOccupationRepository)(nil).Create), desiredOccupation)
}

// MockInitialQuestionnaireDesiredWorkLocationRepository is a mock of InitialQuestionnaireDesiredWorkLocationRepository interface.
type MockInitialQuestionnaireDesiredWorkLocationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInitialQuestionnaireDesiredWorkLocationRepositoryMockRecorder
}

// MockInitialQuestionnaireDesiredWorkLocationRepositoryMockRecorder is the mock recorder for MockInitialQuestionnaireDesiredWorkLocationRepository.
type MockInitialQuestionnaireDesiredWorkLocationRepositoryMockRecorder struct {
	mock *MockInitialQuestionnaireDesiredWorkLocationRepository
}

// NewMockInitialQuestionnaireDesiredWorkLocationRepository creates a new mock instance.
func NewMockInitialQuestionnaireDesiredWorkLocationRepository(ctrl *gomock.Controller) *MockInitialQuestionnaireDesiredWorkLocationRepository {
	mock := &MockInitialQuestionnaireDesiredWorkLocationRepository{ctrl: ctrl}
	mock.recorder = &MockInitialQuestionnaireDesiredWorkLocationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitialQuestionnaireDesiredWorkLocationRepository) EXPECT() *MockInitialQuestionnaireDesiredWorkLocationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInitialQuestionnaireDesiredWorkLocationRepository) Create(desiredWorkLocation *entity.InitialQuestionnaireDesiredWorkLocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredWorkLocation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInitialQuestionnaireDesiredWorkLocationRepositoryMockRecorder) Create(desiredWorkLocation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInitialQuestionnaireDesiredWorkLocationRepository)(nil).Create), desiredWorkLocation)
}

// MockChatGroupWithAgentRepository is a mock of ChatGroupWithAgentRepository interface.
type MockChatGroupWithAgentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatGroupWithAgentRepositoryMockRecorder
}

// MockChatGroupWithAgentRepositoryMockRecorder is the mock recorder for MockChatGroupWithAgentRepository.
type MockChatGroupWithAgentRepositoryMockRecorder struct {
	mock *MockChatGroupWithAgentRepository
}

// NewMockChatGroupWithAgentRepository creates a new mock instance.
func NewMockChatGroupWithAgentRepository(ctrl *gomock.Controller) *MockChatGroupWithAgentRepository {
	mock := &MockChatGroupWithAgentRepository{ctrl: ctrl}
	mock.recorder = &MockChatGroupWithAgentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatGroupWithAgentRepository) EXPECT() *MockChatGroupWithAgentRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockChatGroupWithAgentRepository) All() ([]*entity.ChatGroupWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.ChatGroupWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockChatGroupWithAgentRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockChatGroupWithAgentRepository)(nil).All))
}

// Create mocks base method.
func (m *MockChatGroupWithAgentRepository) Create(chatGroupWithAgent *entity.ChatGroupWithAgent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", chatGroupWithAgent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChatGroupWithAgentRepositoryMockRecorder) Create(chatGroupWithAgent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatGroupWithAgentRepository)(nil).Create), chatGroupWithAgent)
}

// FindByAgentID mocks base method.
func (m *MockChatGroupWithAgentRepository) FindByAgentID(agent1ID, agent2ID uint) (*entity.ChatGroupWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAgentID", agent1ID, agent2ID)
	ret0, _ := ret[0].(*entity.ChatGroupWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAgentID indicates an expected call of FindByAgentID.
func (mr *MockChatGroupWithAgentRepositoryMockRecorder) FindByAgentID(agent1ID, agent2ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAgentID", reflect.TypeOf((*MockChatGroupWithAgentRepository)(nil).FindByAgentID), agent1ID, agent2ID)
}

// FindByID mocks base method.
func (m *MockChatGroupWithAgentRepository) FindByID(id uint) (*entity.ChatGroupWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.ChatGroupWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockChatGroupWithAgentRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockChatGroupWithAgentRepository)(nil).FindByID), id)
}

// FindByIDAndAgentID mocks base method.
func (m *MockChatGroupWithAgentRepository) FindByIDAndAgentID(id, agentID uint) (*entity.ChatGroupWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDAndAgentID", id, agentID)
	ret0, _ := ret[0].(*entity.ChatGroupWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDAndAgentID indicates an expected call of FindByIDAndAgentID.
func (mr *MockChatGroupWithAgentRepositoryMockRecorder) FindByIDAndAgentID(id, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDAndAgentID", reflect.TypeOf((*MockChatGroupWithAgentRepository)(nil).FindByIDAndAgentID), id, agentID)
}

// GetByAgentID mocks base method.
func (m *MockChatGroupWithAgentRepository) GetByAgentID(agentID uint) ([]*entity.ChatGroupWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.ChatGroupWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockChatGroupWithAgentRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockChatGroupWithAgentRepository)(nil).GetByAgentID), agentID)
}

// GetByMyAgentIDAndOtherIDList mocks base method.
func (m *MockChatGroupWithAgentRepository) GetByMyAgentIDAndOtherIDList(myAgentID uint, otherAgentIDList []uint) ([]*entity.ChatGroupWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMyAgentIDAndOtherIDList", myAgentID, otherAgentIDList)
	ret0, _ := ret[0].([]*entity.ChatGroupWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMyAgentIDAndOtherIDList indicates an expected call of GetByMyAgentIDAndOtherIDList.
func (mr *MockChatGroupWithAgentRepositoryMockRecorder) GetByMyAgentIDAndOtherIDList(myAgentID, otherAgentIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMyAgentIDAndOtherIDList", reflect.TypeOf((*MockChatGroupWithAgentRepository)(nil).GetByMyAgentIDAndOtherIDList), myAgentID, otherAgentIDList)
}

// UpdateAgentLastWatchedAt mocks base method.
func (m *MockChatGroupWithAgentRepository) UpdateAgentLastWatchedAt(id, agentID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentLastWatchedAt", id, agentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentLastWatchedAt indicates an expected call of UpdateAgentLastWatchedAt.
func (mr *MockChatGroupWithAgentRepositoryMockRecorder) UpdateAgentLastWatchedAt(id, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentLastWatchedAt", reflect.TypeOf((*MockChatGroupWithAgentRepository)(nil).UpdateAgentLastWatchedAt), id, agentID)
}

// UpdateLastSendAtByThreadID mocks base method.
func (m *MockChatGroupWithAgentRepository) UpdateLastSendAtByThreadID(threadID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastSendAtByThreadID", threadID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastSendAtByThreadID indicates an expected call of UpdateLastSendAtByThreadID.
func (mr *MockChatGroupWithAgentRepositoryMockRecorder) UpdateLastSendAtByThreadID(threadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastSendAtByThreadID", reflect.TypeOf((*MockChatGroupWithAgentRepository)(nil).UpdateLastSendAtByThreadID), threadID)
}

// MockChatThreadWithAgentRepository is a mock of ChatThreadWithAgentRepository interface.
type MockChatThreadWithAgentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatThreadWithAgentRepositoryMockRecorder
}

// MockChatThreadWithAgentRepositoryMockRecorder is the mock recorder for MockChatThreadWithAgentRepository.
type MockChatThreadWithAgentRepositoryMockRecorder struct {
	mock *MockChatThreadWithAgentRepository
}

// NewMockChatThreadWithAgentRepository creates a new mock instance.
func NewMockChatThreadWithAgentRepository(ctrl *gomock.Controller) *MockChatThreadWithAgentRepository {
	mock := &MockChatThreadWithAgentRepository{ctrl: ctrl}
	mock.recorder = &MockChatThreadWithAgentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatThreadWithAgentRepository) EXPECT() *MockChatThreadWithAgentRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockChatThreadWithAgentRepository) All() ([]*entity.ChatThreadWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.ChatThreadWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockChatThreadWithAgentRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockChatThreadWithAgentRepository)(nil).All))
}

// Create mocks base method.
func (m *MockChatThreadWithAgentRepository) Create(chatThread *entity.ChatThreadWithAgent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", chatThread)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChatThreadWithAgentRepositoryMockRecorder) Create(chatThread any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatThreadWithAgentRepository)(nil).Create), chatThread)
}

// FindByID mocks base method.
func (m *MockChatThreadWithAgentRepository) FindByID(id uint) (*entity.ChatThreadWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.ChatThreadWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockChatThreadWithAgentRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockChatThreadWithAgentRepository)(nil).FindByID), id)
}

// GetByGroupID mocks base method.
func (m *MockChatThreadWithAgentRepository) GetByGroupID(groupID uint) ([]*entity.ChatThreadWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGroupID", groupID)
	ret0, _ := ret[0].([]*entity.ChatThreadWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGroupID indicates an expected call of GetByGroupID.
func (mr *MockChatThreadWithAgentRepositoryMockRecorder) GetByGroupID(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGroupID", reflect.TypeOf((*MockChatThreadWithAgentRepository)(nil).GetByGroupID), groupID)
}

// MockChatMessageWithAgentRepository is a mock of ChatMessageWithAgentRepository interface.
type MockChatMessageWithAgentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatMessageWithAgentRepositoryMockRecorder
}

// MockChatMessageWithAgentRepositoryMockRecorder is the mock recorder for MockChatMessageWithAgentRepository.
type MockChatMessageWithAgentRepositoryMockRecorder struct {
	mock *MockChatMessageWithAgentRepository
}

// NewMockChatMessageWithAgentRepository creates a new mock instance.
func NewMockChatMessageWithAgentRepository(ctrl *gomock.Controller) *MockChatMessageWithAgentRepository {
	mock := &MockChatMessageWithAgentRepository{ctrl: ctrl}
	mock.recorder = &MockChatMessageWithAgentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatMessageWithAgentRepository) EXPECT() *MockChatMessageWithAgentRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockChatMessageWithAgentRepository) All() ([]*entity.ChatMessageWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.ChatMessageWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockChatMessageWithAgentRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockChatMessageWithAgentRepository)(nil).All))
}

// Create mocks base method.
func (m *MockChatMessageWithAgentRepository) Create(chatMessageWithAgent *entity.ChatMessageWithAgent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", chatMessageWithAgent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChatMessageWithAgentRepositoryMockRecorder) Create(chatMessageWithAgent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatMessageWithAgentRepository)(nil).Create), chatMessageWithAgent)
}

// GetByThreadID mocks base method.
func (m *MockChatMessageWithAgentRepository) GetByThreadID(threadID uint) ([]*entity.ChatMessageWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByThreadID", threadID)
	ret0, _ := ret[0].([]*entity.ChatMessageWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByThreadID indicates an expected call of GetByThreadID.
func (mr *MockChatMessageWithAgentRepositoryMockRecorder) GetByThreadID(threadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByThreadID", reflect.TypeOf((*MockChatMessageWithAgentRepository)(nil).GetByThreadID), threadID)
}

// MockChatMessageToUserWithAgentRepository is a mock of ChatMessageToUserWithAgentRepository interface.
type MockChatMessageToUserWithAgentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatMessageToUserWithAgentRepositoryMockRecorder
}

// MockChatMessageToUserWithAgentRepositoryMockRecorder is the mock recorder for MockChatMessageToUserWithAgentRepository.
type MockChatMessageToUserWithAgentRepositoryMockRecorder struct {
	mock *MockChatMessageToUserWithAgentRepository
}

// NewMockChatMessageToUserWithAgentRepository creates a new mock instance.
func NewMockChatMessageToUserWithAgentRepository(ctrl *gomock.Controller) *MockChatMessageToUserWithAgentRepository {
	mock := &MockChatMessageToUserWithAgentRepository{ctrl: ctrl}
	mock.recorder = &MockChatMessageToUserWithAgentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatMessageToUserWithAgentRepository) EXPECT() *MockChatMessageToUserWithAgentRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockChatMessageToUserWithAgentRepository) All() ([]*entity.ChatMessageToUserWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.ChatMessageToUserWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockChatMessageToUserWithAgentRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockChatMessageToUserWithAgentRepository)(nil).All))
}

// Create mocks base method.
func (m *MockChatMessageToUserWithAgentRepository) Create(chatMessageToUser *entity.ChatMessageToUserWithAgent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", chatMessageToUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChatMessageToUserWithAgentRepositoryMockRecorder) Create(chatMessageToUser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatMessageToUserWithAgentRepository)(nil).Create), chatMessageToUser)
}

// GetByAgentStaffIDAndUnwatched mocks base method.
func (m *MockChatMessageToUserWithAgentRepository) GetByAgentStaffIDAndUnwatched(agentStaffID uint) ([]*entity.ChatMessageToUserWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentStaffIDAndUnwatched", agentStaffID)
	ret0, _ := ret[0].([]*entity.ChatMessageToUserWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentStaffIDAndUnwatched indicates an expected call of GetByAgentStaffIDAndUnwatched.
func (mr *MockChatMessageToUserWithAgentRepositoryMockRecorder) GetByAgentStaffIDAndUnwatched(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentStaffIDAndUnwatched", reflect.TypeOf((*MockChatMessageToUserWithAgentRepository)(nil).GetByAgentStaffIDAndUnwatched), agentStaffID)
}

// GetByGroupIDAndUnwatched mocks base method.
func (m *MockChatMessageToUserWithAgentRepository) GetByGroupIDAndUnwatched(groupID, agentStaffID uint) ([]*entity.ChatMessageToUserWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGroupIDAndUnwatched", groupID, agentStaffID)
	ret0, _ := ret[0].([]*entity.ChatMessageToUserWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGroupIDAndUnwatched indicates an expected call of GetByGroupIDAndUnwatched.
func (mr *MockChatMessageToUserWithAgentRepositoryMockRecorder) GetByGroupIDAndUnwatched(groupID, agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGroupIDAndUnwatched", reflect.TypeOf((*MockChatMessageToUserWithAgentRepository)(nil).GetByGroupIDAndUnwatched), groupID, agentStaffID)
}

// GetByMessageIDList mocks base method.
func (m *MockChatMessageToUserWithAgentRepository) GetByMessageIDList(idList []uint) ([]*entity.ChatMessageToUserWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMessageIDList", idList)
	ret0, _ := ret[0].([]*entity.ChatMessageToUserWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMessageIDList indicates an expected call of GetByMessageIDList.
func (mr *MockChatMessageToUserWithAgentRepositoryMockRecorder) GetByMessageIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMessageIDList", reflect.TypeOf((*MockChatMessageToUserWithAgentRepository)(nil).GetByMessageIDList), idList)
}

// GetByThreadID mocks base method.
func (m *MockChatMessageToUserWithAgentRepository) GetByThreadID(threadID uint) ([]*entity.ChatMessageToUserWithAgent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByThreadID", threadID)
	ret0, _ := ret[0].([]*entity.ChatMessageToUserWithAgent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByThreadID indicates an expected call of GetByThreadID.
func (mr *MockChatMessageToUserWithAgentRepositoryMockRecorder) GetByThreadID(threadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByThreadID", reflect.TypeOf((*MockChatMessageToUserWithAgentRepository)(nil).GetByThreadID), threadID)
}

// UpdateWatchedAtByThreadID mocks base method.
func (m *MockChatMessageToUserWithAgentRepository) UpdateWatchedAtByThreadID(threadID, agentStaffID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWatchedAtByThreadID", threadID, agentStaffID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWatchedAtByThreadID indicates an expected call of UpdateWatchedAtByThreadID.
func (mr *MockChatMessageToUserWithAgentRepositoryMockRecorder) UpdateWatchedAtByThreadID(threadID, agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWatchedAtByThreadID", reflect.TypeOf((*MockChatMessageToUserWithAgentRepository)(nil).UpdateWatchedAtByThreadID), threadID, agentStaffID)
}

// MockInterviewTaskGroupRepository is a mock of InterviewTaskGroupRepository interface.
type MockInterviewTaskGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInterviewTaskGroupRepositoryMockRecorder
}

// MockInterviewTaskGroupRepositoryMockRecorder is the mock recorder for MockInterviewTaskGroupRepository.
type MockInterviewTaskGroupRepositoryMockRecorder struct {
	mock *MockInterviewTaskGroupRepository
}

// NewMockInterviewTaskGroupRepository creates a new mock instance.
func NewMockInterviewTaskGroupRepository(ctrl *gomock.Controller) *MockInterviewTaskGroupRepository {
	mock := &MockInterviewTaskGroupRepository{ctrl: ctrl}
	mock.recorder = &MockInterviewTaskGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterviewTaskGroupRepository) EXPECT() *MockInterviewTaskGroupRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInterviewTaskGroupRepository) Create(interviewTaskGroup *entity.InterviewTaskGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", interviewTaskGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) Create(interviewTaskGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).Create), interviewTaskGroup)
}

// FindByAgentIDAndJobSeekerID mocks base method.
func (m *MockInterviewTaskGroupRepository) FindByAgentIDAndJobSeekerID(agentID, jobSeekerID uint) (*entity.InterviewTaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAgentIDAndJobSeekerID", agentID, jobSeekerID)
	ret0, _ := ret[0].(*entity.InterviewTaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAgentIDAndJobSeekerID indicates an expected call of FindByAgentIDAndJobSeekerID.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) FindByAgentIDAndJobSeekerID(agentID, jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAgentIDAndJobSeekerID", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).FindByAgentIDAndJobSeekerID), agentID, jobSeekerID)
}

// FindByID mocks base method.
func (m *MockInterviewTaskGroupRepository) FindByID(id uint) (*entity.InterviewTaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.InterviewTaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).FindByID), id)
}

// GetByStaffIDAndPeriod mocks base method.
func (m *MockInterviewTaskGroupRepository) GetByStaffIDAndPeriod(staffID uint, startDate, endDate time.Time) ([]*entity.InterviewTaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffIDAndPeriod", staffID, startDate, endDate)
	ret0, _ := ret[0].([]*entity.InterviewTaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffIDAndPeriod indicates an expected call of GetByStaffIDAndPeriod.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) GetByStaffIDAndPeriod(staffID, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffIDAndPeriod", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).GetByStaffIDAndPeriod), staffID, startDate, endDate)
}

// GetByStaffIDAndPeriodByStaffIDList mocks base method.
func (m *MockInterviewTaskGroupRepository) GetByStaffIDAndPeriodByStaffIDList(idList []uint, startDate, endDate time.Time) ([]*entity.InterviewTaskGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffIDAndPeriodByStaffIDList", idList, startDate, endDate)
	ret0, _ := ret[0].([]*entity.InterviewTaskGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffIDAndPeriodByStaffIDList indicates an expected call of GetByStaffIDAndPeriodByStaffIDList.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) GetByStaffIDAndPeriodByStaffIDList(idList, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffIDAndPeriodByStaffIDList", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).GetByStaffIDAndPeriodByStaffIDList), idList, startDate, endDate)
}

// GetInterviewOfferAcceptancePerformanceCountByAgentIDAndPeriod mocks base method.
func (m *MockInterviewTaskGroupRepository) GetInterviewOfferAcceptancePerformanceCountByAgentIDAndPeriod(agentID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewOfferAcceptancePerformanceCountByAgentIDAndPeriod", agentID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewOfferAcceptancePerformanceCountByAgentIDAndPeriod indicates an expected call of GetInterviewOfferAcceptancePerformanceCountByAgentIDAndPeriod.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) GetInterviewOfferAcceptancePerformanceCountByAgentIDAndPeriod(agentID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewOfferAcceptancePerformanceCountByAgentIDAndPeriod", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).GetInterviewOfferAcceptancePerformanceCountByAgentIDAndPeriod), agentID, startMonth, endMonth)
}

// GetInterviewOfferAcceptancePerformanceCountByAgentIDAndSalesMonth mocks base method.
func (m *MockInterviewTaskGroupRepository) GetInterviewOfferAcceptancePerformanceCountByAgentIDAndSalesMonth(agentID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewOfferAcceptancePerformanceCountByAgentIDAndSalesMonth", agentID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewOfferAcceptancePerformanceCountByAgentIDAndSalesMonth indicates an expected call of GetInterviewOfferAcceptancePerformanceCountByAgentIDAndSalesMonth.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) GetInterviewOfferAcceptancePerformanceCountByAgentIDAndSalesMonth(agentID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewOfferAcceptancePerformanceCountByAgentIDAndSalesMonth", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).GetInterviewOfferAcceptancePerformanceCountByAgentIDAndSalesMonth), agentID, saleMonth)
}

// GetInterviewOfferAcceptancePerformanceCountByStaffIDAndPeriod mocks base method.
func (m *MockInterviewTaskGroupRepository) GetInterviewOfferAcceptancePerformanceCountByStaffIDAndPeriod(staffID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewOfferAcceptancePerformanceCountByStaffIDAndPeriod", staffID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewOfferAcceptancePerformanceCountByStaffIDAndPeriod indicates an expected call of GetInterviewOfferAcceptancePerformanceCountByStaffIDAndPeriod.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) GetInterviewOfferAcceptancePerformanceCountByStaffIDAndPeriod(staffID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewOfferAcceptancePerformanceCountByStaffIDAndPeriod", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).GetInterviewOfferAcceptancePerformanceCountByStaffIDAndPeriod), staffID, startMonth, endMonth)
}

// GetInterviewOfferAcceptancePerformanceCountByStaffIDAndSalesMonth mocks base method.
func (m *MockInterviewTaskGroupRepository) GetInterviewOfferAcceptancePerformanceCountByStaffIDAndSalesMonth(staffID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewOfferAcceptancePerformanceCountByStaffIDAndSalesMonth", staffID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewOfferAcceptancePerformanceCountByStaffIDAndSalesMonth indicates an expected call of GetInterviewOfferAcceptancePerformanceCountByStaffIDAndSalesMonth.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) GetInterviewOfferAcceptancePerformanceCountByStaffIDAndSalesMonth(staffID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewOfferAcceptancePerformanceCountByStaffIDAndSalesMonth", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).GetInterviewOfferAcceptancePerformanceCountByStaffIDAndSalesMonth), staffID, saleMonth)
}

// GetInterviewPerformanceCountByAgentIDAndPeriod mocks base method.
func (m *MockInterviewTaskGroupRepository) GetInterviewPerformanceCountByAgentIDAndPeriod(agentID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewPerformanceCountByAgentIDAndPeriod", agentID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewPerformanceCountByAgentIDAndPeriod indicates an expected call of GetInterviewPerformanceCountByAgentIDAndPeriod.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) GetInterviewPerformanceCountByAgentIDAndPeriod(agentID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewPerformanceCountByAgentIDAndPeriod", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).GetInterviewPerformanceCountByAgentIDAndPeriod), agentID, startMonth, endMonth)
}

// GetInterviewPerformanceCountByAgentIDAndSalesMonth mocks base method.
func (m *MockInterviewTaskGroupRepository) GetInterviewPerformanceCountByAgentIDAndSalesMonth(agentID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewPerformanceCountByAgentIDAndSalesMonth", agentID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewPerformanceCountByAgentIDAndSalesMonth indicates an expected call of GetInterviewPerformanceCountByAgentIDAndSalesMonth.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) GetInterviewPerformanceCountByAgentIDAndSalesMonth(agentID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewPerformanceCountByAgentIDAndSalesMonth", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).GetInterviewPerformanceCountByAgentIDAndSalesMonth), agentID, saleMonth)
}

// GetInterviewPerformanceCountByStaffIDAndPeriod mocks base method.
func (m *MockInterviewTaskGroupRepository) GetInterviewPerformanceCountByStaffIDAndPeriod(staffID uint, startMonth, endMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewPerformanceCountByStaffIDAndPeriod", staffID, startMonth, endMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewPerformanceCountByStaffIDAndPeriod indicates an expected call of GetInterviewPerformanceCountByStaffIDAndPeriod.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) GetInterviewPerformanceCountByStaffIDAndPeriod(staffID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewPerformanceCountByStaffIDAndPeriod", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).GetInterviewPerformanceCountByStaffIDAndPeriod), staffID, startMonth, endMonth)
}

// GetInterviewPerformanceCountByStaffIDAndSalesMonth mocks base method.
func (m *MockInterviewTaskGroupRepository) GetInterviewPerformanceCountByStaffIDAndSalesMonth(staffID uint, saleMonth string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewPerformanceCountByStaffIDAndSalesMonth", staffID, saleMonth)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewPerformanceCountByStaffIDAndSalesMonth indicates an expected call of GetInterviewPerformanceCountByStaffIDAndSalesMonth.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) GetInterviewPerformanceCountByStaffIDAndSalesMonth(staffID, saleMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewPerformanceCountByStaffIDAndSalesMonth", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).GetInterviewPerformanceCountByStaffIDAndSalesMonth), staffID, saleMonth)
}

// UpdateInterviewDate mocks base method.
func (m *MockInterviewTaskGroupRepository) UpdateInterviewDate(id uint, interviewDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInterviewDate", id, interviewDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInterviewDate indicates an expected call of UpdateInterviewDate.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) UpdateInterviewDate(id, interviewDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInterviewDate", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).UpdateInterviewDate), id, interviewDate)
}

// UpdateLastRequestAt mocks base method.
func (m *MockInterviewTaskGroupRepository) UpdateLastRequestAt(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastRequestAt", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastRequestAt indicates an expected call of UpdateLastRequestAt.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) UpdateLastRequestAt(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastRequestAt", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).UpdateLastRequestAt), id)
}

// UpdateLastWatchedAt mocks base method.
func (m *MockInterviewTaskGroupRepository) UpdateLastWatchedAt(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastWatchedAt", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastWatchedAt indicates an expected call of UpdateLastWatchedAt.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) UpdateLastWatchedAt(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastWatchedAt", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).UpdateLastWatchedAt), id)
}

// UpdateNormalAndFirstInterviewDate mocks base method.
func (m *MockInterviewTaskGroupRepository) UpdateNormalAndFirstInterviewDate(id uint, normalInterviewDate, firstInterviewDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNormalAndFirstInterviewDate", id, normalInterviewDate, firstInterviewDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNormalAndFirstInterviewDate indicates an expected call of UpdateNormalAndFirstInterviewDate.
func (mr *MockInterviewTaskGroupRepositoryMockRecorder) UpdateNormalAndFirstInterviewDate(id, normalInterviewDate, firstInterviewDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNormalAndFirstInterviewDate", reflect.TypeOf((*MockInterviewTaskGroupRepository)(nil).UpdateNormalAndFirstInterviewDate), id, normalInterviewDate, firstInterviewDate)
}

// MockInterviewTaskRepository is a mock of InterviewTaskRepository interface.
type MockInterviewTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInterviewTaskRepositoryMockRecorder
}

// MockInterviewTaskRepositoryMockRecorder is the mock recorder for MockInterviewTaskRepository.
type MockInterviewTaskRepositoryMockRecorder struct {
	mock *MockInterviewTaskRepository
}

// NewMockInterviewTaskRepository creates a new mock instance.
func NewMockInterviewTaskRepository(ctrl *gomock.Controller) *MockInterviewTaskRepository {
	mock := &MockInterviewTaskRepository{ctrl: ctrl}
	mock.recorder = &MockInterviewTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterviewTaskRepository) EXPECT() *MockInterviewTaskRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInterviewTaskRepository) Create(interviewTask *entity.InterviewTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", interviewTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInterviewTaskRepositoryMockRecorder) Create(interviewTask any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterviewTaskRepository)(nil).Create), interviewTask)
}

// Delete mocks base method.
func (m *MockInterviewTaskRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInterviewTaskRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInterviewTaskRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockInterviewTaskRepository) FindByID(id uint) (*entity.InterviewTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.InterviewTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockInterviewTaskRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockInterviewTaskRepository)(nil).FindByID), id)
}

// FindLatestByAgentIDAndJobSeekerID mocks base method.
func (m *MockInterviewTaskRepository) FindLatestByAgentIDAndJobSeekerID(agentID, jobSeekerID uint) (*entity.InterviewTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestByAgentIDAndJobSeekerID", agentID, jobSeekerID)
	ret0, _ := ret[0].(*entity.InterviewTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestByAgentIDAndJobSeekerID indicates an expected call of FindLatestByAgentIDAndJobSeekerID.
func (mr *MockInterviewTaskRepositoryMockRecorder) FindLatestByAgentIDAndJobSeekerID(agentID, jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestByAgentIDAndJobSeekerID", reflect.TypeOf((*MockInterviewTaskRepository)(nil).FindLatestByAgentIDAndJobSeekerID), agentID, jobSeekerID)
}

// GetByGroupID mocks base method.
func (m *MockInterviewTaskRepository) GetByGroupID(groupID uint) ([]*entity.InterviewTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGroupID", groupID)
	ret0, _ := ret[0].([]*entity.InterviewTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGroupID indicates an expected call of GetByGroupID.
func (mr *MockInterviewTaskRepositoryMockRecorder) GetByGroupID(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGroupID", reflect.TypeOf((*MockInterviewTaskRepository)(nil).GetByGroupID), groupID)
}

// GetLatestAdjustmentByAgentID mocks base method.
func (m *MockInterviewTaskRepository) GetLatestAdjustmentByAgentID(agentID uint) ([]*entity.InterviewTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAdjustmentByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.InterviewTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAdjustmentByAgentID indicates an expected call of GetLatestAdjustmentByAgentID.
func (mr *MockInterviewTaskRepositoryMockRecorder) GetLatestAdjustmentByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAdjustmentByAgentID", reflect.TypeOf((*MockInterviewTaskRepository)(nil).GetLatestAdjustmentByAgentID), agentID)
}

// GetLatestConfirmationByAgentID mocks base method.
func (m *MockInterviewTaskRepository) GetLatestConfirmationByAgentID(agentID uint) ([]*entity.InterviewTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestConfirmationByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.InterviewTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestConfirmationByAgentID indicates an expected call of GetLatestConfirmationByAgentID.
func (mr *MockInterviewTaskRepositoryMockRecorder) GetLatestConfirmationByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestConfirmationByAgentID", reflect.TypeOf((*MockInterviewTaskRepository)(nil).GetLatestConfirmationByAgentID), agentID)
}

// MockInterviewAdjustmentTemplateRepository is a mock of InterviewAdjustmentTemplateRepository interface.
type MockInterviewAdjustmentTemplateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInterviewAdjustmentTemplateRepositoryMockRecorder
}

// MockInterviewAdjustmentTemplateRepositoryMockRecorder is the mock recorder for MockInterviewAdjustmentTemplateRepository.
type MockInterviewAdjustmentTemplateRepositoryMockRecorder struct {
	mock *MockInterviewAdjustmentTemplateRepository
}

// NewMockInterviewAdjustmentTemplateRepository creates a new mock instance.
func NewMockInterviewAdjustmentTemplateRepository(ctrl *gomock.Controller) *MockInterviewAdjustmentTemplateRepository {
	mock := &MockInterviewAdjustmentTemplateRepository{ctrl: ctrl}
	mock.recorder = &MockInterviewAdjustmentTemplateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterviewAdjustmentTemplateRepository) EXPECT() *MockInterviewAdjustmentTemplateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInterviewAdjustmentTemplateRepository) Create(template *entity.InterviewAdjustmentTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", template)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInterviewAdjustmentTemplateRepositoryMockRecorder) Create(template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInterviewAdjustmentTemplateRepository)(nil).Create), template)
}

// Delete mocks base method.
func (m *MockInterviewAdjustmentTemplateRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInterviewAdjustmentTemplateRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInterviewAdjustmentTemplateRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockInterviewAdjustmentTemplateRepository) FindByID(id uint) (*entity.InterviewAdjustmentTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.InterviewAdjustmentTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockInterviewAdjustmentTemplateRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockInterviewAdjustmentTemplateRepository)(nil).FindByID), id)
}

// GetByAgentID mocks base method.
func (m *MockInterviewAdjustmentTemplateRepository) GetByAgentID(agentID uint) ([]*entity.InterviewAdjustmentTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.InterviewAdjustmentTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockInterviewAdjustmentTemplateRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockInterviewAdjustmentTemplateRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentIDAndSendScene mocks base method.
func (m *MockInterviewAdjustmentTemplateRepository) GetByAgentIDAndSendScene(agentID, sendScene uint) ([]*entity.InterviewAdjustmentTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDAndSendScene", agentID, sendScene)
	ret0, _ := ret[0].([]*entity.InterviewAdjustmentTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDAndSendScene indicates an expected call of GetByAgentIDAndSendScene.
func (mr *MockInterviewAdjustmentTemplateRepositoryMockRecorder) GetByAgentIDAndSendScene(agentID, sendScene any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDAndSendScene", reflect.TypeOf((*MockInterviewAdjustmentTemplateRepository)(nil).GetByAgentIDAndSendScene), agentID, sendScene)
}

// Update mocks base method.
func (m *MockInterviewAdjustmentTemplateRepository) Update(id uint, template *entity.InterviewAdjustmentTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockInterviewAdjustmentTemplateRepositoryMockRecorder) Update(id, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInterviewAdjustmentTemplateRepository)(nil).Update), id, template)
}

// MockScoutServiceRepository is a mock of ScoutServiceRepository interface.
type MockScoutServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScoutServiceRepositoryMockRecorder
}

// MockScoutServiceRepositoryMockRecorder is the mock recorder for MockScoutServiceRepository.
type MockScoutServiceRepositoryMockRecorder struct {
	mock *MockScoutServiceRepository
}

// NewMockScoutServiceRepository creates a new mock instance.
func NewMockScoutServiceRepository(ctrl *gomock.Controller) *MockScoutServiceRepository {
	mock := &MockScoutServiceRepository{ctrl: ctrl}
	mock.recorder = &MockScoutServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoutServiceRepository) EXPECT() *MockScoutServiceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScoutServiceRepository) Create(scoutService *entity.ScoutService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", scoutService)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScoutServiceRepositoryMockRecorder) Create(scoutService any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScoutServiceRepository)(nil).Create), scoutService)
}

// Delete mocks base method.
func (m *MockScoutServiceRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockScoutServiceRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScoutServiceRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockScoutServiceRepository) FindByID(id uint) (*entity.ScoutService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.ScoutService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockScoutServiceRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockScoutServiceRepository)(nil).FindByID), id)
}

// GetByAgentID mocks base method.
func (m *MockScoutServiceRepository) GetByAgentID(agentID uint) ([]*entity.ScoutService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.ScoutService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockScoutServiceRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockScoutServiceRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentRobotID mocks base method.
func (m *MockScoutServiceRepository) GetByAgentRobotID(agentRobotID uint) ([]*entity.ScoutService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentRobotID", agentRobotID)
	ret0, _ := ret[0].([]*entity.ScoutService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentRobotID indicates an expected call of GetByAgentRobotID.
func (mr *MockScoutServiceRepositoryMockRecorder) GetByAgentRobotID(agentRobotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentRobotID", reflect.TypeOf((*MockScoutServiceRepository)(nil).GetByAgentRobotID), agentRobotID)
}

// Update mocks base method.
func (m *MockScoutServiceRepository) Update(id uint, scoutService *entity.ScoutService) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, scoutService)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockScoutServiceRepositoryMockRecorder) Update(id, scoutService any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScoutServiceRepository)(nil).Update), id, scoutService)
}

// UpdateLastSendCount mocks base method.
func (m *MockScoutServiceRepository) UpdateLastSendCount(id, lastSendCount uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastSendCount", id, lastSendCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastSendCount indicates an expected call of UpdateLastSendCount.
func (mr *MockScoutServiceRepositoryMockRecorder) UpdateLastSendCount(id, lastSendCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastSendCount", reflect.TypeOf((*MockScoutServiceRepository)(nil).UpdateLastSendCount), id, lastSendCount)
}

// UpdatePassword mocks base method.
func (m *MockScoutServiceRepository) UpdatePassword(param entity.UpdateScoutServicePasswordParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", param)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockScoutServiceRepositoryMockRecorder) UpdatePassword(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockScoutServiceRepository)(nil).UpdatePassword), param)
}

// MockScoutServiceTemplateRepository is a mock of ScoutServiceTemplateRepository interface.
type MockScoutServiceTemplateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScoutServiceTemplateRepositoryMockRecorder
}

// MockScoutServiceTemplateRepositoryMockRecorder is the mock recorder for MockScoutServiceTemplateRepository.
type MockScoutServiceTemplateRepositoryMockRecorder struct {
	mock *MockScoutServiceTemplateRepository
}

// NewMockScoutServiceTemplateRepository creates a new mock instance.
func NewMockScoutServiceTemplateRepository(ctrl *gomock.Controller) *MockScoutServiceTemplateRepository {
	mock := &MockScoutServiceTemplateRepository{ctrl: ctrl}
	mock.recorder = &MockScoutServiceTemplateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoutServiceTemplateRepository) EXPECT() *MockScoutServiceTemplateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScoutServiceTemplateRepository) Create(template *entity.ScoutServiceTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", template)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScoutServiceTemplateRepositoryMockRecorder) Create(template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScoutServiceTemplateRepository)(nil).Create), template)
}

// DeleteByScoutServiceID mocks base method.
func (m *MockScoutServiceTemplateRepository) DeleteByScoutServiceID(scoutServiceID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByScoutServiceID", scoutServiceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByScoutServiceID indicates an expected call of DeleteByScoutServiceID.
func (mr *MockScoutServiceTemplateRepositoryMockRecorder) DeleteByScoutServiceID(scoutServiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByScoutServiceID", reflect.TypeOf((*MockScoutServiceTemplateRepository)(nil).DeleteByScoutServiceID), scoutServiceID)
}

// FindByID mocks base method.
func (m *MockScoutServiceTemplateRepository) FindByID(id uint) (*entity.ScoutServiceTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.ScoutServiceTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockScoutServiceTemplateRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockScoutServiceTemplateRepository)(nil).FindByID), id)
}

// GetByAgentID mocks base method.
func (m *MockScoutServiceTemplateRepository) GetByAgentID(agentID uint) ([]*entity.ScoutServiceTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.ScoutServiceTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockScoutServiceTemplateRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockScoutServiceTemplateRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentRobotID mocks base method.
func (m *MockScoutServiceTemplateRepository) GetByAgentRobotID(agentRobotID uint) ([]*entity.ScoutServiceTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentRobotID", agentRobotID)
	ret0, _ := ret[0].([]*entity.ScoutServiceTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentRobotID indicates an expected call of GetByAgentRobotID.
func (mr *MockScoutServiceTemplateRepositoryMockRecorder) GetByAgentRobotID(agentRobotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentRobotID", reflect.TypeOf((*MockScoutServiceTemplateRepository)(nil).GetByAgentRobotID), agentRobotID)
}

// GetByIDList mocks base method.
func (m *MockScoutServiceTemplateRepository) GetByIDList(idList []uint) ([]*entity.ScoutServiceTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.ScoutServiceTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockScoutServiceTemplateRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockScoutServiceTemplateRepository)(nil).GetByIDList), idList)
}

// GetByScoutServiceID mocks base method.
func (m *MockScoutServiceTemplateRepository) GetByScoutServiceID(scoutServiceID uint) ([]*entity.ScoutServiceTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByScoutServiceID", scoutServiceID)
	ret0, _ := ret[0].([]*entity.ScoutServiceTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByScoutServiceID indicates an expected call of GetByScoutServiceID.
func (mr *MockScoutServiceTemplateRepositoryMockRecorder) GetByScoutServiceID(scoutServiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByScoutServiceID", reflect.TypeOf((*MockScoutServiceTemplateRepository)(nil).GetByScoutServiceID), scoutServiceID)
}

// UpdateLastSend mocks base method.
func (m *MockScoutServiceTemplateRepository) UpdateLastSend(id, lastSendCount uint, lastSendAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastSend", id, lastSendCount, lastSendAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastSend indicates an expected call of UpdateLastSend.
func (mr *MockScoutServiceTemplateRepositoryMockRecorder) UpdateLastSend(id, lastSendCount, lastSendAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastSend", reflect.TypeOf((*MockScoutServiceTemplateRepository)(nil).UpdateLastSend), id, lastSendCount, lastSendAt)
}

// MockScoutServiceGetEntryTimeRepository is a mock of ScoutServiceGetEntryTimeRepository interface.
type MockScoutServiceGetEntryTimeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScoutServiceGetEntryTimeRepositoryMockRecorder
}

// MockScoutServiceGetEntryTimeRepositoryMockRecorder is the mock recorder for MockScoutServiceGetEntryTimeRepository.
type MockScoutServiceGetEntryTimeRepositoryMockRecorder struct {
	mock *MockScoutServiceGetEntryTimeRepository
}

// NewMockScoutServiceGetEntryTimeRepository creates a new mock instance.
func NewMockScoutServiceGetEntryTimeRepository(ctrl *gomock.Controller) *MockScoutServiceGetEntryTimeRepository {
	mock := &MockScoutServiceGetEntryTimeRepository{ctrl: ctrl}
	mock.recorder = &MockScoutServiceGetEntryTimeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScoutServiceGetEntryTimeRepository) EXPECT() *MockScoutServiceGetEntryTimeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScoutServiceGetEntryTimeRepository) Create(scoutServiceGetEntryTime *entity.ScoutServiceGetEntryTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", scoutServiceGetEntryTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScoutServiceGetEntryTimeRepositoryMockRecorder) Create(scoutServiceGetEntryTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScoutServiceGetEntryTimeRepository)(nil).Create), scoutServiceGetEntryTime)
}

// DeleteByScoutServiceID mocks base method.
func (m *MockScoutServiceGetEntryTimeRepository) DeleteByScoutServiceID(scoutServiceID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByScoutServiceID", scoutServiceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByScoutServiceID indicates an expected call of DeleteByScoutServiceID.
func (mr *MockScoutServiceGetEntryTimeRepositoryMockRecorder) DeleteByScoutServiceID(scoutServiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByScoutServiceID", reflect.TypeOf((*MockScoutServiceGetEntryTimeRepository)(nil).DeleteByScoutServiceID), scoutServiceID)
}

// FindByID mocks base method.
func (m *MockScoutServiceGetEntryTimeRepository) FindByID(id uint) (*entity.ScoutServiceGetEntryTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.ScoutServiceGetEntryTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockScoutServiceGetEntryTimeRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockScoutServiceGetEntryTimeRepository)(nil).FindByID), id)
}

// GetByAgentID mocks base method.
func (m *MockScoutServiceGetEntryTimeRepository) GetByAgentID(agentID uint) ([]*entity.ScoutServiceGetEntryTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.ScoutServiceGetEntryTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockScoutServiceGetEntryTimeRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockScoutServiceGetEntryTimeRepository)(nil).GetByAgentID), agentID)
}

// GetByAgentRobotID mocks base method.
func (m *MockScoutServiceGetEntryTimeRepository) GetByAgentRobotID(agentRobotID uint) ([]*entity.ScoutServiceGetEntryTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentRobotID", agentRobotID)
	ret0, _ := ret[0].([]*entity.ScoutServiceGetEntryTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentRobotID indicates an expected call of GetByAgentRobotID.
func (mr *MockScoutServiceGetEntryTimeRepositoryMockRecorder) GetByAgentRobotID(agentRobotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentRobotID", reflect.TypeOf((*MockScoutServiceGetEntryTimeRepository)(nil).GetByAgentRobotID), agentRobotID)
}

// GetByScoutServiceID mocks base method.
func (m *MockScoutServiceGetEntryTimeRepository) GetByScoutServiceID(scoutServiceID uint) ([]*entity.ScoutServiceGetEntryTime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByScoutServiceID", scoutServiceID)
	ret0, _ := ret[0].([]*entity.ScoutServiceGetEntryTime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByScoutServiceID indicates an expected call of GetByScoutServiceID.
func (mr *MockScoutServiceGetEntryTimeRepositoryMockRecorder) GetByScoutServiceID(scoutServiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByScoutServiceID", reflect.TypeOf((*MockScoutServiceGetEntryTimeRepository)(nil).GetByScoutServiceID), scoutServiceID)
}

// MockSaleRepository is a mock of SaleRepository interface.
type MockSaleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSaleRepositoryMockRecorder
}

// MockSaleRepositoryMockRecorder is the mock recorder for MockSaleRepository.
type MockSaleRepositoryMockRecorder struct {
	mock *MockSaleRepository
}

// NewMockSaleRepository creates a new mock instance.
func NewMockSaleRepository(ctrl *gomock.Controller) *MockSaleRepository {
	mock := &MockSaleRepository{ctrl: ctrl}
	mock.recorder = &MockSaleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaleRepository) EXPECT() *MockSaleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSaleRepository) Create(sale *entity.Sale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", sale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSaleRepositoryMockRecorder) Create(sale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSaleRepository)(nil).Create), sale)
}

// FindByID mocks base method.
func (m *MockSaleRepository) FindByID(id uint) (*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSaleRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSaleRepository)(nil).FindByID), id)
}

// FindByJobSeekerID mocks base method.
func (m *MockSaleRepository) FindByJobSeekerID(seeker_id uint) (*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByJobSeekerID", seeker_id)
	ret0, _ := ret[0].(*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByJobSeekerID indicates an expected call of FindByJobSeekerID.
func (mr *MockSaleRepositoryMockRecorder) FindByJobSeekerID(seeker_id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByJobSeekerID", reflect.TypeOf((*MockSaleRepository)(nil).FindByJobSeekerID), seeker_id)
}

// FindByJobSeekerIDAndJobInformationID mocks base method.
func (m *MockSaleRepository) FindByJobSeekerIDAndJobInformationID(seekerID, jobInfoID uint) (*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByJobSeekerIDAndJobInformationID", seekerID, jobInfoID)
	ret0, _ := ret[0].(*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByJobSeekerIDAndJobInformationID indicates an expected call of FindByJobSeekerIDAndJobInformationID.
func (mr *MockSaleRepositoryMockRecorder) FindByJobSeekerIDAndJobInformationID(seekerID, jobInfoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByJobSeekerIDAndJobInformationID", reflect.TypeOf((*MockSaleRepository)(nil).FindByJobSeekerIDAndJobInformationID), seekerID, jobInfoID)
}

// GetBillingByAgentIDAndMonth mocks base method.
func (m *MockSaleRepository) GetBillingByAgentIDAndMonth(agentID uint, month string) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingByAgentIDAndMonth", agentID, month)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingByAgentIDAndMonth indicates an expected call of GetBillingByAgentIDAndMonth.
func (mr *MockSaleRepositoryMockRecorder) GetBillingByAgentIDAndMonth(agentID, month any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingByAgentIDAndMonth", reflect.TypeOf((*MockSaleRepository)(nil).GetBillingByAgentIDAndMonth), agentID, month)
}

// GetBillingByAgentIDAndPeriod mocks base method.
func (m *MockSaleRepository) GetBillingByAgentIDAndPeriod(agentID uint, startMonth, endMonth string) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingByAgentIDAndPeriod", agentID, startMonth, endMonth)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingByAgentIDAndPeriod indicates an expected call of GetBillingByAgentIDAndPeriod.
func (mr *MockSaleRepositoryMockRecorder) GetBillingByAgentIDAndPeriod(agentID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingByAgentIDAndPeriod", reflect.TypeOf((*MockSaleRepository)(nil).GetBillingByAgentIDAndPeriod), agentID, startMonth, endMonth)
}

// GetBillingByStaffIDAndMonth mocks base method.
func (m *MockSaleRepository) GetBillingByStaffIDAndMonth(agentStaffID uint, thisMonth string) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingByStaffIDAndMonth", agentStaffID, thisMonth)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingByStaffIDAndMonth indicates an expected call of GetBillingByStaffIDAndMonth.
func (mr *MockSaleRepositoryMockRecorder) GetBillingByStaffIDAndMonth(agentStaffID, thisMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingByStaffIDAndMonth", reflect.TypeOf((*MockSaleRepository)(nil).GetBillingByStaffIDAndMonth), agentStaffID, thisMonth)
}

// GetBillingByStaffIDAndPeriod mocks base method.
func (m *MockSaleRepository) GetBillingByStaffIDAndPeriod(staffID uint, startMonth, endMonth string) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingByStaffIDAndPeriod", staffID, startMonth, endMonth)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingByStaffIDAndPeriod indicates an expected call of GetBillingByStaffIDAndPeriod.
func (mr *MockSaleRepositoryMockRecorder) GetBillingByStaffIDAndPeriod(staffID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingByStaffIDAndPeriod", reflect.TypeOf((*MockSaleRepository)(nil).GetBillingByStaffIDAndPeriod), staffID, startMonth, endMonth)
}

// GetByAgentIDForCSV mocks base method.
func (m *MockSaleRepository) GetByAgentIDForCSV(agentID uint) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDForCSV", agentID)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDForCSV indicates an expected call of GetByAgentIDForCSV.
func (mr *MockSaleRepositoryMockRecorder) GetByAgentIDForCSV(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDForCSV", reflect.TypeOf((*MockSaleRepository)(nil).GetByAgentIDForCSV), agentID)
}

// GetByAgentIDForMonthly mocks base method.
func (m *MockSaleRepository) GetByAgentIDForMonthly(agentID uint, startMonth, endMonth string) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentIDForMonthly", agentID, startMonth, endMonth)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentIDForMonthly indicates an expected call of GetByAgentIDForMonthly.
func (mr *MockSaleRepositoryMockRecorder) GetByAgentIDForMonthly(agentID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentIDForMonthly", reflect.TypeOf((*MockSaleRepository)(nil).GetByAgentIDForMonthly), agentID, startMonth, endMonth)
}

// GetByAgentStaffID mocks base method.
func (m *MockSaleRepository) GetByAgentStaffID(agentStaffID uint) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentStaffID", agentStaffID)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentStaffID indicates an expected call of GetByAgentStaffID.
func (mr *MockSaleRepositoryMockRecorder) GetByAgentStaffID(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentStaffID", reflect.TypeOf((*MockSaleRepository)(nil).GetByAgentStaffID), agentStaffID)
}

// GetByIDList mocks base method.
func (m *MockSaleRepository) GetByIDList(idList []uint) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", idList)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockSaleRepositoryMockRecorder) GetByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockSaleRepository)(nil).GetByIDList), idList)
}

// GetByStaffIDForMonthly mocks base method.
func (m *MockSaleRepository) GetByStaffIDForMonthly(agentStaffID uint, startMonth, endMonth string) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffIDForMonthly", agentStaffID, startMonth, endMonth)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffIDForMonthly indicates an expected call of GetByStaffIDForMonthly.
func (mr *MockSaleRepositoryMockRecorder) GetByStaffIDForMonthly(agentStaffID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffIDForMonthly", reflect.TypeOf((*MockSaleRepository)(nil).GetByStaffIDForMonthly), agentStaffID, startMonth, endMonth)
}

// GetContractSignedByAgentIDAndMonth mocks base method.
func (m *MockSaleRepository) GetContractSignedByAgentIDAndMonth(agentID uint, month string) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractSignedByAgentIDAndMonth", agentID, month)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractSignedByAgentIDAndMonth indicates an expected call of GetContractSignedByAgentIDAndMonth.
func (mr *MockSaleRepositoryMockRecorder) GetContractSignedByAgentIDAndMonth(agentID, month any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractSignedByAgentIDAndMonth", reflect.TypeOf((*MockSaleRepository)(nil).GetContractSignedByAgentIDAndMonth), agentID, month)
}

// GetContractSignedByAgentIDAndPeriod mocks base method.
func (m *MockSaleRepository) GetContractSignedByAgentIDAndPeriod(agentID uint, startMonth, endMonth string) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractSignedByAgentIDAndPeriod", agentID, startMonth, endMonth)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractSignedByAgentIDAndPeriod indicates an expected call of GetContractSignedByAgentIDAndPeriod.
func (mr *MockSaleRepositoryMockRecorder) GetContractSignedByAgentIDAndPeriod(agentID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractSignedByAgentIDAndPeriod", reflect.TypeOf((*MockSaleRepository)(nil).GetContractSignedByAgentIDAndPeriod), agentID, startMonth, endMonth)
}

// GetContractSignedByStaffIDAndMonth mocks base method.
func (m *MockSaleRepository) GetContractSignedByStaffIDAndMonth(agentStaffID uint, thisMonth string) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractSignedByStaffIDAndMonth", agentStaffID, thisMonth)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractSignedByStaffIDAndMonth indicates an expected call of GetContractSignedByStaffIDAndMonth.
func (mr *MockSaleRepositoryMockRecorder) GetContractSignedByStaffIDAndMonth(agentStaffID, thisMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractSignedByStaffIDAndMonth", reflect.TypeOf((*MockSaleRepository)(nil).GetContractSignedByStaffIDAndMonth), agentStaffID, thisMonth)
}

// GetContractSignedByStaffIDAndPeriod mocks base method.
func (m *MockSaleRepository) GetContractSignedByStaffIDAndPeriod(staffID uint, startMonth, endMonth string) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractSignedByStaffIDAndPeriod", staffID, startMonth, endMonth)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractSignedByStaffIDAndPeriod indicates an expected call of GetContractSignedByStaffIDAndPeriod.
func (mr *MockSaleRepositoryMockRecorder) GetContractSignedByStaffIDAndPeriod(staffID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractSignedByStaffIDAndPeriod", reflect.TypeOf((*MockSaleRepository)(nil).GetContractSignedByStaffIDAndPeriod), staffID, startMonth, endMonth)
}

// GetSearchByAgent mocks base method.
func (m *MockSaleRepository) GetSearchByAgent(searchParam entity.SearchAccuracy) ([]*entity.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchByAgent", searchParam)
	ret0, _ := ret[0].([]*entity.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchByAgent indicates an expected call of GetSearchByAgent.
func (mr *MockSaleRepositoryMockRecorder) GetSearchByAgent(searchParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchByAgent", reflect.TypeOf((*MockSaleRepository)(nil).GetSearchByAgent), searchParam)
}

// Update mocks base method.
func (m *MockSaleRepository) Update(id uint, sale *entity.Sale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, sale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSaleRepositoryMockRecorder) Update(id, sale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSaleRepository)(nil).Update), id, sale)
}

// MockAgentMonthlySaleRepository is a mock of AgentMonthlySaleRepository interface.
type MockAgentMonthlySaleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMonthlySaleRepositoryMockRecorder
}

// MockAgentMonthlySaleRepositoryMockRecorder is the mock recorder for MockAgentMonthlySaleRepository.
type MockAgentMonthlySaleRepositoryMockRecorder struct {
	mock *MockAgentMonthlySaleRepository
}

// NewMockAgentMonthlySaleRepository creates a new mock instance.
func NewMockAgentMonthlySaleRepository(ctrl *gomock.Controller) *MockAgentMonthlySaleRepository {
	mock := &MockAgentMonthlySaleRepository{ctrl: ctrl}
	mock.recorder = &MockAgentMonthlySaleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentMonthlySaleRepository) EXPECT() *MockAgentMonthlySaleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAgentMonthlySaleRepository) Create(agentMonthlySale *entity.AgentMonthlySale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", agentMonthlySale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAgentMonthlySaleRepositoryMockRecorder) Create(agentMonthlySale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAgentMonthlySaleRepository)(nil).Create), agentMonthlySale)
}

// FindByManagementIDAndMonth mocks base method.
func (m *MockAgentMonthlySaleRepository) FindByManagementIDAndMonth(managementID uint, month string) (*entity.AgentMonthlySale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByManagementIDAndMonth", managementID, month)
	ret0, _ := ret[0].(*entity.AgentMonthlySale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByManagementIDAndMonth indicates an expected call of FindByManagementIDAndMonth.
func (mr *MockAgentMonthlySaleRepositoryMockRecorder) FindByManagementIDAndMonth(managementID, month any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByManagementIDAndMonth", reflect.TypeOf((*MockAgentMonthlySaleRepository)(nil).FindByManagementIDAndMonth), managementID, month)
}

// GetByManagementID mocks base method.
func (m *MockAgentMonthlySaleRepository) GetByManagementID(managementID uint) ([]*entity.AgentMonthlySale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByManagementID", managementID)
	ret0, _ := ret[0].([]*entity.AgentMonthlySale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByManagementID indicates an expected call of GetByManagementID.
func (mr *MockAgentMonthlySaleRepositoryMockRecorder) GetByManagementID(managementID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByManagementID", reflect.TypeOf((*MockAgentMonthlySaleRepository)(nil).GetByManagementID), managementID)
}

// GetByManagementIDAndPeriod mocks base method.
func (m *MockAgentMonthlySaleRepository) GetByManagementIDAndPeriod(managementID uint, startMonth, endMonth string) ([]*entity.AgentMonthlySale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByManagementIDAndPeriod", managementID, startMonth, endMonth)
	ret0, _ := ret[0].([]*entity.AgentMonthlySale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByManagementIDAndPeriod indicates an expected call of GetByManagementIDAndPeriod.
func (mr *MockAgentMonthlySaleRepositoryMockRecorder) GetByManagementIDAndPeriod(managementID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByManagementIDAndPeriod", reflect.TypeOf((*MockAgentMonthlySaleRepository)(nil).GetByManagementIDAndPeriod), managementID, startMonth, endMonth)
}

// Update mocks base method.
func (m *MockAgentMonthlySaleRepository) Update(agentMonthlySale *entity.AgentMonthlySale, agentMonthlySaleID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", agentMonthlySale, agentMonthlySaleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAgentMonthlySaleRepositoryMockRecorder) Update(agentMonthlySale, agentMonthlySaleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAgentMonthlySaleRepository)(nil).Update), agentMonthlySale, agentMonthlySaleID)
}

// MockAgentStaffMonthlySaleRepository is a mock of AgentStaffMonthlySaleRepository interface.
type MockAgentStaffMonthlySaleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAgentStaffMonthlySaleRepositoryMockRecorder
}

// MockAgentStaffMonthlySaleRepositoryMockRecorder is the mock recorder for MockAgentStaffMonthlySaleRepository.
type MockAgentStaffMonthlySaleRepositoryMockRecorder struct {
	mock *MockAgentStaffMonthlySaleRepository
}

// NewMockAgentStaffMonthlySaleRepository creates a new mock instance.
func NewMockAgentStaffMonthlySaleRepository(ctrl *gomock.Controller) *MockAgentStaffMonthlySaleRepository {
	mock := &MockAgentStaffMonthlySaleRepository{ctrl: ctrl}
	mock.recorder = &MockAgentStaffMonthlySaleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentStaffMonthlySaleRepository) EXPECT() *MockAgentStaffMonthlySaleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAgentStaffMonthlySaleRepository) Create(agentStaffMonthlySale *entity.AgentStaffMonthlySale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", agentStaffMonthlySale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAgentStaffMonthlySaleRepositoryMockRecorder) Create(agentStaffMonthlySale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAgentStaffMonthlySaleRepository)(nil).Create), agentStaffMonthlySale)
}

// FindByStaffManagementIDAndMonth mocks base method.
func (m *MockAgentStaffMonthlySaleRepository) FindByStaffManagementIDAndMonth(staffManagementID uint, thisMonth string) (*entity.AgentStaffMonthlySale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStaffManagementIDAndMonth", staffManagementID, thisMonth)
	ret0, _ := ret[0].(*entity.AgentStaffMonthlySale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStaffManagementIDAndMonth indicates an expected call of FindByStaffManagementIDAndMonth.
func (mr *MockAgentStaffMonthlySaleRepositoryMockRecorder) FindByStaffManagementIDAndMonth(staffManagementID, thisMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStaffManagementIDAndMonth", reflect.TypeOf((*MockAgentStaffMonthlySaleRepository)(nil).FindByStaffManagementIDAndMonth), staffManagementID, thisMonth)
}

// GetByAgentSaleManagementID mocks base method.
func (m *MockAgentStaffMonthlySaleRepository) GetByAgentSaleManagementID(agentSaleManagementID uint) ([]*entity.AgentStaffMonthlySale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentSaleManagementID", agentSaleManagementID)
	ret0, _ := ret[0].([]*entity.AgentStaffMonthlySale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentSaleManagementID indicates an expected call of GetByAgentSaleManagementID.
func (mr *MockAgentStaffMonthlySaleRepositoryMockRecorder) GetByAgentSaleManagementID(agentSaleManagementID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentSaleManagementID", reflect.TypeOf((*MockAgentStaffMonthlySaleRepository)(nil).GetByAgentSaleManagementID), agentSaleManagementID)
}

// GetByStaffManagementID mocks base method.
func (m *MockAgentStaffMonthlySaleRepository) GetByStaffManagementID(staffManagementID uint) ([]*entity.AgentStaffMonthlySale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffManagementID", staffManagementID)
	ret0, _ := ret[0].([]*entity.AgentStaffMonthlySale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffManagementID indicates an expected call of GetByStaffManagementID.
func (mr *MockAgentStaffMonthlySaleRepositoryMockRecorder) GetByStaffManagementID(staffManagementID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffManagementID", reflect.TypeOf((*MockAgentStaffMonthlySaleRepository)(nil).GetByStaffManagementID), staffManagementID)
}

// GetByStaffManagementIDAndPeriod mocks base method.
func (m *MockAgentStaffMonthlySaleRepository) GetByStaffManagementIDAndPeriod(staffManagementID uint, startMonth, endMonth string) ([]*entity.AgentStaffMonthlySale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffManagementIDAndPeriod", staffManagementID, startMonth, endMonth)
	ret0, _ := ret[0].([]*entity.AgentStaffMonthlySale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffManagementIDAndPeriod indicates an expected call of GetByStaffManagementIDAndPeriod.
func (mr *MockAgentStaffMonthlySaleRepositoryMockRecorder) GetByStaffManagementIDAndPeriod(staffManagementID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffManagementIDAndPeriod", reflect.TypeOf((*MockAgentStaffMonthlySaleRepository)(nil).GetByStaffManagementIDAndPeriod), staffManagementID, startMonth, endMonth)
}

// Update mocks base method.
func (m *MockAgentStaffMonthlySaleRepository) Update(agentStaffMonthlySale *entity.AgentStaffMonthlySale, agentMonthlySaleID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", agentStaffMonthlySale, agentMonthlySaleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAgentStaffMonthlySaleRepositoryMockRecorder) Update(agentStaffMonthlySale, agentMonthlySaleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAgentStaffMonthlySaleRepository)(nil).Update), agentStaffMonthlySale, agentMonthlySaleID)
}

// MockAgentSaleManagementRepository is a mock of AgentSaleManagementRepository interface.
type MockAgentSaleManagementRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAgentSaleManagementRepositoryMockRecorder
}

// MockAgentSaleManagementRepositoryMockRecorder is the mock recorder for MockAgentSaleManagementRepository.
type MockAgentSaleManagementRepositoryMockRecorder struct {
	mock *MockAgentSaleManagementRepository
}

// NewMockAgentSaleManagementRepository creates a new mock instance.
func NewMockAgentSaleManagementRepository(ctrl *gomock.Controller) *MockAgentSaleManagementRepository {
	mock := &MockAgentSaleManagementRepository{ctrl: ctrl}
	mock.recorder = &MockAgentSaleManagementRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentSaleManagementRepository) EXPECT() *MockAgentSaleManagementRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAgentSaleManagementRepository) Create(agentMonthlySale *entity.AgentSaleManagement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", agentMonthlySale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAgentSaleManagementRepositoryMockRecorder) Create(agentMonthlySale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAgentSaleManagementRepository)(nil).Create), agentMonthlySale)
}

// FindByAgentIDAndIsOpen mocks base method.
func (m *MockAgentSaleManagementRepository) FindByAgentIDAndIsOpen(agentID uint) (*entity.AgentSaleManagement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAgentIDAndIsOpen", agentID)
	ret0, _ := ret[0].(*entity.AgentSaleManagement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAgentIDAndIsOpen indicates an expected call of FindByAgentIDAndIsOpen.
func (mr *MockAgentSaleManagementRepositoryMockRecorder) FindByAgentIDAndIsOpen(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAgentIDAndIsOpen", reflect.TypeOf((*MockAgentSaleManagementRepository)(nil).FindByAgentIDAndIsOpen), agentID)
}

// FindByID mocks base method.
func (m *MockAgentSaleManagementRepository) FindByID(id uint) (*entity.AgentSaleManagement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.AgentSaleManagement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAgentSaleManagementRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAgentSaleManagementRepository)(nil).FindByID), id)
}

// FindByIDAndAgentID mocks base method.
func (m *MockAgentSaleManagementRepository) FindByIDAndAgentID(id, agentID uint) (*entity.AgentSaleManagement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDAndAgentID", id, agentID)
	ret0, _ := ret[0].(*entity.AgentSaleManagement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDAndAgentID indicates an expected call of FindByIDAndAgentID.
func (mr *MockAgentSaleManagementRepositoryMockRecorder) FindByIDAndAgentID(id, agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDAndAgentID", reflect.TypeOf((*MockAgentSaleManagementRepository)(nil).FindByIDAndAgentID), id, agentID)
}

// FindLatestByAgentID mocks base method.
func (m *MockAgentSaleManagementRepository) FindLatestByAgentID(agentID uint) (*entity.AgentSaleManagement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestByAgentID", agentID)
	ret0, _ := ret[0].(*entity.AgentSaleManagement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestByAgentID indicates an expected call of FindLatestByAgentID.
func (mr *MockAgentSaleManagementRepositoryMockRecorder) FindLatestByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestByAgentID", reflect.TypeOf((*MockAgentSaleManagementRepository)(nil).FindLatestByAgentID), agentID)
}

// GetByAgentID mocks base method.
func (m *MockAgentSaleManagementRepository) GetByAgentID(agentID uint) ([]*entity.AgentSaleManagement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.AgentSaleManagement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockAgentSaleManagementRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockAgentSaleManagementRepository)(nil).GetByAgentID), agentID)
}

// Update mocks base method.
func (m *MockAgentSaleManagementRepository) Update(agentMonthlySale *entity.AgentSaleManagement, agentsaleManagementID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", agentMonthlySale, agentsaleManagementID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAgentSaleManagementRepositoryMockRecorder) Update(agentMonthlySale, agentsaleManagementID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAgentSaleManagementRepository)(nil).Update), agentMonthlySale, agentsaleManagementID)
}

// UpdateIsOpenOtherThanID mocks base method.
func (m *MockAgentSaleManagementRepository) UpdateIsOpenOtherThanID(agentID, saleManagementID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsOpenOtherThanID", agentID, saleManagementID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsOpenOtherThanID indicates an expected call of UpdateIsOpenOtherThanID.
func (mr *MockAgentSaleManagementRepositoryMockRecorder) UpdateIsOpenOtherThanID(agentID, saleManagementID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsOpenOtherThanID", reflect.TypeOf((*MockAgentSaleManagementRepository)(nil).UpdateIsOpenOtherThanID), agentID, saleManagementID)
}

// MockAgentStaffSaleManagementRepository is a mock of AgentStaffSaleManagementRepository interface.
type MockAgentStaffSaleManagementRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAgentStaffSaleManagementRepositoryMockRecorder
}

// MockAgentStaffSaleManagementRepositoryMockRecorder is the mock recorder for MockAgentStaffSaleManagementRepository.
type MockAgentStaffSaleManagementRepositoryMockRecorder struct {
	mock *MockAgentStaffSaleManagementRepository
}

// NewMockAgentStaffSaleManagementRepository creates a new mock instance.
func NewMockAgentStaffSaleManagementRepository(ctrl *gomock.Controller) *MockAgentStaffSaleManagementRepository {
	mock := &MockAgentStaffSaleManagementRepository{ctrl: ctrl}
	mock.recorder = &MockAgentStaffSaleManagementRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentStaffSaleManagementRepository) EXPECT() *MockAgentStaffSaleManagementRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAgentStaffSaleManagementRepository) Create(staffMonthlySale *entity.AgentStaffSaleManagement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", staffMonthlySale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAgentStaffSaleManagementRepositoryMockRecorder) Create(staffMonthlySale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAgentStaffSaleManagementRepository)(nil).Create), staffMonthlySale)
}

// FindByManagementIDAndStaffID mocks base method.
func (m *MockAgentStaffSaleManagementRepository) FindByManagementIDAndStaffID(managementID, staffID uint) (*entity.AgentStaffSaleManagement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByManagementIDAndStaffID", managementID, staffID)
	ret0, _ := ret[0].(*entity.AgentStaffSaleManagement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByManagementIDAndStaffID indicates an expected call of FindByManagementIDAndStaffID.
func (mr *MockAgentStaffSaleManagementRepositoryMockRecorder) FindByManagementIDAndStaffID(managementID, staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByManagementIDAndStaffID", reflect.TypeOf((*MockAgentStaffSaleManagementRepository)(nil).FindByManagementIDAndStaffID), managementID, staffID)
}

// GetByAgentID mocks base method.
func (m *MockAgentStaffSaleManagementRepository) GetByAgentID(agentID uint) ([]*entity.AgentStaffSaleManagement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.AgentStaffSaleManagement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockAgentStaffSaleManagementRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockAgentStaffSaleManagementRepository)(nil).GetByAgentID), agentID)
}

// GetByStaffIDAndThidMonth mocks base method.
func (m *MockAgentStaffSaleManagementRepository) GetByStaffIDAndThidMonth(staffID uint, thisMonth string) ([]*entity.AgentStaffSaleManagement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffIDAndThidMonth", staffID, thisMonth)
	ret0, _ := ret[0].([]*entity.AgentStaffSaleManagement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffIDAndThidMonth indicates an expected call of GetByStaffIDAndThidMonth.
func (mr *MockAgentStaffSaleManagementRepositoryMockRecorder) GetByStaffIDAndThidMonth(staffID, thisMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffIDAndThidMonth", reflect.TypeOf((*MockAgentStaffSaleManagementRepository)(nil).GetByStaffIDAndThidMonth), staffID, thisMonth)
}

// GetStaffNameByManagementID mocks base method.
func (m *MockAgentStaffSaleManagementRepository) GetStaffNameByManagementID(managementID uint) ([]*entity.AgentStaffSaleManagement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaffNameByManagementID", managementID)
	ret0, _ := ret[0].([]*entity.AgentStaffSaleManagement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaffNameByManagementID indicates an expected call of GetStaffNameByManagementID.
func (mr *MockAgentStaffSaleManagementRepositoryMockRecorder) GetStaffNameByManagementID(managementID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaffNameByManagementID", reflect.TypeOf((*MockAgentStaffSaleManagementRepository)(nil).GetStaffNameByManagementID), managementID)
}

// MockJobSeekerScheduleRepository is a mock of JobSeekerScheduleRepository interface.
type MockJobSeekerScheduleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerScheduleRepositoryMockRecorder
}

// MockJobSeekerScheduleRepositoryMockRecorder is the mock recorder for MockJobSeekerScheduleRepository.
type MockJobSeekerScheduleRepositoryMockRecorder struct {
	mock *MockJobSeekerScheduleRepository
}

// NewMockJobSeekerScheduleRepository creates a new mock instance.
func NewMockJobSeekerScheduleRepository(ctrl *gomock.Controller) *MockJobSeekerScheduleRepository {
	mock := &MockJobSeekerScheduleRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerScheduleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerScheduleRepository) EXPECT() *MockJobSeekerScheduleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockJobSeekerScheduleRepository) Create(schedule *entity.JobSeekerSchedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) Create(schedule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).Create), schedule)
}

// Delete mocks base method.
func (m *MockJobSeekerScheduleRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).Delete), id)
}

// DeleteByTaskGroupIDAndScheduleType mocks base method.
func (m *MockJobSeekerScheduleRepository) DeleteByTaskGroupIDAndScheduleType(taskGroupID, scheduleType uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByTaskGroupIDAndScheduleType", taskGroupID, scheduleType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByTaskGroupIDAndScheduleType indicates an expected call of DeleteByTaskGroupIDAndScheduleType.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) DeleteByTaskGroupIDAndScheduleType(taskGroupID, scheduleType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByTaskGroupIDAndScheduleType", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).DeleteByTaskGroupIDAndScheduleType), taskGroupID, scheduleType)
}

// DeleteScheduleInTaskGroupAboveTaskID mocks base method.
func (m *MockJobSeekerScheduleRepository) DeleteScheduleInTaskGroupAboveTaskID(taskID, taskGroupID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScheduleInTaskGroupAboveTaskID", taskID, taskGroupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScheduleInTaskGroupAboveTaskID indicates an expected call of DeleteScheduleInTaskGroupAboveTaskID.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) DeleteScheduleInTaskGroupAboveTaskID(taskID, taskGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScheduleInTaskGroupAboveTaskID", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).DeleteScheduleInTaskGroupAboveTaskID), taskID, taskGroupID)
}

// GetByJobSeekerID mocks base method.
func (m *MockJobSeekerScheduleRepository) GetByJobSeekerID(jobSeekerID uint) ([]*entity.JobSeekerSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.JobSeekerSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerID indicates an expected call of GetByJobSeekerID.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) GetByJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerID", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).GetByJobSeekerID), jobSeekerID)
}

// GetByJobSeekerIDAndScheuldType mocks base method.
func (m *MockJobSeekerScheduleRepository) GetByJobSeekerIDAndScheuldType(jobSeekerID, scheduleType uint) ([]*entity.JobSeekerSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobSeekerIDAndScheuldType", jobSeekerID, scheduleType)
	ret0, _ := ret[0].([]*entity.JobSeekerSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobSeekerIDAndScheuldType indicates an expected call of GetByJobSeekerIDAndScheuldType.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) GetByJobSeekerIDAndScheuldType(jobSeekerID, scheduleType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobSeekerIDAndScheuldType", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).GetByJobSeekerIDAndScheuldType), jobSeekerID, scheduleType)
}

// GetByStaffIDAndPeriod mocks base method.
func (m *MockJobSeekerScheduleRepository) GetByStaffIDAndPeriod(agentStaffID, scheduleType uint, startDate, endDate time.Time) ([]*entity.JobSeekerSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffIDAndPeriod", agentStaffID, scheduleType, startDate, endDate)
	ret0, _ := ret[0].([]*entity.JobSeekerSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffIDAndPeriod indicates an expected call of GetByStaffIDAndPeriod.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) GetByStaffIDAndPeriod(agentStaffID, scheduleType, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffIDAndPeriod", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).GetByStaffIDAndPeriod), agentStaffID, scheduleType, startDate, endDate)
}

// GetByStaffIDAndPeriodByStaffIDList mocks base method.
func (m *MockJobSeekerScheduleRepository) GetByStaffIDAndPeriodByStaffIDList(idList []uint, scheduleType uint, startDate, endDate time.Time) ([]*entity.JobSeekerSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStaffIDAndPeriodByStaffIDList", idList, scheduleType, startDate, endDate)
	ret0, _ := ret[0].([]*entity.JobSeekerSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStaffIDAndPeriodByStaffIDList indicates an expected call of GetByStaffIDAndPeriodByStaffIDList.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) GetByStaffIDAndPeriodByStaffIDList(idList, scheduleType, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStaffIDAndPeriodByStaffIDList", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).GetByStaffIDAndPeriodByStaffIDList), idList, scheduleType, startDate, endDate)
}

// GetByTaskGroupID mocks base method.
func (m *MockJobSeekerScheduleRepository) GetByTaskGroupID(taskGroupID uint) ([]*entity.JobSeekerSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTaskGroupID", taskGroupID)
	ret0, _ := ret[0].([]*entity.JobSeekerSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTaskGroupID indicates an expected call of GetByTaskGroupID.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) GetByTaskGroupID(taskGroupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTaskGroupID", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).GetByTaskGroupID), taskGroupID)
}

// GetByTaskGroupIDAndScheduleType mocks base method.
func (m *MockJobSeekerScheduleRepository) GetByTaskGroupIDAndScheduleType(taskGroupID, scheduleType uint) ([]*entity.JobSeekerSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTaskGroupIDAndScheduleType", taskGroupID, scheduleType)
	ret0, _ := ret[0].([]*entity.JobSeekerSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTaskGroupIDAndScheduleType indicates an expected call of GetByTaskGroupIDAndScheduleType.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) GetByTaskGroupIDAndScheduleType(taskGroupID, scheduleType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTaskGroupIDAndScheduleType", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).GetByTaskGroupIDAndScheduleType), taskGroupID, scheduleType)
}

// GetByTaskGroupIDList mocks base method.
func (m *MockJobSeekerScheduleRepository) GetByTaskGroupIDList(taskGroupIDList []uint) ([]*entity.JobSeekerSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTaskGroupIDList", taskGroupIDList)
	ret0, _ := ret[0].([]*entity.JobSeekerSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTaskGroupIDList indicates an expected call of GetByTaskGroupIDList.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) GetByTaskGroupIDList(taskGroupIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTaskGroupIDList", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).GetByTaskGroupIDList), taskGroupIDList)
}

// Update mocks base method.
func (m *MockJobSeekerScheduleRepository) Update(id uint, schedule *entity.JobSeekerSchedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) Update(id, schedule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).Update), id, schedule)
}

// UpdateIsSharedByIDList mocks base method.
func (m *MockJobSeekerScheduleRepository) UpdateIsSharedByIDList(idList []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsSharedByIDList", idList)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsSharedByIDList indicates an expected call of UpdateIsSharedByIDList.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) UpdateIsSharedByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsSharedByIDList", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).UpdateIsSharedByIDList), idList)
}

// UpdateTitle mocks base method.
func (m *MockJobSeekerScheduleRepository) UpdateTitle(id uint, title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTitle", id, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTitle indicates an expected call of UpdateTitle.
func (mr *MockJobSeekerScheduleRepositoryMockRecorder) UpdateTitle(id, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTitle", reflect.TypeOf((*MockJobSeekerScheduleRepository)(nil).UpdateTitle), id, title)
}

// MockJobSeekerRescheduleRepository is a mock of JobSeekerRescheduleRepository interface.
type MockJobSeekerRescheduleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerRescheduleRepositoryMockRecorder
}

// MockJobSeekerRescheduleRepositoryMockRecorder is the mock recorder for MockJobSeekerRescheduleRepository.
type MockJobSeekerRescheduleRepositoryMockRecorder struct {
	mock *MockJobSeekerRescheduleRepository
}

// NewMockJobSeekerRescheduleRepository creates a new mock instance.
func NewMockJobSeekerRescheduleRepository(ctrl *gomock.Controller) *MockJobSeekerRescheduleRepository {
	mock := &MockJobSeekerRescheduleRepository{ctrl: ctrl}
	mock.recorder = &MockJobSeekerRescheduleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerRescheduleRepository) EXPECT() *MockJobSeekerRescheduleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockJobSeekerRescheduleRepository) Create(reschedule *entity.JobSeekerReschedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", reschedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockJobSeekerRescheduleRepositoryMockRecorder) Create(reschedule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobSeekerRescheduleRepository)(nil).Create), reschedule)
}

// Delete mocks base method.
func (m *MockJobSeekerRescheduleRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockJobSeekerRescheduleRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockJobSeekerRescheduleRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockJobSeekerRescheduleRepository) FindByID(id uint) (*entity.JobSeekerReschedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.JobSeekerReschedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockJobSeekerRescheduleRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockJobSeekerRescheduleRepository)(nil).FindByID), id)
}

// MockInitialEnterpriseImporterRepository is a mock of InitialEnterpriseImporterRepository interface.
type MockInitialEnterpriseImporterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInitialEnterpriseImporterRepositoryMockRecorder
}

// MockInitialEnterpriseImporterRepositoryMockRecorder is the mock recorder for MockInitialEnterpriseImporterRepository.
type MockInitialEnterpriseImporterRepositoryMockRecorder struct {
	mock *MockInitialEnterpriseImporterRepository
}

// NewMockInitialEnterpriseImporterRepository creates a new mock instance.
func NewMockInitialEnterpriseImporterRepository(ctrl *gomock.Controller) *MockInitialEnterpriseImporterRepository {
	mock := &MockInitialEnterpriseImporterRepository{ctrl: ctrl}
	mock.recorder = &MockInitialEnterpriseImporterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitialEnterpriseImporterRepository) EXPECT() *MockInitialEnterpriseImporterRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInitialEnterpriseImporterRepository) Create(initialEnterpriseImporter *entity.InitialEnterpriseImporter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", initialEnterpriseImporter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInitialEnterpriseImporterRepositoryMockRecorder) Create(initialEnterpriseImporter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInitialEnterpriseImporterRepository)(nil).Create), initialEnterpriseImporter)
}

// Delete mocks base method.
func (m *MockInitialEnterpriseImporterRepository) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInitialEnterpriseImporterRepositoryMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInitialEnterpriseImporterRepository)(nil).Delete), id)
}

// FindByID mocks base method.
func (m *MockInitialEnterpriseImporterRepository) FindByID(id uint) (*entity.InitialEnterpriseImporter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.InitialEnterpriseImporter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockInitialEnterpriseImporterRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockInitialEnterpriseImporterRepository)(nil).FindByID), id)
}

// GetByAgentID mocks base method.
func (m *MockInitialEnterpriseImporterRepository) GetByAgentID(agentID uint) ([]*entity.InitialEnterpriseImporter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.InitialEnterpriseImporter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockInitialEnterpriseImporterRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockInitialEnterpriseImporterRepository)(nil).GetByAgentID), agentID)
}

// GetByStartDate mocks base method.
func (m *MockInitialEnterpriseImporterRepository) GetByStartDate(now time.Time) ([]*entity.InitialEnterpriseImporter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStartDate", now)
	ret0, _ := ret[0].([]*entity.InitialEnterpriseImporter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStartDate indicates an expected call of GetByStartDate.
func (mr *MockInitialEnterpriseImporterRepositoryMockRecorder) GetByStartDate(now any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStartDate", reflect.TypeOf((*MockInitialEnterpriseImporterRepository)(nil).GetByStartDate), now)
}

// GetByWeek mocks base method.
func (m *MockInitialEnterpriseImporterRepository) GetByWeek() ([]*entity.InitialEnterpriseImporter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByWeek")
	ret0, _ := ret[0].([]*entity.InitialEnterpriseImporter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByWeek indicates an expected call of GetByWeek.
func (mr *MockInitialEnterpriseImporterRepositoryMockRecorder) GetByWeek() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByWeek", reflect.TypeOf((*MockInitialEnterpriseImporterRepository)(nil).GetByWeek))
}

// UpdateIsSuccessTrue mocks base method.
func (m *MockInitialEnterpriseImporterRepository) UpdateIsSuccessTrue(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsSuccessTrue", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsSuccessTrue indicates an expected call of UpdateIsSuccessTrue.
func (mr *MockInitialEnterpriseImporterRepositoryMockRecorder) UpdateIsSuccessTrue(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsSuccessTrue", reflect.TypeOf((*MockInitialEnterpriseImporterRepository)(nil).UpdateIsSuccessTrue), id)
}

// MockNotificationForUserRepository is a mock of NotificationForUserRepository interface.
type MockNotificationForUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationForUserRepositoryMockRecorder
}

// MockNotificationForUserRepositoryMockRecorder is the mock recorder for MockNotificationForUserRepository.
type MockNotificationForUserRepositoryMockRecorder struct {
	mock *MockNotificationForUserRepository
}

// NewMockNotificationForUserRepository creates a new mock instance.
func NewMockNotificationForUserRepository(ctrl *gomock.Controller) *MockNotificationForUserRepository {
	mock := &MockNotificationForUserRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationForUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationForUserRepository) EXPECT() *MockNotificationForUserRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockNotificationForUserRepository) All() ([]*entity.NotificationForUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.NotificationForUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockNotificationForUserRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockNotificationForUserRepository)(nil).All))
}

// Create mocks base method.
func (m *MockNotificationForUserRepository) Create(notificationForUser *entity.NotificationForUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", notificationForUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockNotificationForUserRepositoryMockRecorder) Create(notificationForUser any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNotificationForUserRepository)(nil).Create), notificationForUser)
}

// FindByID mocks base method.
func (m *MockNotificationForUserRepository) FindByID(id uint) (*entity.NotificationForUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.NotificationForUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockNotificationForUserRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockNotificationForUserRepository)(nil).FindByID), id)
}

// FindLatest mocks base method.
func (m *MockNotificationForUserRepository) FindLatest() (*entity.NotificationForUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatest")
	ret0, _ := ret[0].(*entity.NotificationForUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatest indicates an expected call of FindLatest.
func (mr *MockNotificationForUserRepositoryMockRecorder) FindLatest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatest", reflect.TypeOf((*MockNotificationForUserRepository)(nil).FindLatest))
}

// GetAfterIDAndTargetList mocks base method.
func (m *MockNotificationForUserRepository) GetAfterIDAndTargetList(id uint, targetList []entity.NotificationForUserTarget) ([]*entity.NotificationForUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAfterIDAndTargetList", id, targetList)
	ret0, _ := ret[0].([]*entity.NotificationForUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAfterIDAndTargetList indicates an expected call of GetAfterIDAndTargetList.
func (mr *MockNotificationForUserRepositoryMockRecorder) GetAfterIDAndTargetList(id, targetList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAfterIDAndTargetList", reflect.TypeOf((*MockNotificationForUserRepository)(nil).GetAfterIDAndTargetList), id, targetList)
}

// GetByTargetList mocks base method.
func (m *MockNotificationForUserRepository) GetByTargetList(targetList []entity.NotificationForUserTarget) ([]*entity.NotificationForUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTargetList", targetList)
	ret0, _ := ret[0].([]*entity.NotificationForUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTargetList indicates an expected call of GetByTargetList.
func (mr *MockNotificationForUserRepositoryMockRecorder) GetByTargetList(targetList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTargetList", reflect.TypeOf((*MockNotificationForUserRepository)(nil).GetByTargetList), targetList)
}

// MockUserNotificationViewRepository is a mock of UserNotificationViewRepository interface.
type MockUserNotificationViewRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserNotificationViewRepositoryMockRecorder
}

// MockUserNotificationViewRepositoryMockRecorder is the mock recorder for MockUserNotificationViewRepository.
type MockUserNotificationViewRepositoryMockRecorder struct {
	mock *MockUserNotificationViewRepository
}

// NewMockUserNotificationViewRepository creates a new mock instance.
func NewMockUserNotificationViewRepository(ctrl *gomock.Controller) *MockUserNotificationViewRepository {
	mock := &MockUserNotificationViewRepository{ctrl: ctrl}
	mock.recorder = &MockUserNotificationViewRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserNotificationViewRepository) EXPECT() *MockUserNotificationViewRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockUserNotificationViewRepository) All() ([]*entity.UserNotificationView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.UserNotificationView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockUserNotificationViewRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockUserNotificationViewRepository)(nil).All))
}

// Create mocks base method.
func (m *MockUserNotificationViewRepository) Create(userNotificationView *entity.UserNotificationView) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userNotificationView)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserNotificationViewRepositoryMockRecorder) Create(userNotificationView any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserNotificationViewRepository)(nil).Create), userNotificationView)
}

// FindByID mocks base method.
func (m *MockUserNotificationViewRepository) FindByID(id uint) (*entity.UserNotificationView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.UserNotificationView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserNotificationViewRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserNotificationViewRepository)(nil).FindByID), id)
}

// FindLatestByAgentStaffID mocks base method.
func (m *MockUserNotificationViewRepository) FindLatestByAgentStaffID(agentStaffID uint) (*entity.UserNotificationView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestByAgentStaffID", agentStaffID)
	ret0, _ := ret[0].(*entity.UserNotificationView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestByAgentStaffID indicates an expected call of FindLatestByAgentStaffID.
func (mr *MockUserNotificationViewRepositoryMockRecorder) FindLatestByAgentStaffID(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestByAgentStaffID", reflect.TypeOf((*MockUserNotificationViewRepository)(nil).FindLatestByAgentStaffID), agentStaffID)
}

// GetByNotificationID mocks base method.
func (m *MockUserNotificationViewRepository) GetByNotificationID(notificationID uint) ([]*entity.UserNotificationView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNotificationID", notificationID)
	ret0, _ := ret[0].([]*entity.UserNotificationView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNotificationID indicates an expected call of GetByNotificationID.
func (mr *MockUserNotificationViewRepositoryMockRecorder) GetByNotificationID(notificationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNotificationID", reflect.TypeOf((*MockUserNotificationViewRepository)(nil).GetByNotificationID), notificationID)
}

// GetByNotificationIDList mocks base method.
func (m *MockUserNotificationViewRepository) GetByNotificationIDList(notificationIDList []uint) ([]*entity.UserNotificationView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNotificationIDList", notificationIDList)
	ret0, _ := ret[0].([]*entity.UserNotificationView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNotificationIDList indicates an expected call of GetByNotificationIDList.
func (mr *MockUserNotificationViewRepositoryMockRecorder) GetByNotificationIDList(notificationIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNotificationIDList", reflect.TypeOf((*MockUserNotificationViewRepository)(nil).GetByNotificationIDList), notificationIDList)
}

// MockDeploymentInformationRepository is a mock of DeploymentInformationRepository interface.
type MockDeploymentInformationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentInformationRepositoryMockRecorder
}

// MockDeploymentInformationRepositoryMockRecorder is the mock recorder for MockDeploymentInformationRepository.
type MockDeploymentInformationRepositoryMockRecorder struct {
	mock *MockDeploymentInformationRepository
}

// NewMockDeploymentInformationRepository creates a new mock instance.
func NewMockDeploymentInformationRepository(ctrl *gomock.Controller) *MockDeploymentInformationRepository {
	mock := &MockDeploymentInformationRepository{ctrl: ctrl}
	mock.recorder = &MockDeploymentInformationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentInformationRepository) EXPECT() *MockDeploymentInformationRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockDeploymentInformationRepository) All() ([]*entity.DeploymentInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.DeploymentInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockDeploymentInformationRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockDeploymentInformationRepository)(nil).All))
}

// Create mocks base method.
func (m *MockDeploymentInformationRepository) Create(deploymentInfo *entity.DeploymentInformation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", deploymentInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDeploymentInformationRepositoryMockRecorder) Create(deploymentInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeploymentInformationRepository)(nil).Create), deploymentInfo)
}

// Update mocks base method.
func (m *MockDeploymentInformationRepository) Update(id uint, deploymentInfo *entity.DeploymentInformation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, deploymentInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDeploymentInformationRepositoryMockRecorder) Update(id, deploymentInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeploymentInformationRepository)(nil).Update), id, deploymentInfo)
}

// MockDeploymentReflectionRepository is a mock of DeploymentReflectionRepository interface.
type MockDeploymentReflectionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentReflectionRepositoryMockRecorder
}

// MockDeploymentReflectionRepositoryMockRecorder is the mock recorder for MockDeploymentReflectionRepository.
type MockDeploymentReflectionRepositoryMockRecorder struct {
	mock *MockDeploymentReflectionRepository
}

// NewMockDeploymentReflectionRepository creates a new mock instance.
func NewMockDeploymentReflectionRepository(ctrl *gomock.Controller) *MockDeploymentReflectionRepository {
	mock := &MockDeploymentReflectionRepository{ctrl: ctrl}
	mock.recorder = &MockDeploymentReflectionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentReflectionRepository) EXPECT() *MockDeploymentReflectionRepositoryMockRecorder {
	return m.recorder
}

// CreateMulti mocks base method.
func (m *MockDeploymentReflectionRepository) CreateMulti(deploymentID uint, agentStaffList []*entity.AgentStaff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMulti", deploymentID, agentStaffList)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMulti indicates an expected call of CreateMulti.
func (mr *MockDeploymentReflectionRepositoryMockRecorder) CreateMulti(deploymentID, agentStaffList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMulti", reflect.TypeOf((*MockDeploymentReflectionRepository)(nil).CreateMulti), deploymentID, agentStaffList)
}

// FindNotReflectedByAgentStaffID mocks base method.
func (m *MockDeploymentReflectionRepository) FindNotReflectedByAgentStaffID(staffID uint) (*entity.DeploymentReflection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNotReflectedByAgentStaffID", staffID)
	ret0, _ := ret[0].(*entity.DeploymentReflection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNotReflectedByAgentStaffID indicates an expected call of FindNotReflectedByAgentStaffID.
func (mr *MockDeploymentReflectionRepositoryMockRecorder) FindNotReflectedByAgentStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotReflectedByAgentStaffID", reflect.TypeOf((*MockDeploymentReflectionRepository)(nil).FindNotReflectedByAgentStaffID), staffID)
}

// UpdateIsReflectedByAgentStaffID mocks base method.
func (m *MockDeploymentReflectionRepository) UpdateIsReflectedByAgentStaffID(staffID uint, isReflected bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsReflectedByAgentStaffID", staffID, isReflected)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsReflectedByAgentStaffID indicates an expected call of UpdateIsReflectedByAgentStaffID.
func (mr *MockDeploymentReflectionRepositoryMockRecorder) UpdateIsReflectedByAgentStaffID(staffID, isReflected any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsReflectedByAgentStaffID", reflect.TypeOf((*MockDeploymentReflectionRepository)(nil).UpdateIsReflectedByAgentStaffID), staffID, isReflected)
}

// MockSendingEnterpriseRepository is a mock of SendingEnterpriseRepository interface.
type MockSendingEnterpriseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingEnterpriseRepositoryMockRecorder
}

// MockSendingEnterpriseRepositoryMockRecorder is the mock recorder for MockSendingEnterpriseRepository.
type MockSendingEnterpriseRepositoryMockRecorder struct {
	mock *MockSendingEnterpriseRepository
}

// NewMockSendingEnterpriseRepository creates a new mock instance.
func NewMockSendingEnterpriseRepository(ctrl *gomock.Controller) *MockSendingEnterpriseRepository {
	mock := &MockSendingEnterpriseRepository{ctrl: ctrl}
	mock.recorder = &MockSendingEnterpriseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingEnterpriseRepository) EXPECT() *MockSendingEnterpriseRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockSendingEnterpriseRepository) All() ([]*entity.SendingEnterprise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.SendingEnterprise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockSendingEnterpriseRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockSendingEnterpriseRepository)(nil).All))
}

// Create mocks base method.
func (m *MockSendingEnterpriseRepository) Create(sendingEnterprise *entity.SendingEnterprise) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", sendingEnterprise)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingEnterpriseRepositoryMockRecorder) Create(sendingEnterprise any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingEnterpriseRepository)(nil).Create), sendingEnterprise)
}

// Delete mocks base method.
func (m *MockSendingEnterpriseRepository) Delete(sendingEnterpriseID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingEnterpriseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingEnterpriseRepositoryMockRecorder) Delete(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingEnterpriseRepository)(nil).Delete), sendingEnterpriseID)
}

// FindByID mocks base method.
func (m *MockSendingEnterpriseRepository) FindByID(sendingEnterpriseID uint) (*entity.SendingEnterprise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", sendingEnterpriseID)
	ret0, _ := ret[0].(*entity.SendingEnterprise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSendingEnterpriseRepositoryMockRecorder) FindByID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSendingEnterpriseRepository)(nil).FindByID), sendingEnterpriseID)
}

// FindByUUID mocks base method.
func (m *MockSendingEnterpriseRepository) FindByUUID(uuid uuid.UUID) (*entity.SendingEnterprise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", uuid)
	ret0, _ := ret[0].(*entity.SendingEnterprise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockSendingEnterpriseRepositoryMockRecorder) FindByUUID(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockSendingEnterpriseRepository)(nil).FindByUUID), uuid)
}

// GetByIDList mocks base method.
func (m *MockSendingEnterpriseRepository) GetByIDList(enterpriseIDList []uint) ([]*entity.SendingEnterprise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", enterpriseIDList)
	ret0, _ := ret[0].([]*entity.SendingEnterprise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockSendingEnterpriseRepositoryMockRecorder) GetByIDList(enterpriseIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockSendingEnterpriseRepository)(nil).GetByIDList), enterpriseIDList)
}

// GetSendingEnterpriseAndJobInfoCountByHaveNotSentYetBySendingJobSeekerID mocks base method.
func (m *MockSendingEnterpriseRepository) GetSendingEnterpriseAndJobInfoCountByHaveNotSentYetBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingEnterprise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingEnterpriseAndJobInfoCountByHaveNotSentYetBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingEnterprise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingEnterpriseAndJobInfoCountByHaveNotSentYetBySendingJobSeekerID indicates an expected call of GetSendingEnterpriseAndJobInfoCountByHaveNotSentYetBySendingJobSeekerID.
func (mr *MockSendingEnterpriseRepositoryMockRecorder) GetSendingEnterpriseAndJobInfoCountByHaveNotSentYetBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingEnterpriseAndJobInfoCountByHaveNotSentYetBySendingJobSeekerID", reflect.TypeOf((*MockSendingEnterpriseRepository)(nil).GetSendingEnterpriseAndJobInfoCountByHaveNotSentYetBySendingJobSeekerID), sendingJobSeekerID)
}

// GetSendingEnterpriseByHaveNotSentYetBySendingJobSeekerID mocks base method.
func (m *MockSendingEnterpriseRepository) GetSendingEnterpriseByHaveNotSentYetBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingEnterprise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingEnterpriseByHaveNotSentYetBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingEnterprise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingEnterpriseByHaveNotSentYetBySendingJobSeekerID indicates an expected call of GetSendingEnterpriseByHaveNotSentYetBySendingJobSeekerID.
func (mr *MockSendingEnterpriseRepositoryMockRecorder) GetSendingEnterpriseByHaveNotSentYetBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingEnterpriseByHaveNotSentYetBySendingJobSeekerID", reflect.TypeOf((*MockSendingEnterpriseRepository)(nil).GetSendingEnterpriseByHaveNotSentYetBySendingJobSeekerID), sendingJobSeekerID)
}

// Update mocks base method.
func (m *MockSendingEnterpriseRepository) Update(sendingEnterprise *entity.SendingEnterprise, sendingEnterpriseID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", sendingEnterprise, sendingEnterpriseID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSendingEnterpriseRepositoryMockRecorder) Update(sendingEnterprise, sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSendingEnterpriseRepository)(nil).Update), sendingEnterprise, sendingEnterpriseID)
}

// UpdatePassword mocks base method.
func (m *MockSendingEnterpriseRepository) UpdatePassword(sendingEnterpriseID uint, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", sendingEnterpriseID, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockSendingEnterpriseRepositoryMockRecorder) UpdatePassword(sendingEnterpriseID, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockSendingEnterpriseRepository)(nil).UpdatePassword), sendingEnterpriseID, password)
}

// MockSendingEnterpriseReferenceMaterialRepository is a mock of SendingEnterpriseReferenceMaterialRepository interface.
type MockSendingEnterpriseReferenceMaterialRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingEnterpriseReferenceMaterialRepositoryMockRecorder
}

// MockSendingEnterpriseReferenceMaterialRepositoryMockRecorder is the mock recorder for MockSendingEnterpriseReferenceMaterialRepository.
type MockSendingEnterpriseReferenceMaterialRepositoryMockRecorder struct {
	mock *MockSendingEnterpriseReferenceMaterialRepository
}

// NewMockSendingEnterpriseReferenceMaterialRepository creates a new mock instance.
func NewMockSendingEnterpriseReferenceMaterialRepository(ctrl *gomock.Controller) *MockSendingEnterpriseReferenceMaterialRepository {
	mock := &MockSendingEnterpriseReferenceMaterialRepository{ctrl: ctrl}
	mock.recorder = &MockSendingEnterpriseReferenceMaterialRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingEnterpriseReferenceMaterialRepository) EXPECT() *MockSendingEnterpriseReferenceMaterialRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockSendingEnterpriseReferenceMaterialRepository) All() ([]*entity.SendingEnterpriseReferenceMaterial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.SendingEnterpriseReferenceMaterial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockSendingEnterpriseReferenceMaterialRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockSendingEnterpriseReferenceMaterialRepository)(nil).All))
}

// Create mocks base method.
func (m *MockSendingEnterpriseReferenceMaterialRepository) Create(referenceMaterial *entity.SendingEnterpriseReferenceMaterial) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", referenceMaterial)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingEnterpriseReferenceMaterialRepositoryMockRecorder) Create(referenceMaterial any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingEnterpriseReferenceMaterialRepository)(nil).Create), referenceMaterial)
}

// FindBySendingEnterpriseID mocks base method.
func (m *MockSendingEnterpriseReferenceMaterialRepository) FindBySendingEnterpriseID(sendingEnterpriseID uint) (*entity.SendingEnterpriseReferenceMaterial, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].(*entity.SendingEnterpriseReferenceMaterial)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingEnterpriseID indicates an expected call of FindBySendingEnterpriseID.
func (mr *MockSendingEnterpriseReferenceMaterialRepositoryMockRecorder) FindBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingEnterpriseID", reflect.TypeOf((*MockSendingEnterpriseReferenceMaterialRepository)(nil).FindBySendingEnterpriseID), sendingEnterpriseID)
}

// Update mocks base method.
func (m *MockSendingEnterpriseReferenceMaterialRepository) Update(referenceMaterial *entity.SendingEnterpriseReferenceMaterial) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", referenceMaterial)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSendingEnterpriseReferenceMaterialRepositoryMockRecorder) Update(referenceMaterial any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSendingEnterpriseReferenceMaterialRepository)(nil).Update), referenceMaterial)
}

// UpdateReferenceURLBySendingEnterpriseIDAndMaterialType mocks base method.
func (m *MockSendingEnterpriseReferenceMaterialRepository) UpdateReferenceURLBySendingEnterpriseIDAndMaterialType(sendingEntepriseID uint, fileType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReferenceURLBySendingEnterpriseIDAndMaterialType", sendingEntepriseID, fileType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReferenceURLBySendingEnterpriseIDAndMaterialType indicates an expected call of UpdateReferenceURLBySendingEnterpriseIDAndMaterialType.
func (mr *MockSendingEnterpriseReferenceMaterialRepositoryMockRecorder) UpdateReferenceURLBySendingEnterpriseIDAndMaterialType(sendingEntepriseID, fileType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReferenceURLBySendingEnterpriseIDAndMaterialType", reflect.TypeOf((*MockSendingEnterpriseReferenceMaterialRepository)(nil).UpdateReferenceURLBySendingEnterpriseIDAndMaterialType), sendingEntepriseID, fileType)
}

// MockSendingEnterpriseSpecialityRepository is a mock of SendingEnterpriseSpecialityRepository interface.
type MockSendingEnterpriseSpecialityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingEnterpriseSpecialityRepositoryMockRecorder
}

// MockSendingEnterpriseSpecialityRepositoryMockRecorder is the mock recorder for MockSendingEnterpriseSpecialityRepository.
type MockSendingEnterpriseSpecialityRepositoryMockRecorder struct {
	mock *MockSendingEnterpriseSpecialityRepository
}

// NewMockSendingEnterpriseSpecialityRepository creates a new mock instance.
func NewMockSendingEnterpriseSpecialityRepository(ctrl *gomock.Controller) *MockSendingEnterpriseSpecialityRepository {
	mock := &MockSendingEnterpriseSpecialityRepository{ctrl: ctrl}
	mock.recorder = &MockSendingEnterpriseSpecialityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingEnterpriseSpecialityRepository) EXPECT() *MockSendingEnterpriseSpecialityRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingEnterpriseSpecialityRepository) Create(speciality *entity.SendingEnterpriseSpeciality) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", speciality)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingEnterpriseSpecialityRepositoryMockRecorder) Create(speciality any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingEnterpriseSpecialityRepository)(nil).Create), speciality)
}

// FindBySendingEnterpriseID mocks base method.
func (m *MockSendingEnterpriseSpecialityRepository) FindBySendingEnterpriseID(sendingEnterpriseID uint) (*entity.SendingEnterpriseSpeciality, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].(*entity.SendingEnterpriseSpeciality)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingEnterpriseID indicates an expected call of FindBySendingEnterpriseID.
func (mr *MockSendingEnterpriseSpecialityRepositoryMockRecorder) FindBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingEnterpriseID", reflect.TypeOf((*MockSendingEnterpriseSpecialityRepository)(nil).FindBySendingEnterpriseID), sendingEnterpriseID)
}

// Update mocks base method.
func (m *MockSendingEnterpriseSpecialityRepository) Update(speciality *entity.SendingEnterpriseSpeciality) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", speciality)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSendingEnterpriseSpecialityRepositoryMockRecorder) Update(speciality any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSendingEnterpriseSpecialityRepository)(nil).Update), speciality)
}

// UpdateImageURLBySendingEnterpriseID mocks base method.
func (m *MockSendingEnterpriseSpecialityRepository) UpdateImageURLBySendingEnterpriseID(sendingEnterpriseID uint, imageURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageURLBySendingEnterpriseID", sendingEnterpriseID, imageURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImageURLBySendingEnterpriseID indicates an expected call of UpdateImageURLBySendingEnterpriseID.
func (mr *MockSendingEnterpriseSpecialityRepositoryMockRecorder) UpdateImageURLBySendingEnterpriseID(sendingEnterpriseID, imageURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageURLBySendingEnterpriseID", reflect.TypeOf((*MockSendingEnterpriseSpecialityRepository)(nil).UpdateImageURLBySendingEnterpriseID), sendingEnterpriseID, imageURL)
}

// MockSendingBillingAddressRepository is a mock of SendingBillingAddressRepository interface.
type MockSendingBillingAddressRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingBillingAddressRepositoryMockRecorder
}

// MockSendingBillingAddressRepositoryMockRecorder is the mock recorder for MockSendingBillingAddressRepository.
type MockSendingBillingAddressRepositoryMockRecorder struct {
	mock *MockSendingBillingAddressRepository
}

// NewMockSendingBillingAddressRepository creates a new mock instance.
func NewMockSendingBillingAddressRepository(ctrl *gomock.Controller) *MockSendingBillingAddressRepository {
	mock := &MockSendingBillingAddressRepository{ctrl: ctrl}
	mock.recorder = &MockSendingBillingAddressRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingBillingAddressRepository) EXPECT() *MockSendingBillingAddressRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockSendingBillingAddressRepository) All() ([]*entity.SendingBillingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.SendingBillingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockSendingBillingAddressRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockSendingBillingAddressRepository)(nil).All))
}

// Create mocks base method.
func (m *MockSendingBillingAddressRepository) Create(billingAddress *entity.SendingBillingAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", billingAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingBillingAddressRepositoryMockRecorder) Create(billingAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingBillingAddressRepository)(nil).Create), billingAddress)
}

// Delete mocks base method.
func (m *MockSendingBillingAddressRepository) Delete(billingAddressID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", billingAddressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingBillingAddressRepositoryMockRecorder) Delete(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingBillingAddressRepository)(nil).Delete), billingAddressID)
}

// FindByID mocks base method.
func (m *MockSendingBillingAddressRepository) FindByID(billingAddressID uint) (*entity.SendingBillingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", billingAddressID)
	ret0, _ := ret[0].(*entity.SendingBillingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSendingBillingAddressRepositoryMockRecorder) FindByID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSendingBillingAddressRepository)(nil).FindByID), billingAddressID)
}

// FindBySendingEnterpriseID mocks base method.
func (m *MockSendingBillingAddressRepository) FindBySendingEnterpriseID(enterpriseID uint) (*entity.SendingBillingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingEnterpriseID", enterpriseID)
	ret0, _ := ret[0].(*entity.SendingBillingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingEnterpriseID indicates an expected call of FindBySendingEnterpriseID.
func (mr *MockSendingBillingAddressRepositoryMockRecorder) FindBySendingEnterpriseID(enterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingEnterpriseID", reflect.TypeOf((*MockSendingBillingAddressRepository)(nil).FindBySendingEnterpriseID), enterpriseID)
}

// GetByIDList mocks base method.
func (m *MockSendingBillingAddressRepository) GetByIDList(billingAddressIDList []uint) ([]*entity.SendingBillingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDList", billingAddressIDList)
	ret0, _ := ret[0].([]*entity.SendingBillingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDList indicates an expected call of GetByIDList.
func (mr *MockSendingBillingAddressRepositoryMockRecorder) GetByIDList(billingAddressIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDList", reflect.TypeOf((*MockSendingBillingAddressRepository)(nil).GetByIDList), billingAddressIDList)
}

// GetBySendingEnterpriseIDList mocks base method.
func (m *MockSendingBillingAddressRepository) GetBySendingEnterpriseIDList(enterpriseIDList []uint) ([]*entity.SendingBillingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySendingEnterpriseIDList", enterpriseIDList)
	ret0, _ := ret[0].([]*entity.SendingBillingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySendingEnterpriseIDList indicates an expected call of GetBySendingEnterpriseIDList.
func (mr *MockSendingBillingAddressRepositoryMockRecorder) GetBySendingEnterpriseIDList(enterpriseIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySendingEnterpriseIDList", reflect.TypeOf((*MockSendingBillingAddressRepository)(nil).GetBySendingEnterpriseIDList), enterpriseIDList)
}

// Update mocks base method.
func (m *MockSendingBillingAddressRepository) Update(billingAddress *entity.SendingBillingAddress, billingAddressID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", billingAddress, billingAddressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSendingBillingAddressRepositoryMockRecorder) Update(billingAddress, billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSendingBillingAddressRepository)(nil).Update), billingAddress, billingAddressID)
}

// MockSendingBillingAddressStaffRepository is a mock of SendingBillingAddressStaffRepository interface.
type MockSendingBillingAddressStaffRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingBillingAddressStaffRepositoryMockRecorder
}

// MockSendingBillingAddressStaffRepositoryMockRecorder is the mock recorder for MockSendingBillingAddressStaffRepository.
type MockSendingBillingAddressStaffRepositoryMockRecorder struct {
	mock *MockSendingBillingAddressStaffRepository
}

// NewMockSendingBillingAddressStaffRepository creates a new mock instance.
func NewMockSendingBillingAddressStaffRepository(ctrl *gomock.Controller) *MockSendingBillingAddressStaffRepository {
	mock := &MockSendingBillingAddressStaffRepository{ctrl: ctrl}
	mock.recorder = &MockSendingBillingAddressStaffRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingBillingAddressStaffRepository) EXPECT() *MockSendingBillingAddressStaffRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockSendingBillingAddressStaffRepository) All() ([]*entity.SendingBillingAddressStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*entity.SendingBillingAddressStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockSendingBillingAddressStaffRepositoryMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockSendingBillingAddressStaffRepository)(nil).All))
}

// Create mocks base method.
func (m *MockSendingBillingAddressStaffRepository) Create(staff *entity.SendingBillingAddressStaff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", staff)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingBillingAddressStaffRepositoryMockRecorder) Create(staff any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingBillingAddressStaffRepository)(nil).Create), staff)
}

// Delete mocks base method.
func (m *MockSendingBillingAddressStaffRepository) Delete(billingAddressID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", billingAddressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingBillingAddressStaffRepositoryMockRecorder) Delete(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingBillingAddressStaffRepository)(nil).Delete), billingAddressID)
}

// FindBySendingBillingAddressID mocks base method.
func (m *MockSendingBillingAddressStaffRepository) FindBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingBillingAddressStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingBillingAddressStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingBillingAddressID indicates an expected call of FindBySendingBillingAddressID.
func (mr *MockSendingBillingAddressStaffRepositoryMockRecorder) FindBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingBillingAddressID", reflect.TypeOf((*MockSendingBillingAddressStaffRepository)(nil).FindBySendingBillingAddressID), billingAddressID)
}

// GetByAgentID mocks base method.
func (m *MockSendingBillingAddressStaffRepository) GetByAgentID(agentID uint) ([]*entity.SendingBillingAddressStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingBillingAddressStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAgentID indicates an expected call of GetByAgentID.
func (mr *MockSendingBillingAddressStaffRepositoryMockRecorder) GetByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAgentID", reflect.TypeOf((*MockSendingBillingAddressStaffRepository)(nil).GetByAgentID), agentID)
}

// GetByBillingAdressIDList mocks base method.
func (m *MockSendingBillingAddressStaffRepository) GetByBillingAdressIDList(billingAddressIDList []uint) ([]*entity.SendingBillingAddressStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBillingAdressIDList", billingAddressIDList)
	ret0, _ := ret[0].([]*entity.SendingBillingAddressStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBillingAdressIDList indicates an expected call of GetByBillingAdressIDList.
func (mr *MockSendingBillingAddressStaffRepositoryMockRecorder) GetByBillingAdressIDList(billingAddressIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBillingAdressIDList", reflect.TypeOf((*MockSendingBillingAddressStaffRepository)(nil).GetByBillingAdressIDList), billingAddressIDList)
}

// MockSendingJobInformationRepository is a mock of SendingJobInformationRepository interface.
type MockSendingJobInformationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationRepositoryMockRecorder
}

// MockSendingJobInformationRepositoryMockRecorder is the mock recorder for MockSendingJobInformationRepository.
type MockSendingJobInformationRepositoryMockRecorder struct {
	mock *MockSendingJobInformationRepository
}

// NewMockSendingJobInformationRepository creates a new mock instance.
func NewMockSendingJobInformationRepository(ctrl *gomock.Controller) *MockSendingJobInformationRepository {
	mock := &MockSendingJobInformationRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationRepository) EXPECT() *MockSendingJobInformationRepositoryMockRecorder {
	return m.recorder
}

// CountByAgentID mocks base method.
func (m *MockSendingJobInformationRepository) CountByAgentID(agentID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByAgentID", agentID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByAgentID indicates an expected call of CountByAgentID.
func (mr *MockSendingJobInformationRepositoryMockRecorder) CountByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByAgentID", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).CountByAgentID), agentID)
}

// Create mocks base method.
func (m *MockSendingJobInformationRepository) Create(sendingJobInformation *entity.SendingJobInformation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", sendingJobInformation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationRepositoryMockRecorder) Create(sendingJobInformation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).Create), sendingJobInformation)
}

// Delete mocks base method.
func (m *MockSendingJobInformationRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).Delete), sendingJobInformationID)
}

// DeleteBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationRepository) DeleteBySendingBillingAddressID(billingAddressID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBySendingBillingAddressID indicates an expected call of DeleteBySendingBillingAddressID.
func (mr *MockSendingJobInformationRepositoryMockRecorder) DeleteBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).DeleteBySendingBillingAddressID), billingAddressID)
}

// FindByID mocks base method.
func (m *MockSendingJobInformationRepository) FindByID(sendingJobInformationD uint) (*entity.SendingJobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", sendingJobInformationD)
	ret0, _ := ret[0].(*entity.SendingJobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSendingJobInformationRepositoryMockRecorder) FindByID(sendingJobInformationD any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).FindByID), sendingJobInformationD)
}

// FindByUUID mocks base method.
func (m *MockSendingJobInformationRepository) FindByUUID(uuid uuid.UUID) (*entity.SendingJobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", uuid)
	ret0, _ := ret[0].(*entity.SendingJobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockSendingJobInformationRepositoryMockRecorder) FindByUUID(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).FindByUUID), uuid)
}

// GetActiveList mocks base method.
func (m *MockSendingJobInformationRepository) GetActiveList() ([]*entity.SendingJobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveList")
	ret0, _ := ret[0].([]*entity.SendingJobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveList indicates an expected call of GetActiveList.
func (mr *MockSendingJobInformationRepositoryMockRecorder) GetActiveList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveList", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).GetActiveList))
}

// GetAll mocks base method.
func (m *MockSendingJobInformationRepository) GetAll() ([]*entity.SendingJobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingEnterpriseIDList mocks base method.
func (m *MockSendingJobInformationRepository) GetListBySendingEnterpriseIDList(enterpriseIDList []uint) ([]*entity.SendingJobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseIDList", enterpriseIDList)
	ret0, _ := ret[0].([]*entity.SendingJobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseIDList indicates an expected call of GetListBySendingEnterpriseIDList.
func (mr *MockSendingJobInformationRepositoryMockRecorder) GetListBySendingEnterpriseIDList(enterpriseIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseIDList", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).GetListBySendingEnterpriseIDList), enterpriseIDList)
}

// GetListBySendingEnterpriseIDListAndFreeWord mocks base method.
func (m *MockSendingJobInformationRepository) GetListBySendingEnterpriseIDListAndFreeWord(enterpriseIDStrList []uint, freeWord string) ([]*entity.SendingJobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseIDListAndFreeWord", enterpriseIDStrList, freeWord)
	ret0, _ := ret[0].([]*entity.SendingJobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseIDListAndFreeWord indicates an expected call of GetListBySendingEnterpriseIDListAndFreeWord.
func (mr *MockSendingJobInformationRepositoryMockRecorder) GetListBySendingEnterpriseIDListAndFreeWord(enterpriseIDStrList, freeWord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseIDListAndFreeWord", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).GetListBySendingEnterpriseIDListAndFreeWord), enterpriseIDStrList, freeWord)
}

// Update mocks base method.
func (m *MockSendingJobInformationRepository) Update(sendingJobInformation *entity.SendingJobInformation, sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", sendingJobInformation, sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSendingJobInformationRepositoryMockRecorder) Update(sendingJobInformation, sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSendingJobInformationRepository)(nil).Update), sendingJobInformation, sendingJobInformationID)
}

// MockSendingJobInformationTargetRepository is a mock of SendingJobInformationTargetRepository interface.
type MockSendingJobInformationTargetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationTargetRepositoryMockRecorder
}

// MockSendingJobInformationTargetRepositoryMockRecorder is the mock recorder for MockSendingJobInformationTargetRepository.
type MockSendingJobInformationTargetRepositoryMockRecorder struct {
	mock *MockSendingJobInformationTargetRepository
}

// NewMockSendingJobInformationTargetRepository creates a new mock instance.
func NewMockSendingJobInformationTargetRepository(ctrl *gomock.Controller) *MockSendingJobInformationTargetRepository {
	mock := &MockSendingJobInformationTargetRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationTargetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationTargetRepository) EXPECT() *MockSendingJobInformationTargetRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationTargetRepository) Create(target *entity.SendingJobInformationTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationTargetRepositoryMockRecorder) Create(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationTargetRepository)(nil).Create), target)
}

// Delete mocks base method.
func (m *MockSendingJobInformationTargetRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationTargetRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationTargetRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationTargetRepository) GetAll() ([]*entity.SendingJobInformationTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationTargetRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationTargetRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationTargetRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationTargetRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationTargetRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationTargetRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationTargetRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationTargetRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationTargetRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationTargetRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationTargetRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationTargetRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationTargetRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationTargetRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationOccupationRepository is a mock of SendingJobInformationOccupationRepository interface.
type MockSendingJobInformationOccupationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationOccupationRepositoryMockRecorder
}

// MockSendingJobInformationOccupationRepositoryMockRecorder is the mock recorder for MockSendingJobInformationOccupationRepository.
type MockSendingJobInformationOccupationRepositoryMockRecorder struct {
	mock *MockSendingJobInformationOccupationRepository
}

// NewMockSendingJobInformationOccupationRepository creates a new mock instance.
func NewMockSendingJobInformationOccupationRepository(ctrl *gomock.Controller) *MockSendingJobInformationOccupationRepository {
	mock := &MockSendingJobInformationOccupationRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationOccupationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationOccupationRepository) EXPECT() *MockSendingJobInformationOccupationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationOccupationRepository) Create(occupation *entity.SendingJobInformationOccupation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", occupation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationOccupationRepositoryMockRecorder) Create(occupation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationOccupationRepository)(nil).Create), occupation)
}

// Delete mocks base method.
func (m *MockSendingJobInformationOccupationRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationOccupationRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationOccupationRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationOccupationRepository) GetAll() ([]*entity.SendingJobInformationOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationOccupationRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationOccupationRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationOccupationRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationOccupationRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationOccupationRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationOccupationRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationOccupationRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationOccupationRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationOccupationRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationOccupationRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationOccupationRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationOccupationRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationOccupationRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationOccupationRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationFeatureRepository is a mock of SendingJobInformationFeatureRepository interface.
type MockSendingJobInformationFeatureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationFeatureRepositoryMockRecorder
}

// MockSendingJobInformationFeatureRepositoryMockRecorder is the mock recorder for MockSendingJobInformationFeatureRepository.
type MockSendingJobInformationFeatureRepositoryMockRecorder struct {
	mock *MockSendingJobInformationFeatureRepository
}

// NewMockSendingJobInformationFeatureRepository creates a new mock instance.
func NewMockSendingJobInformationFeatureRepository(ctrl *gomock.Controller) *MockSendingJobInformationFeatureRepository {
	mock := &MockSendingJobInformationFeatureRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationFeatureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationFeatureRepository) EXPECT() *MockSendingJobInformationFeatureRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationFeatureRepository) Create(feature *entity.SendingJobInformationFeature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", feature)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationFeatureRepositoryMockRecorder) Create(feature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationFeatureRepository)(nil).Create), feature)
}

// Delete mocks base method.
func (m *MockSendingJobInformationFeatureRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationFeatureRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationFeatureRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationFeatureRepository) GetAll() ([]*entity.SendingJobInformationFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationFeatureRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationFeatureRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationFeatureRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationFeatureRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationFeatureRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationFeatureRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationFeatureRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationFeatureRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationFeatureRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationFeatureRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationFeatureRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationFeatureRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationFeature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationFeature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationFeatureRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationFeatureRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationPrefectureRepository is a mock of SendingJobInformationPrefectureRepository interface.
type MockSendingJobInformationPrefectureRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationPrefectureRepositoryMockRecorder
}

// MockSendingJobInformationPrefectureRepositoryMockRecorder is the mock recorder for MockSendingJobInformationPrefectureRepository.
type MockSendingJobInformationPrefectureRepositoryMockRecorder struct {
	mock *MockSendingJobInformationPrefectureRepository
}

// NewMockSendingJobInformationPrefectureRepository creates a new mock instance.
func NewMockSendingJobInformationPrefectureRepository(ctrl *gomock.Controller) *MockSendingJobInformationPrefectureRepository {
	mock := &MockSendingJobInformationPrefectureRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationPrefectureRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationPrefectureRepository) EXPECT() *MockSendingJobInformationPrefectureRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationPrefectureRepository) Create(prefecture *entity.SendingJobInformationPrefecture) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", prefecture)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationPrefectureRepositoryMockRecorder) Create(prefecture any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationPrefectureRepository)(nil).Create), prefecture)
}

// Delete mocks base method.
func (m *MockSendingJobInformationPrefectureRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationPrefectureRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationPrefectureRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationPrefectureRepository) GetAll() ([]*entity.SendingJobInformationPrefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationPrefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationPrefectureRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationPrefectureRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationPrefectureRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationPrefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationPrefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationPrefectureRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationPrefectureRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationPrefectureRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationPrefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationPrefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationPrefectureRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationPrefectureRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationPrefectureRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationPrefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationPrefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationPrefectureRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationPrefectureRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationPrefectureRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationPrefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationPrefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationPrefectureRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationPrefectureRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationWorkCharmPointRepository is a mock of SendingJobInformationWorkCharmPointRepository interface.
type MockSendingJobInformationWorkCharmPointRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationWorkCharmPointRepositoryMockRecorder
}

// MockSendingJobInformationWorkCharmPointRepositoryMockRecorder is the mock recorder for MockSendingJobInformationWorkCharmPointRepository.
type MockSendingJobInformationWorkCharmPointRepositoryMockRecorder struct {
	mock *MockSendingJobInformationWorkCharmPointRepository
}

// NewMockSendingJobInformationWorkCharmPointRepository creates a new mock instance.
func NewMockSendingJobInformationWorkCharmPointRepository(ctrl *gomock.Controller) *MockSendingJobInformationWorkCharmPointRepository {
	mock := &MockSendingJobInformationWorkCharmPointRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationWorkCharmPointRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationWorkCharmPointRepository) EXPECT() *MockSendingJobInformationWorkCharmPointRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationWorkCharmPointRepository) Create(workCharmPoint *entity.SendingJobInformationWorkCharmPoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", workCharmPoint)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationWorkCharmPointRepositoryMockRecorder) Create(workCharmPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationWorkCharmPointRepository)(nil).Create), workCharmPoint)
}

// Delete mocks base method.
func (m *MockSendingJobInformationWorkCharmPointRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationWorkCharmPointRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationWorkCharmPointRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationWorkCharmPointRepository) GetAll() ([]*entity.SendingJobInformationWorkCharmPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationWorkCharmPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationWorkCharmPointRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationWorkCharmPointRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationWorkCharmPointRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationWorkCharmPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationWorkCharmPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationWorkCharmPointRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationWorkCharmPointRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationWorkCharmPointRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationWorkCharmPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationWorkCharmPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationWorkCharmPointRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationWorkCharmPointRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationWorkCharmPointRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationWorkCharmPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationWorkCharmPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationWorkCharmPointRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationWorkCharmPointRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationWorkCharmPointRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationWorkCharmPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationWorkCharmPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationWorkCharmPointRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationWorkCharmPointRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationEmploymentStatusRepository is a mock of SendingJobInformationEmploymentStatusRepository interface.
type MockSendingJobInformationEmploymentStatusRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationEmploymentStatusRepositoryMockRecorder
}

// MockSendingJobInformationEmploymentStatusRepositoryMockRecorder is the mock recorder for MockSendingJobInformationEmploymentStatusRepository.
type MockSendingJobInformationEmploymentStatusRepositoryMockRecorder struct {
	mock *MockSendingJobInformationEmploymentStatusRepository
}

// NewMockSendingJobInformationEmploymentStatusRepository creates a new mock instance.
func NewMockSendingJobInformationEmploymentStatusRepository(ctrl *gomock.Controller) *MockSendingJobInformationEmploymentStatusRepository {
	mock := &MockSendingJobInformationEmploymentStatusRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationEmploymentStatusRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationEmploymentStatusRepository) EXPECT() *MockSendingJobInformationEmploymentStatusRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationEmploymentStatusRepository) Create(employmentStatus *entity.SendingJobInformationEmploymentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", employmentStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationEmploymentStatusRepositoryMockRecorder) Create(employmentStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationEmploymentStatusRepository)(nil).Create), employmentStatus)
}

// Delete mocks base method.
func (m *MockSendingJobInformationEmploymentStatusRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationEmploymentStatusRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationEmploymentStatusRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationEmploymentStatusRepository) GetAll() ([]*entity.SendingJobInformationEmploymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationEmploymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationEmploymentStatusRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationEmploymentStatusRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationEmploymentStatusRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationEmploymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationEmploymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationEmploymentStatusRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationEmploymentStatusRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationEmploymentStatusRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationEmploymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationEmploymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationEmploymentStatusRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationEmploymentStatusRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationEmploymentStatusRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationEmploymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationEmploymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationEmploymentStatusRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationEmploymentStatusRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationEmploymentStatusRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationEmploymentStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationEmploymentStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationEmploymentStatusRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationEmploymentStatusRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationRequiredConditionRepository is a mock of SendingJobInformationRequiredConditionRepository interface.
type MockSendingJobInformationRequiredConditionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationRequiredConditionRepositoryMockRecorder
}

// MockSendingJobInformationRequiredConditionRepositoryMockRecorder is the mock recorder for MockSendingJobInformationRequiredConditionRepository.
type MockSendingJobInformationRequiredConditionRepositoryMockRecorder struct {
	mock *MockSendingJobInformationRequiredConditionRepository
}

// NewMockSendingJobInformationRequiredConditionRepository creates a new mock instance.
func NewMockSendingJobInformationRequiredConditionRepository(ctrl *gomock.Controller) *MockSendingJobInformationRequiredConditionRepository {
	mock := &MockSendingJobInformationRequiredConditionRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationRequiredConditionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationRequiredConditionRepository) EXPECT() *MockSendingJobInformationRequiredConditionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationRequiredConditionRepository) Create(requiredCondition *entity.SendingJobInformationRequiredCondition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredCondition)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationRequiredConditionRepositoryMockRecorder) Create(requiredCondition any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationRequiredConditionRepository)(nil).Create), requiredCondition)
}

// Delete mocks base method.
func (m *MockSendingJobInformationRequiredConditionRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationRequiredConditionRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationRequiredConditionRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationRequiredConditionRepository) GetAll() ([]*entity.SendingJobInformationRequiredCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationRequiredConditionRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationRequiredConditionRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationRequiredConditionRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationRequiredCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationRequiredConditionRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationRequiredConditionRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationRequiredConditionRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationRequiredCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationRequiredConditionRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationRequiredConditionRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationRequiredConditionRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationRequiredCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationRequiredConditionRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationRequiredConditionRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationRequiredConditionRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationRequiredCondition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredCondition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationRequiredConditionRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationRequiredConditionRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationRequiredLicenseRepository is a mock of SendingJobInformationRequiredLicenseRepository interface.
type MockSendingJobInformationRequiredLicenseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationRequiredLicenseRepositoryMockRecorder
}

// MockSendingJobInformationRequiredLicenseRepositoryMockRecorder is the mock recorder for MockSendingJobInformationRequiredLicenseRepository.
type MockSendingJobInformationRequiredLicenseRepositoryMockRecorder struct {
	mock *MockSendingJobInformationRequiredLicenseRepository
}

// NewMockSendingJobInformationRequiredLicenseRepository creates a new mock instance.
func NewMockSendingJobInformationRequiredLicenseRepository(ctrl *gomock.Controller) *MockSendingJobInformationRequiredLicenseRepository {
	mock := &MockSendingJobInformationRequiredLicenseRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationRequiredLicenseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationRequiredLicenseRepository) EXPECT() *MockSendingJobInformationRequiredLicenseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationRequiredLicenseRepository) Create(requiredLicense *entity.SendingJobInformationRequiredLicense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredLicense)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationRequiredLicenseRepositoryMockRecorder) Create(requiredLicense any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationRequiredLicenseRepository)(nil).Create), requiredLicense)
}

// Delete mocks base method.
func (m *MockSendingJobInformationRequiredLicenseRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationRequiredLicenseRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationRequiredLicenseRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationRequiredLicenseRepository) GetAll() ([]*entity.SendingJobInformationRequiredLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationRequiredLicenseRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationRequiredLicenseRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationRequiredLicenseRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationRequiredLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationRequiredLicenseRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationRequiredLicenseRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationRequiredLicenseRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationRequiredLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationRequiredLicenseRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationRequiredLicenseRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationRequiredLicenseRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationRequiredLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationRequiredLicenseRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationRequiredLicenseRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationRequiredLicenseRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationRequiredLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationRequiredLicenseRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationRequiredLicenseRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationRequiredPCToolRepository is a mock of SendingJobInformationRequiredPCToolRepository interface.
type MockSendingJobInformationRequiredPCToolRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationRequiredPCToolRepositoryMockRecorder
}

// MockSendingJobInformationRequiredPCToolRepositoryMockRecorder is the mock recorder for MockSendingJobInformationRequiredPCToolRepository.
type MockSendingJobInformationRequiredPCToolRepositoryMockRecorder struct {
	mock *MockSendingJobInformationRequiredPCToolRepository
}

// NewMockSendingJobInformationRequiredPCToolRepository creates a new mock instance.
func NewMockSendingJobInformationRequiredPCToolRepository(ctrl *gomock.Controller) *MockSendingJobInformationRequiredPCToolRepository {
	mock := &MockSendingJobInformationRequiredPCToolRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationRequiredPCToolRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationRequiredPCToolRepository) EXPECT() *MockSendingJobInformationRequiredPCToolRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationRequiredPCToolRepository) Create(pcTool *entity.SendingJobInformationRequiredPCTool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", pcTool)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationRequiredPCToolRepositoryMockRecorder) Create(pcTool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationRequiredPCToolRepository)(nil).Create), pcTool)
}

// Delete mocks base method.
func (m *MockSendingJobInformationRequiredPCToolRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationRequiredPCToolRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationRequiredPCToolRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationRequiredPCToolRepository) GetAll() ([]*entity.SendingJobInformationRequiredPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationRequiredPCToolRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationRequiredPCToolRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationRequiredPCToolRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationRequiredPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationRequiredPCToolRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationRequiredPCToolRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationRequiredPCToolRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationRequiredPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationRequiredPCToolRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationRequiredPCToolRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationRequiredPCToolRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationRequiredPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationRequiredPCToolRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationRequiredPCToolRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationRequiredPCToolRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationRequiredPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationRequiredPCToolRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationRequiredPCToolRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationRequiredLanguageRepository is a mock of SendingJobInformationRequiredLanguageRepository interface.
type MockSendingJobInformationRequiredLanguageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationRequiredLanguageRepositoryMockRecorder
}

// MockSendingJobInformationRequiredLanguageRepositoryMockRecorder is the mock recorder for MockSendingJobInformationRequiredLanguageRepository.
type MockSendingJobInformationRequiredLanguageRepositoryMockRecorder struct {
	mock *MockSendingJobInformationRequiredLanguageRepository
}

// NewMockSendingJobInformationRequiredLanguageRepository creates a new mock instance.
func NewMockSendingJobInformationRequiredLanguageRepository(ctrl *gomock.Controller) *MockSendingJobInformationRequiredLanguageRepository {
	mock := &MockSendingJobInformationRequiredLanguageRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationRequiredLanguageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationRequiredLanguageRepository) EXPECT() *MockSendingJobInformationRequiredLanguageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationRequiredLanguageRepository) Create(requiredLanguage *entity.SendingJobInformationRequiredLanguage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredLanguage)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationRequiredLanguageRepositoryMockRecorder) Create(requiredLanguage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageRepository)(nil).Create), requiredLanguage)
}

// Delete mocks base method.
func (m *MockSendingJobInformationRequiredLanguageRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationRequiredLanguageRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationRequiredLanguageRepository) GetAll() ([]*entity.SendingJobInformationRequiredLanguage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLanguage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationRequiredLanguageRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationRequiredLanguageRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationRequiredLanguage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLanguage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationRequiredLanguageRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationRequiredLanguageRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationRequiredLanguage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLanguage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationRequiredLanguageRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationRequiredLanguageRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationRequiredLanguage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLanguage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationRequiredLanguageRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationRequiredLanguageRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationRequiredLanguage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLanguage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationRequiredLanguageRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationRequiredLanguageTypeRepository is a mock of SendingJobInformationRequiredLanguageTypeRepository interface.
type MockSendingJobInformationRequiredLanguageTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationRequiredLanguageTypeRepositoryMockRecorder
}

// MockSendingJobInformationRequiredLanguageTypeRepositoryMockRecorder is the mock recorder for MockSendingJobInformationRequiredLanguageTypeRepository.
type MockSendingJobInformationRequiredLanguageTypeRepositoryMockRecorder struct {
	mock *MockSendingJobInformationRequiredLanguageTypeRepository
}

// NewMockSendingJobInformationRequiredLanguageTypeRepository creates a new mock instance.
func NewMockSendingJobInformationRequiredLanguageTypeRepository(ctrl *gomock.Controller) *MockSendingJobInformationRequiredLanguageTypeRepository {
	mock := &MockSendingJobInformationRequiredLanguageTypeRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationRequiredLanguageTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationRequiredLanguageTypeRepository) EXPECT() *MockSendingJobInformationRequiredLanguageTypeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationRequiredLanguageTypeRepository) Create(requiredLanguageType *entity.SendingJobInformationRequiredLanguageType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredLanguageType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationRequiredLanguageTypeRepositoryMockRecorder) Create(requiredLanguageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageTypeRepository)(nil).Create), requiredLanguageType)
}

// Delete mocks base method.
func (m *MockSendingJobInformationRequiredLanguageTypeRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationRequiredLanguageTypeRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageTypeRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationRequiredLanguageTypeRepository) GetAll() ([]*entity.SendingJobInformationRequiredLanguageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLanguageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationRequiredLanguageTypeRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageTypeRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationRequiredLanguageTypeRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationRequiredLanguageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLanguageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationRequiredLanguageTypeRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageTypeRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationRequiredLanguageTypeRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationRequiredLanguageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLanguageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationRequiredLanguageTypeRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageTypeRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationRequiredLanguageTypeRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationRequiredLanguageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLanguageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationRequiredLanguageTypeRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageTypeRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationRequiredLanguageTypeRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationRequiredLanguageType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredLanguageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationRequiredLanguageTypeRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationRequiredLanguageTypeRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationRequiredExperienceDevelopmentRepository is a mock of SendingJobInformationRequiredExperienceDevelopmentRepository interface.
type MockSendingJobInformationRequiredExperienceDevelopmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder
}

// MockSendingJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder is the mock recorder for MockSendingJobInformationRequiredExperienceDevelopmentRepository.
type MockSendingJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder struct {
	mock *MockSendingJobInformationRequiredExperienceDevelopmentRepository
}

// NewMockSendingJobInformationRequiredExperienceDevelopmentRepository creates a new mock instance.
func NewMockSendingJobInformationRequiredExperienceDevelopmentRepository(ctrl *gomock.Controller) *MockSendingJobInformationRequiredExperienceDevelopmentRepository {
	mock := &MockSendingJobInformationRequiredExperienceDevelopmentRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentRepository) EXPECT() *MockSendingJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentRepository) Create(requiredExperienceDevelopment *entity.SendingJobInformationRequiredExperienceDevelopment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredExperienceDevelopment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) Create(requiredExperienceDevelopment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentRepository)(nil).Create), requiredExperienceDevelopment)
}

// Delete mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentRepository) GetAll() ([]*entity.SendingJobInformationRequiredExperienceDevelopment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceDevelopment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationRequiredExperienceDevelopment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceDevelopment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationRequiredExperienceDevelopment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceDevelopment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationRequiredExperienceDevelopment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceDevelopment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationRequiredExperienceDevelopment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceDevelopment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository is a mock of SendingJobInformationRequiredExperienceDevelopmentTypeRepository interface.
type MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder
}

// MockSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder is the mock recorder for MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository.
type MockSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder struct {
	mock *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository
}

// NewMockSendingJobInformationRequiredExperienceDevelopmentTypeRepository creates a new mock instance.
func NewMockSendingJobInformationRequiredExperienceDevelopmentTypeRepository(ctrl *gomock.Controller) *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository {
	mock := &MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository) EXPECT() *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository) Create(requiredExperienceDevelopmentType *entity.SendingJobInformationRequiredExperienceDevelopmentType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredExperienceDevelopmentType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) Create(requiredExperienceDevelopmentType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).Create), requiredExperienceDevelopmentType)
}

// Delete mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository) GetAll() ([]*entity.SendingJobInformationRequiredExperienceDevelopmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceDevelopmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationRequiredExperienceDevelopmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceDevelopmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationRequiredExperienceDevelopmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceDevelopmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationRequiredExperienceDevelopmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceDevelopmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationRequiredExperienceDevelopmentType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceDevelopmentType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceDevelopmentTypeRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationRequiredExperienceJobRepository is a mock of SendingJobInformationRequiredExperienceJobRepository interface.
type MockSendingJobInformationRequiredExperienceJobRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationRequiredExperienceJobRepositoryMockRecorder
}

// MockSendingJobInformationRequiredExperienceJobRepositoryMockRecorder is the mock recorder for MockSendingJobInformationRequiredExperienceJobRepository.
type MockSendingJobInformationRequiredExperienceJobRepositoryMockRecorder struct {
	mock *MockSendingJobInformationRequiredExperienceJobRepository
}

// NewMockSendingJobInformationRequiredExperienceJobRepository creates a new mock instance.
func NewMockSendingJobInformationRequiredExperienceJobRepository(ctrl *gomock.Controller) *MockSendingJobInformationRequiredExperienceJobRepository {
	mock := &MockSendingJobInformationRequiredExperienceJobRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationRequiredExperienceJobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationRequiredExperienceJobRepository) EXPECT() *MockSendingJobInformationRequiredExperienceJobRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationRequiredExperienceJobRepository) Create(requiredExperienceJob *entity.SendingJobInformationRequiredExperienceJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredExperienceJob)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationRequiredExperienceJobRepositoryMockRecorder) Create(requiredExperienceJob any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceJobRepository)(nil).Create), requiredExperienceJob)
}

// Delete mocks base method.
func (m *MockSendingJobInformationRequiredExperienceJobRepository) Delete(experienceJobID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", experienceJobID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationRequiredExperienceJobRepositoryMockRecorder) Delete(experienceJobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceJobRepository)(nil).Delete), experienceJobID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationRequiredExperienceJobRepository) GetAll() ([]*entity.SendingJobInformationRequiredExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationRequiredExperienceJobRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceJobRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationRequiredExperienceJobRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationRequiredExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationRequiredExperienceJobRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceJobRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceJobRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationRequiredExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationRequiredExperienceJobRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceJobRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceJobRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationRequiredExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationRequiredExperienceJobRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceJobRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceJobRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationRequiredExperienceJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationRequiredExperienceJobRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceJobRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationRequiredExperienceIndustryRepository is a mock of SendingJobInformationRequiredExperienceIndustryRepository interface.
type MockSendingJobInformationRequiredExperienceIndustryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationRequiredExperienceIndustryRepositoryMockRecorder
}

// MockSendingJobInformationRequiredExperienceIndustryRepositoryMockRecorder is the mock recorder for MockSendingJobInformationRequiredExperienceIndustryRepository.
type MockSendingJobInformationRequiredExperienceIndustryRepositoryMockRecorder struct {
	mock *MockSendingJobInformationRequiredExperienceIndustryRepository
}

// NewMockSendingJobInformationRequiredExperienceIndustryRepository creates a new mock instance.
func NewMockSendingJobInformationRequiredExperienceIndustryRepository(ctrl *gomock.Controller) *MockSendingJobInformationRequiredExperienceIndustryRepository {
	mock := &MockSendingJobInformationRequiredExperienceIndustryRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationRequiredExperienceIndustryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationRequiredExperienceIndustryRepository) EXPECT() *MockSendingJobInformationRequiredExperienceIndustryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationRequiredExperienceIndustryRepository) Create(requiredExperienceIndustry *entity.SendingJobInformationRequiredExperienceIndustry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredExperienceIndustry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationRequiredExperienceIndustryRepositoryMockRecorder) Create(requiredExperienceIndustry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceIndustryRepository)(nil).Create), requiredExperienceIndustry)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationRequiredExperienceIndustryRepository) GetAll() ([]*entity.SendingJobInformationRequiredExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationRequiredExperienceIndustryRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceIndustryRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationRequiredExperienceIndustryRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationRequiredExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationRequiredExperienceIndustryRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceIndustryRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceIndustryRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationRequiredExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationRequiredExperienceIndustryRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceIndustryRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceIndustryRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationRequiredExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationRequiredExperienceIndustryRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceIndustryRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceIndustryRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationRequiredExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationRequiredExperienceIndustryRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceIndustryRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationRequiredExperienceOccupationRepository is a mock of SendingJobInformationRequiredExperienceOccupationRepository interface.
type MockSendingJobInformationRequiredExperienceOccupationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationRequiredExperienceOccupationRepositoryMockRecorder
}

// MockSendingJobInformationRequiredExperienceOccupationRepositoryMockRecorder is the mock recorder for MockSendingJobInformationRequiredExperienceOccupationRepository.
type MockSendingJobInformationRequiredExperienceOccupationRepositoryMockRecorder struct {
	mock *MockSendingJobInformationRequiredExperienceOccupationRepository
}

// NewMockSendingJobInformationRequiredExperienceOccupationRepository creates a new mock instance.
func NewMockSendingJobInformationRequiredExperienceOccupationRepository(ctrl *gomock.Controller) *MockSendingJobInformationRequiredExperienceOccupationRepository {
	mock := &MockSendingJobInformationRequiredExperienceOccupationRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationRequiredExperienceOccupationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationRequiredExperienceOccupationRepository) EXPECT() *MockSendingJobInformationRequiredExperienceOccupationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationRequiredExperienceOccupationRepository) Create(requiredExperienceOccupation *entity.SendingJobInformationRequiredExperienceOccupation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredExperienceOccupation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationRequiredExperienceOccupationRepositoryMockRecorder) Create(requiredExperienceOccupation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceOccupationRepository)(nil).Create), requiredExperienceOccupation)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationRequiredExperienceOccupationRepository) GetAll() ([]*entity.SendingJobInformationRequiredExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationRequiredExperienceOccupationRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceOccupationRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationRequiredExperienceOccupationRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationRequiredExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationRequiredExperienceOccupationRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceOccupationRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceOccupationRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationRequiredExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationRequiredExperienceOccupationRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceOccupationRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceOccupationRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationRequiredExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationRequiredExperienceOccupationRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceOccupationRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationRequiredExperienceOccupationRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationRequiredExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationRequiredExperienceOccupationRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationRequiredExperienceOccupationRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationRequiredSocialExperienceRepository is a mock of SendingJobInformationRequiredSocialExperienceRepository interface.
type MockSendingJobInformationRequiredSocialExperienceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationRequiredSocialExperienceRepositoryMockRecorder
}

// MockSendingJobInformationRequiredSocialExperienceRepositoryMockRecorder is the mock recorder for MockSendingJobInformationRequiredSocialExperienceRepository.
type MockSendingJobInformationRequiredSocialExperienceRepositoryMockRecorder struct {
	mock *MockSendingJobInformationRequiredSocialExperienceRepository
}

// NewMockSendingJobInformationRequiredSocialExperienceRepository creates a new mock instance.
func NewMockSendingJobInformationRequiredSocialExperienceRepository(ctrl *gomock.Controller) *MockSendingJobInformationRequiredSocialExperienceRepository {
	mock := &MockSendingJobInformationRequiredSocialExperienceRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationRequiredSocialExperienceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationRequiredSocialExperienceRepository) EXPECT() *MockSendingJobInformationRequiredSocialExperienceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationRequiredSocialExperienceRepository) Create(requiredSocialExperience *entity.SendingJobInformationRequiredSocialExperience) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", requiredSocialExperience)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationRequiredSocialExperienceRepositoryMockRecorder) Create(requiredSocialExperience any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationRequiredSocialExperienceRepository)(nil).Create), requiredSocialExperience)
}

// Delete mocks base method.
func (m *MockSendingJobInformationRequiredSocialExperienceRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationRequiredSocialExperienceRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationRequiredSocialExperienceRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationRequiredSocialExperienceRepository) GetAll() ([]*entity.SendingJobInformationRequiredSocialExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredSocialExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationRequiredSocialExperienceRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationRequiredSocialExperienceRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationRequiredSocialExperienceRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationRequiredSocialExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredSocialExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationRequiredSocialExperienceRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationRequiredSocialExperienceRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationRequiredSocialExperienceRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationRequiredSocialExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredSocialExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationRequiredSocialExperienceRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationRequiredSocialExperienceRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationRequiredSocialExperienceRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationRequiredSocialExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredSocialExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationRequiredSocialExperienceRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationRequiredSocialExperienceRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationRequiredSocialExperienceRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationRequiredSocialExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationRequiredSocialExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationRequiredSocialExperienceRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationRequiredSocialExperienceRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingJobInformationIndustryRepository is a mock of SendingJobInformationIndustryRepository interface.
type MockSendingJobInformationIndustryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationIndustryRepositoryMockRecorder
}

// MockSendingJobInformationIndustryRepositoryMockRecorder is the mock recorder for MockSendingJobInformationIndustryRepository.
type MockSendingJobInformationIndustryRepositoryMockRecorder struct {
	mock *MockSendingJobInformationIndustryRepository
}

// NewMockSendingJobInformationIndustryRepository creates a new mock instance.
func NewMockSendingJobInformationIndustryRepository(ctrl *gomock.Controller) *MockSendingJobInformationIndustryRepository {
	mock := &MockSendingJobInformationIndustryRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationIndustryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationIndustryRepository) EXPECT() *MockSendingJobInformationIndustryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobInformationIndustryRepository) Create(industry *entity.SendingJobInformationIndustry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", industry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobInformationIndustryRepositoryMockRecorder) Create(industry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobInformationIndustryRepository)(nil).Create), industry)
}

// Delete mocks base method.
func (m *MockSendingJobInformationIndustryRepository) Delete(sendingJobInformationID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobInformationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobInformationIndustryRepositoryMockRecorder) Delete(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobInformationIndustryRepository)(nil).Delete), sendingJobInformationID)
}

// GetAll mocks base method.
func (m *MockSendingJobInformationIndustryRepository) GetAll() ([]*entity.SendingJobInformationIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobInformationIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobInformationIndustryRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobInformationIndustryRepository)(nil).GetAll))
}

// GetListByIDList mocks base method.
func (m *MockSendingJobInformationIndustryRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobInformationIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobInformationIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobInformationIndustryRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobInformationIndustryRepository)(nil).GetListByIDList), idList)
}

// GetListBySendingBillingAddressID mocks base method.
func (m *MockSendingJobInformationIndustryRepository) GetListBySendingBillingAddressID(billingAddressID uint) ([]*entity.SendingJobInformationIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingBillingAddressID", billingAddressID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingBillingAddressID indicates an expected call of GetListBySendingBillingAddressID.
func (mr *MockSendingJobInformationIndustryRepositoryMockRecorder) GetListBySendingBillingAddressID(billingAddressID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingBillingAddressID", reflect.TypeOf((*MockSendingJobInformationIndustryRepository)(nil).GetListBySendingBillingAddressID), billingAddressID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationIndustryRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingJobInformationIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingJobInformationIndustryRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationIndustryRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// GetListBySendingJobInformationID mocks base method.
func (m *MockSendingJobInformationIndustryRepository) GetListBySendingJobInformationID(sendingJobInformationID uint) ([]*entity.SendingJobInformationIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobInformationID", sendingJobInformationID)
	ret0, _ := ret[0].([]*entity.SendingJobInformationIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobInformationID indicates an expected call of GetListBySendingJobInformationID.
func (mr *MockSendingJobInformationIndustryRepositoryMockRecorder) GetListBySendingJobInformationID(sendingJobInformationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobInformationID", reflect.TypeOf((*MockSendingJobInformationIndustryRepository)(nil).GetListBySendingJobInformationID), sendingJobInformationID)
}

// MockSendingCustomerRepository is a mock of SendingCustomerRepository interface.
type MockSendingCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingCustomerRepositoryMockRecorder
}

// MockSendingCustomerRepositoryMockRecorder is the mock recorder for MockSendingCustomerRepository.
type MockSendingCustomerRepositoryMockRecorder struct {
	mock *MockSendingCustomerRepository
}

// NewMockSendingCustomerRepository creates a new mock instance.
func NewMockSendingCustomerRepository(ctrl *gomock.Controller) *MockSendingCustomerRepository {
	mock := &MockSendingCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockSendingCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingCustomerRepository) EXPECT() *MockSendingCustomerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingCustomerRepository) Create(sendingCustomer *entity.SendingCustomer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", sendingCustomer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingCustomerRepositoryMockRecorder) Create(sendingCustomer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingCustomerRepository)(nil).Create), sendingCustomer)
}

// FindByID mocks base method.
func (m *MockSendingCustomerRepository) FindByID(id uint) (*entity.SendingCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.SendingCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSendingCustomerRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSendingCustomerRepository)(nil).FindByID), id)
}

// GetForSendingCustomerManagement mocks base method.
func (m *MockSendingCustomerRepository) GetForSendingCustomerManagement(agentID uint, freeWord string) ([]*entity.SendingCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForSendingCustomerManagement", agentID, freeWord)
	ret0, _ := ret[0].([]*entity.SendingCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForSendingCustomerManagement indicates an expected call of GetForSendingCustomerManagement.
func (mr *MockSendingCustomerRepositoryMockRecorder) GetForSendingCustomerManagement(agentID, freeWord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForSendingCustomerManagement", reflect.TypeOf((*MockSendingCustomerRepository)(nil).GetForSendingCustomerManagement), agentID, freeWord)
}

// GetListByAgentID mocks base method.
func (m *MockSendingCustomerRepository) GetListByAgentID(agentID uint) ([]*entity.SendingCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingCustomerRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingCustomerRepository)(nil).GetListByAgentID), agentID)
}

// GetListByAgentIDAndPhase mocks base method.
func (m *MockSendingCustomerRepository) GetListByAgentIDAndPhase(agentID uint, phase []uint) ([]*entity.SendingCustomer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentIDAndPhase", agentID, phase)
	ret0, _ := ret[0].([]*entity.SendingCustomer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentIDAndPhase indicates an expected call of GetListByAgentIDAndPhase.
func (mr *MockSendingCustomerRepositoryMockRecorder) GetListByAgentIDAndPhase(agentID, phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentIDAndPhase", reflect.TypeOf((*MockSendingCustomerRepository)(nil).GetListByAgentIDAndPhase), agentID, phase)
}

// Update mocks base method.
func (m *MockSendingCustomerRepository) Update(id uint, sendingCustomer *entity.SendingCustomer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, sendingCustomer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSendingCustomerRepositoryMockRecorder) Update(id, sendingCustomer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSendingCustomerRepository)(nil).Update), id, sendingCustomer)
}

// UpdateDocument mocks base method.
func (m *MockSendingCustomerRepository) UpdateDocument(id uint, resumePDFURL, resumeOriginURL, cvPDFURL, cvOriginURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocument", id, resumePDFURL, resumeOriginURL, cvPDFURL, cvOriginURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDocument indicates an expected call of UpdateDocument.
func (mr *MockSendingCustomerRepositoryMockRecorder) UpdateDocument(id, resumePDFURL, resumeOriginURL, cvPDFURL, cvOriginURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocument", reflect.TypeOf((*MockSendingCustomerRepository)(nil).UpdateDocument), id, resumePDFURL, resumeOriginURL, cvPDFURL, cvOriginURL)
}

// UpdateForDev mocks base method.
func (m *MockSendingCustomerRepository) UpdateForDev(sendingCustomer *entity.SendingCustomer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateForDev", sendingCustomer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateForDev indicates an expected call of UpdateForDev.
func (mr *MockSendingCustomerRepositoryMockRecorder) UpdateForDev(sendingCustomer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForDev", reflect.TypeOf((*MockSendingCustomerRepository)(nil).UpdateForDev), sendingCustomer)
}

// UpdateInterviewDate mocks base method.
func (m *MockSendingCustomerRepository) UpdateInterviewDate(sendingCustomerID uint, interviewDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInterviewDate", sendingCustomerID, interviewDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInterviewDate indicates an expected call of UpdateInterviewDate.
func (mr *MockSendingCustomerRepositoryMockRecorder) UpdateInterviewDate(sendingCustomerID, interviewDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInterviewDate", reflect.TypeOf((*MockSendingCustomerRepository)(nil).UpdateInterviewDate), sendingCustomerID, interviewDate)
}

// UpdatePhase mocks base method.
func (m *MockSendingCustomerRepository) UpdatePhase(id uint, phase null.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhase", id, phase)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhase indicates an expected call of UpdatePhase.
func (mr *MockSendingCustomerRepositoryMockRecorder) UpdatePhase(id, phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhase", reflect.TypeOf((*MockSendingCustomerRepository)(nil).UpdatePhase), id, phase)
}

// UpdatePhaseBySendingJobSeekerID mocks base method.
func (m *MockSendingCustomerRepository) UpdatePhaseBySendingJobSeekerID(sendingJobSeekerID uint, phase null.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhaseBySendingJobSeekerID", sendingJobSeekerID, phase)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhaseBySendingJobSeekerID indicates an expected call of UpdatePhaseBySendingJobSeekerID.
func (mr *MockSendingCustomerRepositoryMockRecorder) UpdatePhaseBySendingJobSeekerID(sendingJobSeekerID, phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhaseBySendingJobSeekerID", reflect.TypeOf((*MockSendingCustomerRepository)(nil).UpdatePhaseBySendingJobSeekerID), sendingJobSeekerID, phase)
}

// MockSendingJobSeekerRepository is a mock of SendingJobSeekerRepository interface.
type MockSendingJobSeekerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerRepositoryMockRecorder
}

// MockSendingJobSeekerRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerRepository.
type MockSendingJobSeekerRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerRepository
}

// NewMockSendingJobSeekerRepository creates a new mock instance.
func NewMockSendingJobSeekerRepository(ctrl *gomock.Controller) *MockSendingJobSeekerRepository {
	mock := &MockSendingJobSeekerRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerRepository) EXPECT() *MockSendingJobSeekerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerRepository) Create(sendingJobSeeker *entity.SendingJobSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", sendingJobSeeker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) Create(sendingJobSeeker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).Create), sendingJobSeeker)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).Delete), sendingJobSeekerID)
}

// FindByID mocks base method.
func (m *MockSendingJobSeekerRepository) FindByID(sendingJobSeekerID uint) (*entity.SendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", sendingJobSeekerID)
	ret0, _ := ret[0].(*entity.SendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) FindByID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).FindByID), sendingJobSeekerID)
}

// FindByLineID mocks base method.
func (m *MockSendingJobSeekerRepository) FindByLineID(sendingJobSeekerLineID string) (*entity.SendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLineID", sendingJobSeekerLineID)
	ret0, _ := ret[0].(*entity.SendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLineID indicates an expected call of FindByLineID.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) FindByLineID(sendingJobSeekerLineID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLineID", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).FindByLineID), sendingJobSeekerLineID)
}

// FindByNameAndPhoneNumber mocks base method.
func (m *MockSendingJobSeekerRepository) FindByNameAndPhoneNumber(firstName, lastName, firstFurigana, lastFurigana, phoneNumber string) (*entity.SendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNameAndPhoneNumber", firstName, lastName, firstFurigana, lastFurigana, phoneNumber)
	ret0, _ := ret[0].(*entity.SendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNameAndPhoneNumber indicates an expected call of FindByNameAndPhoneNumber.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) FindByNameAndPhoneNumber(firstName, lastName, firstFurigana, lastFurigana, phoneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNameAndPhoneNumber", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).FindByNameAndPhoneNumber), firstName, lastName, firstFurigana, lastFurigana, phoneNumber)
}

// FindBySendingCustomerID mocks base method.
func (m *MockSendingJobSeekerRepository) FindBySendingCustomerID(sendingCustomerID uint) (*entity.SendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingCustomerID", sendingCustomerID)
	ret0, _ := ret[0].(*entity.SendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingCustomerID indicates an expected call of FindBySendingCustomerID.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) FindBySendingCustomerID(sendingCustomerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingCustomerID", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).FindBySendingCustomerID), sendingCustomerID)
}

// FindByUUID mocks base method.
func (m *MockSendingJobSeekerRepository) FindByUUID(sendingJobSeekerUUID uuid.UUID) (*entity.SendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", sendingJobSeekerUUID)
	ret0, _ := ret[0].(*entity.SendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) FindByUUID(sendingJobSeekerUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).FindByUUID), sendingJobSeekerUUID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerRepository) GetAll() ([]*entity.SendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).GetListByAgentID), agentID)
}

// GetListByPhase mocks base method.
func (m *MockSendingJobSeekerRepository) GetListByPhase(phase []uint) ([]*entity.SendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByPhase", phase)
	ret0, _ := ret[0].([]*entity.SendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByPhase indicates an expected call of GetListByPhase.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) GetListByPhase(phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByPhase", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).GetListByPhase), phase)
}

// GetSearchListForSendingJobSeekerManagement mocks base method.
func (m *MockSendingJobSeekerRepository) GetSearchListForSendingJobSeekerManagement(agentID uint, freeWord string, staffIDList, senderIDList []uint) ([]*entity.SendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchListForSendingJobSeekerManagement", agentID, freeWord, staffIDList, senderIDList)
	ret0, _ := ret[0].([]*entity.SendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchListForSendingJobSeekerManagement indicates an expected call of GetSearchListForSendingJobSeekerManagement.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) GetSearchListForSendingJobSeekerManagement(agentID, freeWord, staffIDList, senderIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchListForSendingJobSeekerManagement", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).GetSearchListForSendingJobSeekerManagement), agentID, freeWord, staffIDList, senderIDList)
}

// Update mocks base method.
func (m *MockSendingJobSeekerRepository) Update(sendingJobSeeker *entity.SendingJobSeeker, sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", sendingJobSeeker, sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) Update(sendingJobSeeker, sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).Update), sendingJobSeeker, sendingJobSeekerID)
}

// UpdateActivityMemo mocks base method.
func (m *MockSendingJobSeekerRepository) UpdateActivityMemo(sendingJobSeekeID uint, activityMemo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActivityMemo", sendingJobSeekeID, activityMemo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActivityMemo indicates an expected call of UpdateActivityMemo.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) UpdateActivityMemo(sendingJobSeekeID, activityMemo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActivityMemo", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).UpdateActivityMemo), sendingJobSeekeID, activityMemo)
}

// UpdateAgentStaffIDBySendingCustomerID mocks base method.
func (m *MockSendingJobSeekerRepository) UpdateAgentStaffIDBySendingCustomerID(sendingCustomerID, agentStaffID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentStaffIDBySendingCustomerID", sendingCustomerID, agentStaffID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentStaffIDBySendingCustomerID indicates an expected call of UpdateAgentStaffIDBySendingCustomerID.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) UpdateAgentStaffIDBySendingCustomerID(sendingCustomerID, agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentStaffIDBySendingCustomerID", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).UpdateAgentStaffIDBySendingCustomerID), sendingCustomerID, agentStaffID)
}

// UpdateAgreement mocks base method.
func (m *MockSendingJobSeekerRepository) UpdateAgreement(sendingJobSeekeID uint, agreement bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgreement", sendingJobSeekeID, agreement)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgreement indicates an expected call of UpdateAgreement.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) UpdateAgreement(sendingJobSeekeID, agreement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgreement", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).UpdateAgreement), sendingJobSeekeID, agreement)
}

// UpdateForDev mocks base method.
func (m *MockSendingJobSeekerRepository) UpdateForDev(sendingJobSeeker *entity.SendingJobSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateForDev", sendingJobSeeker)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateForDev indicates an expected call of UpdateForDev.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) UpdateForDev(sendingJobSeeker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForDev", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).UpdateForDev), sendingJobSeeker)
}

// UpdateInterviewDateByCustomerID mocks base method.
func (m *MockSendingJobSeekerRepository) UpdateInterviewDateByCustomerID(sendingCustomerID uint, interviewDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInterviewDateByCustomerID", sendingCustomerID, interviewDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInterviewDateByCustomerID indicates an expected call of UpdateInterviewDateByCustomerID.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) UpdateInterviewDateByCustomerID(sendingCustomerID, interviewDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInterviewDateByCustomerID", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).UpdateInterviewDateByCustomerID), sendingCustomerID, interviewDate)
}

// UpdateLineID mocks base method.
func (m *MockSendingJobSeekerRepository) UpdateLineID(sendingJobSeekerUUID uuid.UUID, lineID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLineID", sendingJobSeekerUUID, lineID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLineID indicates an expected call of UpdateLineID.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) UpdateLineID(sendingJobSeekerUUID, lineID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLineID", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).UpdateLineID), sendingJobSeekerUUID, lineID)
}

// UpdatePhase mocks base method.
func (m *MockSendingJobSeekerRepository) UpdatePhase(sendingJobSeekerID uint, phase null.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhase", sendingJobSeekerID, phase)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhase indicates an expected call of UpdatePhase.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) UpdatePhase(sendingJobSeekerID, phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhase", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).UpdatePhase), sendingJobSeekerID, phase)
}

// UpdateQuestion mocks base method.
func (m *MockSendingJobSeekerRepository) UpdateQuestion(sendingJobSeekeID uint, question string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", sendingJobSeekeID, question)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockSendingJobSeekerRepositoryMockRecorder) UpdateQuestion(sendingJobSeekeID, question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockSendingJobSeekerRepository)(nil).UpdateQuestion), sendingJobSeekeID, question)
}

// MockSendingJobSeekerStudentHistoryRepository is a mock of SendingJobSeekerStudentHistoryRepository interface.
type MockSendingJobSeekerStudentHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerStudentHistoryRepositoryMockRecorder
}

// MockSendingJobSeekerStudentHistoryRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerStudentHistoryRepository.
type MockSendingJobSeekerStudentHistoryRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerStudentHistoryRepository
}

// NewMockSendingJobSeekerStudentHistoryRepository creates a new mock instance.
func NewMockSendingJobSeekerStudentHistoryRepository(ctrl *gomock.Controller) *MockSendingJobSeekerStudentHistoryRepository {
	mock := &MockSendingJobSeekerStudentHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerStudentHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerStudentHistoryRepository) EXPECT() *MockSendingJobSeekerStudentHistoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerStudentHistoryRepository) Create(industry *entity.SendingJobSeekerStudentHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", industry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerStudentHistoryRepositoryMockRecorder) Create(industry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerStudentHistoryRepository)(nil).Create), industry)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerStudentHistoryRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerStudentHistoryRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerStudentHistoryRepository)(nil).Delete), sendingJobSeekerID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerStudentHistoryRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerStudentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerStudentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerStudentHistoryRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerStudentHistoryRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerStudentHistoryRepository) GetAll() ([]*entity.SendingJobSeekerStudentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerStudentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerStudentHistoryRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerStudentHistoryRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerStudentHistoryRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerStudentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerStudentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerStudentHistoryRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerStudentHistoryRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerStudentHistoryRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerStudentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerStudentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerStudentHistoryRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerStudentHistoryRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerStudentHistoryRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerStudentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerStudentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerStudentHistoryRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerStudentHistoryRepository)(nil).GetListByStaffID), staffID)
}

// MockSendingJobSeekerWorkHistoryRepository is a mock of SendingJobSeekerWorkHistoryRepository interface.
type MockSendingJobSeekerWorkHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerWorkHistoryRepositoryMockRecorder
}

// MockSendingJobSeekerWorkHistoryRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerWorkHistoryRepository.
type MockSendingJobSeekerWorkHistoryRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerWorkHistoryRepository
}

// NewMockSendingJobSeekerWorkHistoryRepository creates a new mock instance.
func NewMockSendingJobSeekerWorkHistoryRepository(ctrl *gomock.Controller) *MockSendingJobSeekerWorkHistoryRepository {
	mock := &MockSendingJobSeekerWorkHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerWorkHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerWorkHistoryRepository) EXPECT() *MockSendingJobSeekerWorkHistoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerWorkHistoryRepository) Create(industry *entity.SendingJobSeekerWorkHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", industry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerWorkHistoryRepositoryMockRecorder) Create(industry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerWorkHistoryRepository)(nil).Create), industry)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerWorkHistoryRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerWorkHistoryRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerWorkHistoryRepository)(nil).Delete), sendingJobSeekerID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerWorkHistoryRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerWorkHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerWorkHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerWorkHistoryRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerWorkHistoryRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerWorkHistoryRepository) GetAll() ([]*entity.SendingJobSeekerWorkHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerWorkHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerWorkHistoryRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerWorkHistoryRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerWorkHistoryRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerWorkHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerWorkHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerWorkHistoryRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerWorkHistoryRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerWorkHistoryRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerWorkHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerWorkHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerWorkHistoryRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerWorkHistoryRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerWorkHistoryRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerWorkHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerWorkHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerWorkHistoryRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerWorkHistoryRepository)(nil).GetListByStaffID), staffID)
}

// MockSendingJobSeekerExperienceIndustryRepository is a mock of SendingJobSeekerExperienceIndustryRepository interface.
type MockSendingJobSeekerExperienceIndustryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerExperienceIndustryRepositoryMockRecorder
}

// MockSendingJobSeekerExperienceIndustryRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerExperienceIndustryRepository.
type MockSendingJobSeekerExperienceIndustryRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerExperienceIndustryRepository
}

// NewMockSendingJobSeekerExperienceIndustryRepository creates a new mock instance.
func NewMockSendingJobSeekerExperienceIndustryRepository(ctrl *gomock.Controller) *MockSendingJobSeekerExperienceIndustryRepository {
	mock := &MockSendingJobSeekerExperienceIndustryRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerExperienceIndustryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerExperienceIndustryRepository) EXPECT() *MockSendingJobSeekerExperienceIndustryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerExperienceIndustryRepository) Create(experienceIndustry *entity.SendingJobSeekerExperienceIndustry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", experienceIndustry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerExperienceIndustryRepositoryMockRecorder) Create(experienceIndustry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerExperienceIndustryRepository)(nil).Create), experienceIndustry)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerExperienceIndustryRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerExperienceIndustryRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerExperienceIndustryRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerExperienceIndustryRepository) GetAll() ([]*entity.SendingJobSeekerExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerExperienceIndustryRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerExperienceIndustryRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerExperienceIndustryRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerExperienceIndustryRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerExperienceIndustryRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerExperienceIndustryRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerExperienceIndustryRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerExperienceIndustryRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerExperienceIndustryRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerExperienceIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerExperienceIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerExperienceIndustryRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerExperienceIndustryRepository)(nil).GetListByStaffID), staffID)
}

// Update mocks base method.
func (m *MockSendingJobSeekerExperienceIndustryRepository) Update(experienceIndustry *entity.SendingJobSeekerExperienceIndustry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", experienceIndustry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSendingJobSeekerExperienceIndustryRepositoryMockRecorder) Update(experienceIndustry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSendingJobSeekerExperienceIndustryRepository)(nil).Update), experienceIndustry)
}

// MockSendingJobSeekerDepartmentHistoryRepository is a mock of SendingJobSeekerDepartmentHistoryRepository interface.
type MockSendingJobSeekerDepartmentHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerDepartmentHistoryRepositoryMockRecorder
}

// MockSendingJobSeekerDepartmentHistoryRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerDepartmentHistoryRepository.
type MockSendingJobSeekerDepartmentHistoryRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerDepartmentHistoryRepository
}

// NewMockSendingJobSeekerDepartmentHistoryRepository creates a new mock instance.
func NewMockSendingJobSeekerDepartmentHistoryRepository(ctrl *gomock.Controller) *MockSendingJobSeekerDepartmentHistoryRepository {
	mock := &MockSendingJobSeekerDepartmentHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerDepartmentHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerDepartmentHistoryRepository) EXPECT() *MockSendingJobSeekerDepartmentHistoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerDepartmentHistoryRepository) Create(departmentHistory *entity.SendingJobSeekerDepartmentHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", departmentHistory)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerDepartmentHistoryRepositoryMockRecorder) Create(departmentHistory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerDepartmentHistoryRepository)(nil).Create), departmentHistory)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerDepartmentHistoryRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerDepartmentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDepartmentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerDepartmentHistoryRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerDepartmentHistoryRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerDepartmentHistoryRepository) GetAll() ([]*entity.SendingJobSeekerDepartmentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDepartmentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerDepartmentHistoryRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerDepartmentHistoryRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerDepartmentHistoryRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerDepartmentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDepartmentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerDepartmentHistoryRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerDepartmentHistoryRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerDepartmentHistoryRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerDepartmentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDepartmentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerDepartmentHistoryRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerDepartmentHistoryRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerDepartmentHistoryRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerDepartmentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDepartmentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerDepartmentHistoryRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerDepartmentHistoryRepository)(nil).GetListByStaffID), staffID)
}

// MockSendingJobSeekerExperienceOccupationRepository is a mock of SendingJobSeekerExperienceOccupationRepository interface.
type MockSendingJobSeekerExperienceOccupationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerExperienceOccupationRepositoryMockRecorder
}

// MockSendingJobSeekerExperienceOccupationRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerExperienceOccupationRepository.
type MockSendingJobSeekerExperienceOccupationRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerExperienceOccupationRepository
}

// NewMockSendingJobSeekerExperienceOccupationRepository creates a new mock instance.
func NewMockSendingJobSeekerExperienceOccupationRepository(ctrl *gomock.Controller) *MockSendingJobSeekerExperienceOccupationRepository {
	mock := &MockSendingJobSeekerExperienceOccupationRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerExperienceOccupationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerExperienceOccupationRepository) EXPECT() *MockSendingJobSeekerExperienceOccupationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerExperienceOccupationRepository) Create(experienceOccupation *entity.SendingJobSeekerExperienceOccupation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", experienceOccupation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerExperienceOccupationRepositoryMockRecorder) Create(experienceOccupation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerExperienceOccupationRepository)(nil).Create), experienceOccupation)
}

// DeleteByID mocks base method.
func (m *MockSendingJobSeekerExperienceOccupationRepository) DeleteByID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockSendingJobSeekerExperienceOccupationRepositoryMockRecorder) DeleteByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockSendingJobSeekerExperienceOccupationRepository)(nil).DeleteByID), id)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerExperienceOccupationRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerExperienceOccupationRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerExperienceOccupationRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerExperienceOccupationRepository) GetAll() ([]*entity.SendingJobSeekerExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerExperienceOccupationRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerExperienceOccupationRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerExperienceOccupationRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerExperienceOccupationRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerExperienceOccupationRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerExperienceOccupationRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerExperienceOccupationRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerExperienceOccupationRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerExperienceOccupationRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerExperienceOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerExperienceOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerExperienceOccupationRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerExperienceOccupationRepository)(nil).GetListByStaffID), staffID)
}

// MockSendingJobSeekerLicenseRepository is a mock of SendingJobSeekerLicenseRepository interface.
type MockSendingJobSeekerLicenseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerLicenseRepositoryMockRecorder
}

// MockSendingJobSeekerLicenseRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerLicenseRepository.
type MockSendingJobSeekerLicenseRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerLicenseRepository
}

// NewMockSendingJobSeekerLicenseRepository creates a new mock instance.
func NewMockSendingJobSeekerLicenseRepository(ctrl *gomock.Controller) *MockSendingJobSeekerLicenseRepository {
	mock := &MockSendingJobSeekerLicenseRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerLicenseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerLicenseRepository) EXPECT() *MockSendingJobSeekerLicenseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerLicenseRepository) Create(industry *entity.SendingJobSeekerLicense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", industry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerLicenseRepositoryMockRecorder) Create(industry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerLicenseRepository)(nil).Create), industry)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerLicenseRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerLicenseRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerLicenseRepository)(nil).Delete), sendingJobSeekerID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerLicenseRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerLicenseRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerLicenseRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerLicenseRepository) GetAll() ([]*entity.SendingJobSeekerLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerLicenseRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerLicenseRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerLicenseRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerLicenseRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerLicenseRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerLicenseRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerLicenseRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerLicenseRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerLicenseRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerLicense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerLicense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerLicenseRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerLicenseRepository)(nil).GetListByStaffID), staffID)
}

// MockSendingJobSeekerSelfPromotionRepository is a mock of SendingJobSeekerSelfPromotionRepository interface.
type MockSendingJobSeekerSelfPromotionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerSelfPromotionRepositoryMockRecorder
}

// MockSendingJobSeekerSelfPromotionRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerSelfPromotionRepository.
type MockSendingJobSeekerSelfPromotionRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerSelfPromotionRepository
}

// NewMockSendingJobSeekerSelfPromotionRepository creates a new mock instance.
func NewMockSendingJobSeekerSelfPromotionRepository(ctrl *gomock.Controller) *MockSendingJobSeekerSelfPromotionRepository {
	mock := &MockSendingJobSeekerSelfPromotionRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerSelfPromotionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerSelfPromotionRepository) EXPECT() *MockSendingJobSeekerSelfPromotionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerSelfPromotionRepository) Create(industry *entity.SendingJobSeekerSelfPromotion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", industry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerSelfPromotionRepositoryMockRecorder) Create(industry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerSelfPromotionRepository)(nil).Create), industry)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerSelfPromotionRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerSelfPromotionRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerSelfPromotionRepository)(nil).Delete), sendingJobSeekerID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerSelfPromotionRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerSelfPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerSelfPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerSelfPromotionRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerSelfPromotionRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerSelfPromotionRepository) GetAll() ([]*entity.SendingJobSeekerSelfPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerSelfPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerSelfPromotionRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerSelfPromotionRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerSelfPromotionRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerSelfPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerSelfPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerSelfPromotionRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerSelfPromotionRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerSelfPromotionRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerSelfPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerSelfPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerSelfPromotionRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerSelfPromotionRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerSelfPromotionRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerSelfPromotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerSelfPromotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerSelfPromotionRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerSelfPromotionRepository)(nil).GetListByStaffID), staffID)
}

// MockSendingJobSeekerDocumentRepository is a mock of SendingJobSeekerDocumentRepository interface.
type MockSendingJobSeekerDocumentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerDocumentRepositoryMockRecorder
}

// MockSendingJobSeekerDocumentRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerDocumentRepository.
type MockSendingJobSeekerDocumentRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerDocumentRepository
}

// NewMockSendingJobSeekerDocumentRepository creates a new mock instance.
func NewMockSendingJobSeekerDocumentRepository(ctrl *gomock.Controller) *MockSendingJobSeekerDocumentRepository {
	mock := &MockSendingJobSeekerDocumentRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerDocumentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerDocumentRepository) EXPECT() *MockSendingJobSeekerDocumentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) Create(document *entity.SendingJobSeekerDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) Create(document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).Create), document)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).Delete), sendingJobSeekerID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) (*entity.SendingJobSeekerDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].(*entity.SendingJobSeekerDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// FindBySendingJobSeekerUUID mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) FindBySendingJobSeekerUUID(sendingJobSeekerUUID uuid.UUID) (*entity.SendingJobSeekerDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerUUID", sendingJobSeekerUUID)
	ret0, _ := ret[0].(*entity.SendingJobSeekerDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerUUID indicates an expected call of FindBySendingJobSeekerUUID.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) FindBySendingJobSeekerUUID(sendingJobSeekerUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerUUID", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).FindBySendingJobSeekerUUID), sendingJobSeekerUUID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) GetAll() ([]*entity.SendingJobSeekerDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).GetListByStaffID), staffID)
}

// Update mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) Update(document *entity.SendingJobSeekerDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) Update(document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).Update), document)
}

// UpdateCVOriginURL mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) UpdateCVOriginURL(cvOriginURL string, sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCVOriginURL", cvOriginURL, sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCVOriginURL indicates an expected call of UpdateCVOriginURL.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) UpdateCVOriginURL(cvOriginURL, sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCVOriginURL", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).UpdateCVOriginURL), cvOriginURL, sendingJobSeekerID)
}

// UpdateCVPDFURL mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) UpdateCVPDFURL(cvPDFURL string, sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCVPDFURL", cvPDFURL, sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCVPDFURL indicates an expected call of UpdateCVPDFURL.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) UpdateCVPDFURL(cvPDFURL, sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCVPDFURL", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).UpdateCVPDFURL), cvPDFURL, sendingJobSeekerID)
}

// UpdateIDPhotoURL mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) UpdateIDPhotoURL(idPhotoURL string, sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIDPhotoURL", idPhotoURL, sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIDPhotoURL indicates an expected call of UpdateIDPhotoURL.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) UpdateIDPhotoURL(idPhotoURL, sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIDPhotoURL", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).UpdateIDPhotoURL), idPhotoURL, sendingJobSeekerID)
}

// UpdateOrigin mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) UpdateOrigin(document *entity.SendingJobSeekerDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrigin", document)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrigin indicates an expected call of UpdateOrigin.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) UpdateOrigin(document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrigin", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).UpdateOrigin), document)
}

// UpdateOtherDocument1URL mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) UpdateOtherDocument1URL(otherDocument1URL string, sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOtherDocument1URL", otherDocument1URL, sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOtherDocument1URL indicates an expected call of UpdateOtherDocument1URL.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) UpdateOtherDocument1URL(otherDocument1URL, sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOtherDocument1URL", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).UpdateOtherDocument1URL), otherDocument1URL, sendingJobSeekerID)
}

// UpdateOtherDocument2URL mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) UpdateOtherDocument2URL(otherDocument2URL string, sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOtherDocument2URL", otherDocument2URL, sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOtherDocument2URL indicates an expected call of UpdateOtherDocument2URL.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) UpdateOtherDocument2URL(otherDocument2URL, sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOtherDocument2URL", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).UpdateOtherDocument2URL), otherDocument2URL, sendingJobSeekerID)
}

// UpdateOtherDocument3URL mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) UpdateOtherDocument3URL(otherDocument3URL string, sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOtherDocument3URL", otherDocument3URL, sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOtherDocument3URL indicates an expected call of UpdateOtherDocument3URL.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) UpdateOtherDocument3URL(otherDocument3URL, sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOtherDocument3URL", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).UpdateOtherDocument3URL), otherDocument3URL, sendingJobSeekerID)
}

// UpdateRecommendationOriginURL mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) UpdateRecommendationOriginURL(recommendationOriginURL string, sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecommendationOriginURL", recommendationOriginURL, sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecommendationOriginURL indicates an expected call of UpdateRecommendationOriginURL.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) UpdateRecommendationOriginURL(recommendationOriginURL, sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecommendationOriginURL", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).UpdateRecommendationOriginURL), recommendationOriginURL, sendingJobSeekerID)
}

// UpdateRecommendationPDFURL mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) UpdateRecommendationPDFURL(recommendationPDFURL string, sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecommendationPDFURL", recommendationPDFURL, sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecommendationPDFURL indicates an expected call of UpdateRecommendationPDFURL.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) UpdateRecommendationPDFURL(recommendationPDFURL, sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecommendationPDFURL", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).UpdateRecommendationPDFURL), recommendationPDFURL, sendingJobSeekerID)
}

// UpdateResumeOriginURL mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) UpdateResumeOriginURL(resumeOriginURL string, sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResumeOriginURL", resumeOriginURL, sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResumeOriginURL indicates an expected call of UpdateResumeOriginURL.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) UpdateResumeOriginURL(resumeOriginURL, sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResumeOriginURL", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).UpdateResumeOriginURL), resumeOriginURL, sendingJobSeekerID)
}

// UpdateResumePDFURL mocks base method.
func (m *MockSendingJobSeekerDocumentRepository) UpdateResumePDFURL(resumePDFURL string, sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResumePDFURL", resumePDFURL, sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResumePDFURL indicates an expected call of UpdateResumePDFURL.
func (mr *MockSendingJobSeekerDocumentRepositoryMockRecorder) UpdateResumePDFURL(resumePDFURL, sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResumePDFURL", reflect.TypeOf((*MockSendingJobSeekerDocumentRepository)(nil).UpdateResumePDFURL), resumePDFURL, sendingJobSeekerID)
}

// MockSendingJobSeekerDesiredIndustryRepository is a mock of SendingJobSeekerDesiredIndustryRepository interface.
type MockSendingJobSeekerDesiredIndustryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder
}

// MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerDesiredIndustryRepository.
type MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerDesiredIndustryRepository
}

// NewMockSendingJobSeekerDesiredIndustryRepository creates a new mock instance.
func NewMockSendingJobSeekerDesiredIndustryRepository(ctrl *gomock.Controller) *MockSendingJobSeekerDesiredIndustryRepository {
	mock := &MockSendingJobSeekerDesiredIndustryRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerDesiredIndustryRepository) EXPECT() *MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerDesiredIndustryRepository) Create(desiredIndustry *entity.SendingJobSeekerDesiredIndustry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredIndustry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder) Create(desiredIndustry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerDesiredIndustryRepository)(nil).Create), desiredIndustry)
}

// CreateMulti mocks base method.
func (m *MockSendingJobSeekerDesiredIndustryRepository) CreateMulti(sendingJobSeekerID uint, desiredIndustryList []entity.SendingJobSeekerDesiredIndustry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMulti", sendingJobSeekerID, desiredIndustryList)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMulti indicates an expected call of CreateMulti.
func (mr *MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder) CreateMulti(sendingJobSeekerID, desiredIndustryList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMulti", reflect.TypeOf((*MockSendingJobSeekerDesiredIndustryRepository)(nil).CreateMulti), sendingJobSeekerID, desiredIndustryList)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerDesiredIndustryRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerDesiredIndustryRepository)(nil).Delete), sendingJobSeekerID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerDesiredIndustryRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerDesiredIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerDesiredIndustryRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerDesiredIndustryRepository) GetAll() ([]*entity.SendingJobSeekerDesiredIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerDesiredIndustryRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerDesiredIndustryRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerDesiredIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerDesiredIndustryRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerDesiredIndustryRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerDesiredIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerDesiredIndustryRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerDesiredIndustryRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerDesiredIndustry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredIndustry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerDesiredIndustryRepository)(nil).GetListByStaffID), staffID)
}

// Update mocks base method.
func (m *MockSendingJobSeekerDesiredIndustryRepository) Update(desiredIndustry *entity.SendingJobSeekerDesiredIndustry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", desiredIndustry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSendingJobSeekerDesiredIndustryRepositoryMockRecorder) Update(desiredIndustry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSendingJobSeekerDesiredIndustryRepository)(nil).Update), desiredIndustry)
}

// MockSendingJobSeekerDesiredOccupationRepository is a mock of SendingJobSeekerDesiredOccupationRepository interface.
type MockSendingJobSeekerDesiredOccupationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerDesiredOccupationRepositoryMockRecorder
}

// MockSendingJobSeekerDesiredOccupationRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerDesiredOccupationRepository.
type MockSendingJobSeekerDesiredOccupationRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerDesiredOccupationRepository
}

// NewMockSendingJobSeekerDesiredOccupationRepository creates a new mock instance.
func NewMockSendingJobSeekerDesiredOccupationRepository(ctrl *gomock.Controller) *MockSendingJobSeekerDesiredOccupationRepository {
	mock := &MockSendingJobSeekerDesiredOccupationRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerDesiredOccupationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerDesiredOccupationRepository) EXPECT() *MockSendingJobSeekerDesiredOccupationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerDesiredOccupationRepository) Create(desiredOccupation *entity.SendingJobSeekerDesiredOccupation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredOccupation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerDesiredOccupationRepositoryMockRecorder) Create(desiredOccupation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerDesiredOccupationRepository)(nil).Create), desiredOccupation)
}

// CreateMulti mocks base method.
func (m *MockSendingJobSeekerDesiredOccupationRepository) CreateMulti(sendingJobSeekerID uint, desiredOccupationList []entity.SendingJobSeekerDesiredOccupation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMulti", sendingJobSeekerID, desiredOccupationList)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMulti indicates an expected call of CreateMulti.
func (mr *MockSendingJobSeekerDesiredOccupationRepositoryMockRecorder) CreateMulti(sendingJobSeekerID, desiredOccupationList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMulti", reflect.TypeOf((*MockSendingJobSeekerDesiredOccupationRepository)(nil).CreateMulti), sendingJobSeekerID, desiredOccupationList)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerDesiredOccupationRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerDesiredOccupationRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerDesiredOccupationRepository)(nil).Delete), sendingJobSeekerID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerDesiredOccupationRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerDesiredOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerDesiredOccupationRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerDesiredOccupationRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerDesiredOccupationRepository) GetAll() ([]*entity.SendingJobSeekerDesiredOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerDesiredOccupationRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerDesiredOccupationRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerDesiredOccupationRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerDesiredOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerDesiredOccupationRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerDesiredOccupationRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerDesiredOccupationRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerDesiredOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerDesiredOccupationRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerDesiredOccupationRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerDesiredOccupationRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerDesiredOccupation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredOccupation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerDesiredOccupationRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerDesiredOccupationRepository)(nil).GetListByStaffID), staffID)
}

// MockSendingJobSeekerDesiredWorkLocationRepository is a mock of SendingJobSeekerDesiredWorkLocationRepository interface.
type MockSendingJobSeekerDesiredWorkLocationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerDesiredWorkLocationRepositoryMockRecorder
}

// MockSendingJobSeekerDesiredWorkLocationRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerDesiredWorkLocationRepository.
type MockSendingJobSeekerDesiredWorkLocationRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerDesiredWorkLocationRepository
}

// NewMockSendingJobSeekerDesiredWorkLocationRepository creates a new mock instance.
func NewMockSendingJobSeekerDesiredWorkLocationRepository(ctrl *gomock.Controller) *MockSendingJobSeekerDesiredWorkLocationRepository {
	mock := &MockSendingJobSeekerDesiredWorkLocationRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerDesiredWorkLocationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerDesiredWorkLocationRepository) EXPECT() *MockSendingJobSeekerDesiredWorkLocationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerDesiredWorkLocationRepository) Create(desiredWorkLocation *entity.SendingJobSeekerDesiredWorkLocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredWorkLocation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerDesiredWorkLocationRepositoryMockRecorder) Create(desiredWorkLocation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerDesiredWorkLocationRepository)(nil).Create), desiredWorkLocation)
}

// CreateMulti mocks base method.
func (m *MockSendingJobSeekerDesiredWorkLocationRepository) CreateMulti(sendingJobSeekerID uint, desiredWorkLocationList []entity.SendingJobSeekerDesiredWorkLocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMulti", sendingJobSeekerID, desiredWorkLocationList)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMulti indicates an expected call of CreateMulti.
func (mr *MockSendingJobSeekerDesiredWorkLocationRepositoryMockRecorder) CreateMulti(sendingJobSeekerID, desiredWorkLocationList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMulti", reflect.TypeOf((*MockSendingJobSeekerDesiredWorkLocationRepository)(nil).CreateMulti), sendingJobSeekerID, desiredWorkLocationList)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerDesiredWorkLocationRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerDesiredWorkLocationRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerDesiredWorkLocationRepository)(nil).Delete), sendingJobSeekerID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerDesiredWorkLocationRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerDesiredWorkLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredWorkLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerDesiredWorkLocationRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerDesiredWorkLocationRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerDesiredWorkLocationRepository) GetAll() ([]*entity.SendingJobSeekerDesiredWorkLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredWorkLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerDesiredWorkLocationRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerDesiredWorkLocationRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerDesiredWorkLocationRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerDesiredWorkLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredWorkLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerDesiredWorkLocationRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerDesiredWorkLocationRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerDesiredWorkLocationRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerDesiredWorkLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredWorkLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerDesiredWorkLocationRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerDesiredWorkLocationRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerDesiredWorkLocationRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerDesiredWorkLocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredWorkLocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerDesiredWorkLocationRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerDesiredWorkLocationRepository)(nil).GetListByStaffID), staffID)
}

// MockSendingJobSeekerDesiredHolidayTypeRepository is a mock of SendingJobSeekerDesiredHolidayTypeRepository interface.
type MockSendingJobSeekerDesiredHolidayTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerDesiredHolidayTypeRepositoryMockRecorder
}

// MockSendingJobSeekerDesiredHolidayTypeRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerDesiredHolidayTypeRepository.
type MockSendingJobSeekerDesiredHolidayTypeRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerDesiredHolidayTypeRepository
}

// NewMockSendingJobSeekerDesiredHolidayTypeRepository creates a new mock instance.
func NewMockSendingJobSeekerDesiredHolidayTypeRepository(ctrl *gomock.Controller) *MockSendingJobSeekerDesiredHolidayTypeRepository {
	mock := &MockSendingJobSeekerDesiredHolidayTypeRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerDesiredHolidayTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerDesiredHolidayTypeRepository) EXPECT() *MockSendingJobSeekerDesiredHolidayTypeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerDesiredHolidayTypeRepository) Create(desiredHolidayType *entity.SendingJobSeekerDesiredHolidayType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredHolidayType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerDesiredHolidayTypeRepositoryMockRecorder) Create(desiredHolidayType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerDesiredHolidayTypeRepository)(nil).Create), desiredHolidayType)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerDesiredHolidayTypeRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerDesiredHolidayTypeRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerDesiredHolidayTypeRepository)(nil).Delete), sendingJobSeekerID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerDesiredHolidayTypeRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerDesiredHolidayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredHolidayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerDesiredHolidayTypeRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerDesiredHolidayTypeRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerDesiredHolidayTypeRepository) GetAll() ([]*entity.SendingJobSeekerDesiredHolidayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredHolidayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerDesiredHolidayTypeRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerDesiredHolidayTypeRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerDesiredHolidayTypeRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerDesiredHolidayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredHolidayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerDesiredHolidayTypeRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerDesiredHolidayTypeRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerDesiredHolidayTypeRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerDesiredHolidayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredHolidayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerDesiredHolidayTypeRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerDesiredHolidayTypeRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerDesiredHolidayTypeRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerDesiredHolidayType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredHolidayType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerDesiredHolidayTypeRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerDesiredHolidayTypeRepository)(nil).GetListByStaffID), staffID)
}

// MockSendingJobSeekerDevelopmentSkillRepository is a mock of SendingJobSeekerDevelopmentSkillRepository interface.
type MockSendingJobSeekerDevelopmentSkillRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerDevelopmentSkillRepositoryMockRecorder
}

// MockSendingJobSeekerDevelopmentSkillRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerDevelopmentSkillRepository.
type MockSendingJobSeekerDevelopmentSkillRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerDevelopmentSkillRepository
}

// NewMockSendingJobSeekerDevelopmentSkillRepository creates a new mock instance.
func NewMockSendingJobSeekerDevelopmentSkillRepository(ctrl *gomock.Controller) *MockSendingJobSeekerDevelopmentSkillRepository {
	mock := &MockSendingJobSeekerDevelopmentSkillRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerDevelopmentSkillRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerDevelopmentSkillRepository) EXPECT() *MockSendingJobSeekerDevelopmentSkillRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerDevelopmentSkillRepository) Create(desiredWorkLocation *entity.SendingJobSeekerDevelopmentSkill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredWorkLocation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerDevelopmentSkillRepositoryMockRecorder) Create(desiredWorkLocation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerDevelopmentSkillRepository)(nil).Create), desiredWorkLocation)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerDevelopmentSkillRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerDevelopmentSkillRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerDevelopmentSkillRepository)(nil).Delete), sendingJobSeekerID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerDevelopmentSkillRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerDevelopmentSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDevelopmentSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerDevelopmentSkillRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerDevelopmentSkillRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerDevelopmentSkillRepository) GetAll() ([]*entity.SendingJobSeekerDevelopmentSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDevelopmentSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerDevelopmentSkillRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerDevelopmentSkillRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerDevelopmentSkillRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerDevelopmentSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDevelopmentSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerDevelopmentSkillRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerDevelopmentSkillRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerDevelopmentSkillRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerDevelopmentSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDevelopmentSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerDevelopmentSkillRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerDevelopmentSkillRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerDevelopmentSkillRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerDevelopmentSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDevelopmentSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerDevelopmentSkillRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerDevelopmentSkillRepository)(nil).GetListByStaffID), staffID)
}

// MockSendingJobSeekerLanguageSkillRepository is a mock of SendingJobSeekerLanguageSkillRepository interface.
type MockSendingJobSeekerLanguageSkillRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerLanguageSkillRepositoryMockRecorder
}

// MockSendingJobSeekerLanguageSkillRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerLanguageSkillRepository.
type MockSendingJobSeekerLanguageSkillRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerLanguageSkillRepository
}

// NewMockSendingJobSeekerLanguageSkillRepository creates a new mock instance.
func NewMockSendingJobSeekerLanguageSkillRepository(ctrl *gomock.Controller) *MockSendingJobSeekerLanguageSkillRepository {
	mock := &MockSendingJobSeekerLanguageSkillRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerLanguageSkillRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerLanguageSkillRepository) EXPECT() *MockSendingJobSeekerLanguageSkillRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerLanguageSkillRepository) Create(desiredWorkLocation *entity.SendingJobSeekerLanguageSkill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredWorkLocation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerLanguageSkillRepositoryMockRecorder) Create(desiredWorkLocation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerLanguageSkillRepository)(nil).Create), desiredWorkLocation)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerLanguageSkillRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerLanguageSkillRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerLanguageSkillRepository)(nil).Delete), sendingJobSeekerID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerLanguageSkillRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerLanguageSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerLanguageSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerLanguageSkillRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerLanguageSkillRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerLanguageSkillRepository) GetAll() ([]*entity.SendingJobSeekerLanguageSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerLanguageSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerLanguageSkillRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerLanguageSkillRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerLanguageSkillRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerLanguageSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerLanguageSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerLanguageSkillRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerLanguageSkillRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerLanguageSkillRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerLanguageSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerLanguageSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerLanguageSkillRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerLanguageSkillRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerLanguageSkillRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerLanguageSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerLanguageSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerLanguageSkillRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerLanguageSkillRepository)(nil).GetListByStaffID), staffID)
}

// MockSendingJobSeekerPCToolRepository is a mock of SendingJobSeekerPCToolRepository interface.
type MockSendingJobSeekerPCToolRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerPCToolRepositoryMockRecorder
}

// MockSendingJobSeekerPCToolRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerPCToolRepository.
type MockSendingJobSeekerPCToolRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerPCToolRepository
}

// NewMockSendingJobSeekerPCToolRepository creates a new mock instance.
func NewMockSendingJobSeekerPCToolRepository(ctrl *gomock.Controller) *MockSendingJobSeekerPCToolRepository {
	mock := &MockSendingJobSeekerPCToolRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerPCToolRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerPCToolRepository) EXPECT() *MockSendingJobSeekerPCToolRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerPCToolRepository) Create(desiredWorkLocation *entity.SendingJobSeekerPCTool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredWorkLocation)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerPCToolRepositoryMockRecorder) Create(desiredWorkLocation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerPCToolRepository)(nil).Create), desiredWorkLocation)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerPCToolRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerPCToolRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerPCToolRepository)(nil).Delete), sendingJobSeekerID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerPCToolRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerPCToolRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerPCToolRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerPCToolRepository) GetAll() ([]*entity.SendingJobSeekerPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerPCToolRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerPCToolRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerPCToolRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerPCToolRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerPCToolRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerPCToolRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerPCToolRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerPCToolRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerPCToolRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerPCTool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerPCTool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerPCToolRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerPCToolRepository)(nil).GetListByStaffID), staffID)
}

// MockSendingJobSeekerDesiredCompanyScaleRepository is a mock of SendingJobSeekerDesiredCompanyScaleRepository interface.
type MockSendingJobSeekerDesiredCompanyScaleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerDesiredCompanyScaleRepositoryMockRecorder
}

// MockSendingJobSeekerDesiredCompanyScaleRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerDesiredCompanyScaleRepository.
type MockSendingJobSeekerDesiredCompanyScaleRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerDesiredCompanyScaleRepository
}

// NewMockSendingJobSeekerDesiredCompanyScaleRepository creates a new mock instance.
func NewMockSendingJobSeekerDesiredCompanyScaleRepository(ctrl *gomock.Controller) *MockSendingJobSeekerDesiredCompanyScaleRepository {
	mock := &MockSendingJobSeekerDesiredCompanyScaleRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerDesiredCompanyScaleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerDesiredCompanyScaleRepository) EXPECT() *MockSendingJobSeekerDesiredCompanyScaleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerDesiredCompanyScaleRepository) Create(desiredCompanyScale *entity.SendingJobSeekerDesiredCompanyScale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredCompanyScale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerDesiredCompanyScaleRepositoryMockRecorder) Create(desiredCompanyScale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerDesiredCompanyScaleRepository)(nil).Create), desiredCompanyScale)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerDesiredCompanyScaleRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerDesiredCompanyScaleRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerDesiredCompanyScaleRepository)(nil).Delete), sendingJobSeekerID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerDesiredCompanyScaleRepository) FindBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerDesiredCompanyScale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredCompanyScale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockSendingJobSeekerDesiredCompanyScaleRepositoryMockRecorder) FindBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerDesiredCompanyScaleRepository)(nil).FindBySendingJobSeekerID), sendingJobSeekerID)
}

// GetAll mocks base method.
func (m *MockSendingJobSeekerDesiredCompanyScaleRepository) GetAll() ([]*entity.SendingJobSeekerDesiredCompanyScale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredCompanyScale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingJobSeekerDesiredCompanyScaleRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingJobSeekerDesiredCompanyScaleRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockSendingJobSeekerDesiredCompanyScaleRepository) GetListByAgentID(agentID uint) ([]*entity.SendingJobSeekerDesiredCompanyScale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredCompanyScale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingJobSeekerDesiredCompanyScaleRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingJobSeekerDesiredCompanyScaleRepository)(nil).GetListByAgentID), agentID)
}

// GetListByIDList mocks base method.
func (m *MockSendingJobSeekerDesiredCompanyScaleRepository) GetListByIDList(idList []uint) ([]*entity.SendingJobSeekerDesiredCompanyScale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByIDList", idList)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredCompanyScale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByIDList indicates an expected call of GetListByIDList.
func (mr *MockSendingJobSeekerDesiredCompanyScaleRepositoryMockRecorder) GetListByIDList(idList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByIDList", reflect.TypeOf((*MockSendingJobSeekerDesiredCompanyScaleRepository)(nil).GetListByIDList), idList)
}

// GetListByStaffID mocks base method.
func (m *MockSendingJobSeekerDesiredCompanyScaleRepository) GetListByStaffID(staffID uint) ([]*entity.SendingJobSeekerDesiredCompanyScale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStaffID", staffID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredCompanyScale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStaffID indicates an expected call of GetListByStaffID.
func (mr *MockSendingJobSeekerDesiredCompanyScaleRepositoryMockRecorder) GetListByStaffID(staffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStaffID", reflect.TypeOf((*MockSendingJobSeekerDesiredCompanyScaleRepository)(nil).GetListByStaffID), staffID)
}

// MockSendingJobSeekerIsViewRepository is a mock of SendingJobSeekerIsViewRepository interface.
type MockSendingJobSeekerIsViewRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerIsViewRepositoryMockRecorder
}

// MockSendingJobSeekerIsViewRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerIsViewRepository.
type MockSendingJobSeekerIsViewRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerIsViewRepository
}

// NewMockSendingJobSeekerIsViewRepository creates a new mock instance.
func NewMockSendingJobSeekerIsViewRepository(ctrl *gomock.Controller) *MockSendingJobSeekerIsViewRepository {
	mock := &MockSendingJobSeekerIsViewRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerIsViewRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerIsViewRepository) EXPECT() *MockSendingJobSeekerIsViewRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerIsViewRepository) Create(seekerIsView *entity.SendingJobSeekerIsView) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", seekerIsView)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerIsViewRepositoryMockRecorder) Create(seekerIsView any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerIsViewRepository)(nil).Create), seekerIsView)
}

// Delete mocks base method.
func (m *MockSendingJobSeekerIsViewRepository) Delete(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSendingJobSeekerIsViewRepositoryMockRecorder) Delete(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSendingJobSeekerIsViewRepository)(nil).Delete), sendingJobSeekerID)
}

// GetIsNotUnregisterViewCountByAgentStaffID mocks base method.
func (m *MockSendingJobSeekerIsViewRepository) GetIsNotUnregisterViewCountByAgentStaffID(agentStaffID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsNotUnregisterViewCountByAgentStaffID", agentStaffID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIsNotUnregisterViewCountByAgentStaffID indicates an expected call of GetIsNotUnregisterViewCountByAgentStaffID.
func (mr *MockSendingJobSeekerIsViewRepositoryMockRecorder) GetIsNotUnregisterViewCountByAgentStaffID(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsNotUnregisterViewCountByAgentStaffID", reflect.TypeOf((*MockSendingJobSeekerIsViewRepository)(nil).GetIsNotUnregisterViewCountByAgentStaffID), agentStaffID)
}

// GetIsNotWaitingViewCountByAgentStaffID mocks base method.
func (m *MockSendingJobSeekerIsViewRepository) GetIsNotWaitingViewCountByAgentStaffID(agentStaffID uint) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIsNotWaitingViewCountByAgentStaffID", agentStaffID)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIsNotWaitingViewCountByAgentStaffID indicates an expected call of GetIsNotWaitingViewCountByAgentStaffID.
func (mr *MockSendingJobSeekerIsViewRepositoryMockRecorder) GetIsNotWaitingViewCountByAgentStaffID(agentStaffID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIsNotWaitingViewCountByAgentStaffID", reflect.TypeOf((*MockSendingJobSeekerIsViewRepository)(nil).GetIsNotWaitingViewCountByAgentStaffID), agentStaffID)
}

// UpdateIsNotUnregisterViewedBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerIsViewRepository) UpdateIsNotUnregisterViewedBySendingJobSeekerID(sendingJobSeekerID uint, isViewed bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsNotUnregisterViewedBySendingJobSeekerID", sendingJobSeekerID, isViewed)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsNotUnregisterViewedBySendingJobSeekerID indicates an expected call of UpdateIsNotUnregisterViewedBySendingJobSeekerID.
func (mr *MockSendingJobSeekerIsViewRepositoryMockRecorder) UpdateIsNotUnregisterViewedBySendingJobSeekerID(sendingJobSeekerID, isViewed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsNotUnregisterViewedBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerIsViewRepository)(nil).UpdateIsNotUnregisterViewedBySendingJobSeekerID), sendingJobSeekerID, isViewed)
}

// UpdateIsNotWaitingViewedBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerIsViewRepository) UpdateIsNotWaitingViewedBySendingJobSeekerID(sendingJobSeekerID uint, isViewed bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsNotWaitingViewedBySendingJobSeekerID", sendingJobSeekerID, isViewed)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsNotWaitingViewedBySendingJobSeekerID indicates an expected call of UpdateIsNotWaitingViewedBySendingJobSeekerID.
func (mr *MockSendingJobSeekerIsViewRepositoryMockRecorder) UpdateIsNotWaitingViewedBySendingJobSeekerID(sendingJobSeekerID, isViewed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsNotWaitingViewedBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerIsViewRepository)(nil).UpdateIsNotWaitingViewedBySendingJobSeekerID), sendingJobSeekerID, isViewed)
}

// MockSendingJobSeekerDesiredJobInformationRepository is a mock of SendingJobSeekerDesiredJobInformationRepository interface.
type MockSendingJobSeekerDesiredJobInformationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerDesiredJobInformationRepositoryMockRecorder
}

// MockSendingJobSeekerDesiredJobInformationRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerDesiredJobInformationRepository.
type MockSendingJobSeekerDesiredJobInformationRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerDesiredJobInformationRepository
}

// NewMockSendingJobSeekerDesiredJobInformationRepository creates a new mock instance.
func NewMockSendingJobSeekerDesiredJobInformationRepository(ctrl *gomock.Controller) *MockSendingJobSeekerDesiredJobInformationRepository {
	mock := &MockSendingJobSeekerDesiredJobInformationRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerDesiredJobInformationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerDesiredJobInformationRepository) EXPECT() *MockSendingJobSeekerDesiredJobInformationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerDesiredJobInformationRepository) Create(desiredJobInformaiton *entity.SendingJobSeekerDesiredJobInformation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", desiredJobInformaiton)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerDesiredJobInformationRepositoryMockRecorder) Create(desiredJobInformaiton any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerDesiredJobInformationRepository)(nil).Create), desiredJobInformaiton)
}

// CreateMulti mocks base method.
func (m *MockSendingJobSeekerDesiredJobInformationRepository) CreateMulti(sendingJobSeekerID uint, sendingJobInfoIDList []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMulti", sendingJobSeekerID, sendingJobInfoIDList)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMulti indicates an expected call of CreateMulti.
func (mr *MockSendingJobSeekerDesiredJobInformationRepositoryMockRecorder) CreateMulti(sendingJobSeekerID, sendingJobInfoIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMulti", reflect.TypeOf((*MockSendingJobSeekerDesiredJobInformationRepository)(nil).CreateMulti), sendingJobSeekerID, sendingJobInfoIDList)
}

// DeleteBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerDesiredJobInformationRepository) DeleteBySendingJobSeekerID(sendingJobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBySendingJobSeekerID indicates an expected call of DeleteBySendingJobSeekerID.
func (mr *MockSendingJobSeekerDesiredJobInformationRepositoryMockRecorder) DeleteBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerDesiredJobInformationRepository)(nil).DeleteBySendingJobSeekerID), sendingJobSeekerID)
}

// GetListBySendingJobSeekerID mocks base method.
func (m *MockSendingJobSeekerDesiredJobInformationRepository) GetListBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingJobSeekerDesiredJobInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingJobSeekerDesiredJobInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobSeekerID indicates an expected call of GetListBySendingJobSeekerID.
func (mr *MockSendingJobSeekerDesiredJobInformationRepositoryMockRecorder) GetListBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobSeekerID", reflect.TypeOf((*MockSendingJobSeekerDesiredJobInformationRepository)(nil).GetListBySendingJobSeekerID), sendingJobSeekerID)
}

// MockSendingJobSeekerEndStatusRepository is a mock of SendingJobSeekerEndStatusRepository interface.
type MockSendingJobSeekerEndStatusRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobSeekerEndStatusRepositoryMockRecorder
}

// MockSendingJobSeekerEndStatusRepositoryMockRecorder is the mock recorder for MockSendingJobSeekerEndStatusRepository.
type MockSendingJobSeekerEndStatusRepositoryMockRecorder struct {
	mock *MockSendingJobSeekerEndStatusRepository
}

// NewMockSendingJobSeekerEndStatusRepository creates a new mock instance.
func NewMockSendingJobSeekerEndStatusRepository(ctrl *gomock.Controller) *MockSendingJobSeekerEndStatusRepository {
	mock := &MockSendingJobSeekerEndStatusRepository{ctrl: ctrl}
	mock.recorder = &MockSendingJobSeekerEndStatusRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobSeekerEndStatusRepository) EXPECT() *MockSendingJobSeekerEndStatusRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingJobSeekerEndStatusRepository) Create(endStatus *entity.SendingJobSeekerEndStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", endStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingJobSeekerEndStatusRepositoryMockRecorder) Create(endStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingJobSeekerEndStatusRepository)(nil).Create), endStatus)
}

// MockSendingPhaseRepository is a mock of SendingPhaseRepository interface.
type MockSendingPhaseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingPhaseRepositoryMockRecorder
}

// MockSendingPhaseRepositoryMockRecorder is the mock recorder for MockSendingPhaseRepository.
type MockSendingPhaseRepositoryMockRecorder struct {
	mock *MockSendingPhaseRepository
}

// NewMockSendingPhaseRepository creates a new mock instance.
func NewMockSendingPhaseRepository(ctrl *gomock.Controller) *MockSendingPhaseRepository {
	mock := &MockSendingPhaseRepository{ctrl: ctrl}
	mock.recorder = &MockSendingPhaseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingPhaseRepository) EXPECT() *MockSendingPhaseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingPhaseRepository) Create(sendingPhase *entity.SendingPhase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", sendingPhase)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingPhaseRepositoryMockRecorder) Create(sendingPhase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingPhaseRepository)(nil).Create), sendingPhase)
}

// FindByID mocks base method.
func (m *MockSendingPhaseRepository) FindByID(id uint) (*entity.SendingPhase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.SendingPhase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSendingPhaseRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSendingPhaseRepository)(nil).FindByID), id)
}

// FindBySendingJobSeekerIDAndSendingEnterpriseID mocks base method.
func (m *MockSendingPhaseRepository) FindBySendingJobSeekerIDAndSendingEnterpriseID(sendingJobSeekerID, sendingEnterpriseID uint) (*entity.SendingPhase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerIDAndSendingEnterpriseID", sendingJobSeekerID, sendingEnterpriseID)
	ret0, _ := ret[0].(*entity.SendingPhase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerIDAndSendingEnterpriseID indicates an expected call of FindBySendingJobSeekerIDAndSendingEnterpriseID.
func (mr *MockSendingPhaseRepositoryMockRecorder) FindBySendingJobSeekerIDAndSendingEnterpriseID(sendingJobSeekerID, sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerIDAndSendingEnterpriseID", reflect.TypeOf((*MockSendingPhaseRepository)(nil).FindBySendingJobSeekerIDAndSendingEnterpriseID), sendingJobSeekerID, sendingEnterpriseID)
}

// GetAll mocks base method.
func (m *MockSendingPhaseRepository) GetAll() ([]*entity.SendingPhase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingPhase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingPhaseRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingPhaseRepository)(nil).GetAll))
}

// GetListByAgentIDAndPhaseAndEnterpriseIDList mocks base method.
func (m *MockSendingPhaseRepository) GetListByAgentIDAndPhaseAndEnterpriseIDList(agentID, phase uint, sendingEnterpriseIDList []uint) ([]*entity.SendingPhase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentIDAndPhaseAndEnterpriseIDList", agentID, phase, sendingEnterpriseIDList)
	ret0, _ := ret[0].([]*entity.SendingPhase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentIDAndPhaseAndEnterpriseIDList indicates an expected call of GetListByAgentIDAndPhaseAndEnterpriseIDList.
func (mr *MockSendingPhaseRepositoryMockRecorder) GetListByAgentIDAndPhaseAndEnterpriseIDList(agentID, phase, sendingEnterpriseIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentIDAndPhaseAndEnterpriseIDList", reflect.TypeOf((*MockSendingPhaseRepository)(nil).GetListByAgentIDAndPhaseAndEnterpriseIDList), agentID, phase, sendingEnterpriseIDList)
}

// GetListByPhaseAndEnterpriseIDList mocks base method.
func (m *MockSendingPhaseRepository) GetListByPhaseAndEnterpriseIDList(phase uint, sendingEnterpriseIDList []uint) ([]*entity.SendingPhase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByPhaseAndEnterpriseIDList", phase, sendingEnterpriseIDList)
	ret0, _ := ret[0].([]*entity.SendingPhase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByPhaseAndEnterpriseIDList indicates an expected call of GetListByPhaseAndEnterpriseIDList.
func (mr *MockSendingPhaseRepositoryMockRecorder) GetListByPhaseAndEnterpriseIDList(phase, sendingEnterpriseIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByPhaseAndEnterpriseIDList", reflect.TypeOf((*MockSendingPhaseRepository)(nil).GetListByPhaseAndEnterpriseIDList), phase, sendingEnterpriseIDList)
}

// GetListBySendingJobSeekerID mocks base method.
func (m *MockSendingPhaseRepository) GetListBySendingJobSeekerID(sendingJobSeekerID uint) ([]*entity.SendingPhase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobSeekerID", sendingJobSeekerID)
	ret0, _ := ret[0].([]*entity.SendingPhase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobSeekerID indicates an expected call of GetListBySendingJobSeekerID.
func (mr *MockSendingPhaseRepositoryMockRecorder) GetListBySendingJobSeekerID(sendingJobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobSeekerID", reflect.TypeOf((*MockSendingPhaseRepository)(nil).GetListBySendingJobSeekerID), sendingJobSeekerID)
}

// GetSearchListForSendingJobSeekerManagement mocks base method.
func (m *MockSendingPhaseRepository) GetSearchListForSendingJobSeekerManagement(agentID uint, freeWord string, staffIDList, senderIDList, sendAgentIDList []uint) ([]*entity.SendingPhase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchListForSendingJobSeekerManagement", agentID, freeWord, staffIDList, senderIDList, sendAgentIDList)
	ret0, _ := ret[0].([]*entity.SendingPhase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchListForSendingJobSeekerManagement indicates an expected call of GetSearchListForSendingJobSeekerManagement.
func (mr *MockSendingPhaseRepositoryMockRecorder) GetSearchListForSendingJobSeekerManagement(agentID, freeWord, staffIDList, senderIDList, sendAgentIDList any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchListForSendingJobSeekerManagement", reflect.TypeOf((*MockSendingPhaseRepository)(nil).GetSearchListForSendingJobSeekerManagement), agentID, freeWord, staffIDList, senderIDList, sendAgentIDList)
}

// UpdateIsAttended mocks base method.
func (m *MockSendingPhaseRepository) UpdateIsAttended(id uint, isAttended bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsAttended", id, isAttended)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsAttended indicates an expected call of UpdateIsAttended.
func (mr *MockSendingPhaseRepositoryMockRecorder) UpdateIsAttended(id, isAttended any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsAttended", reflect.TypeOf((*MockSendingPhaseRepository)(nil).UpdateIsAttended), id, isAttended)
}

// UpdatePhase mocks base method.
func (m *MockSendingPhaseRepository) UpdatePhase(id, phase uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhase", id, phase)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhase indicates an expected call of UpdatePhase.
func (mr *MockSendingPhaseRepositoryMockRecorder) UpdatePhase(id, phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhase", reflect.TypeOf((*MockSendingPhaseRepository)(nil).UpdatePhase), id, phase)
}

// UpdatePhaseBySendingJobSeekerIDAndSendingEnterpriseID mocks base method.
func (m *MockSendingPhaseRepository) UpdatePhaseBySendingJobSeekerIDAndSendingEnterpriseID(sendingJobSeekerID, sendingEnterpriseID, phase uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhaseBySendingJobSeekerIDAndSendingEnterpriseID", sendingJobSeekerID, sendingEnterpriseID, phase)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhaseBySendingJobSeekerIDAndSendingEnterpriseID indicates an expected call of UpdatePhaseBySendingJobSeekerIDAndSendingEnterpriseID.
func (mr *MockSendingPhaseRepositoryMockRecorder) UpdatePhaseBySendingJobSeekerIDAndSendingEnterpriseID(sendingJobSeekerID, sendingEnterpriseID, phase any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhaseBySendingJobSeekerIDAndSendingEnterpriseID", reflect.TypeOf((*MockSendingPhaseRepository)(nil).UpdatePhaseBySendingJobSeekerIDAndSendingEnterpriseID), sendingJobSeekerID, sendingEnterpriseID, phase)
}

// UpdateSendingDate mocks base method.
func (m *MockSendingPhaseRepository) UpdateSendingDate(id uint, sendingDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSendingDate", id, sendingDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSendingDate indicates an expected call of UpdateSendingDate.
func (mr *MockSendingPhaseRepositoryMockRecorder) UpdateSendingDate(id, sendingDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendingDate", reflect.TypeOf((*MockSendingPhaseRepository)(nil).UpdateSendingDate), id, sendingDate)
}

// MockSendingPhaseEndStatusRepository is a mock of SendingPhaseEndStatusRepository interface.
type MockSendingPhaseEndStatusRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingPhaseEndStatusRepositoryMockRecorder
}

// MockSendingPhaseEndStatusRepositoryMockRecorder is the mock recorder for MockSendingPhaseEndStatusRepository.
type MockSendingPhaseEndStatusRepositoryMockRecorder struct {
	mock *MockSendingPhaseEndStatusRepository
}

// NewMockSendingPhaseEndStatusRepository creates a new mock instance.
func NewMockSendingPhaseEndStatusRepository(ctrl *gomock.Controller) *MockSendingPhaseEndStatusRepository {
	mock := &MockSendingPhaseEndStatusRepository{ctrl: ctrl}
	mock.recorder = &MockSendingPhaseEndStatusRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingPhaseEndStatusRepository) EXPECT() *MockSendingPhaseEndStatusRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingPhaseEndStatusRepository) Create(endStatus *entity.SendingPhaseEndStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", endStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingPhaseEndStatusRepositoryMockRecorder) Create(endStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingPhaseEndStatusRepository)(nil).Create), endStatus)
}

// MockChatGroupWithSendingJobSeekerRepository is a mock of ChatGroupWithSendingJobSeekerRepository interface.
type MockChatGroupWithSendingJobSeekerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatGroupWithSendingJobSeekerRepositoryMockRecorder
}

// MockChatGroupWithSendingJobSeekerRepositoryMockRecorder is the mock recorder for MockChatGroupWithSendingJobSeekerRepository.
type MockChatGroupWithSendingJobSeekerRepositoryMockRecorder struct {
	mock *MockChatGroupWithSendingJobSeekerRepository
}

// NewMockChatGroupWithSendingJobSeekerRepository creates a new mock instance.
func NewMockChatGroupWithSendingJobSeekerRepository(ctrl *gomock.Controller) *MockChatGroupWithSendingJobSeekerRepository {
	mock := &MockChatGroupWithSendingJobSeekerRepository{ctrl: ctrl}
	mock.recorder = &MockChatGroupWithSendingJobSeekerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatGroupWithSendingJobSeekerRepository) EXPECT() *MockChatGroupWithSendingJobSeekerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChatGroupWithSendingJobSeekerRepository) Create(chatGroupWithSendingJobSeeker *entity.ChatGroupWithSendingJobSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", chatGroupWithSendingJobSeeker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChatGroupWithSendingJobSeekerRepositoryMockRecorder) Create(chatGroupWithSendingJobSeeker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerRepository)(nil).Create), chatGroupWithSendingJobSeeker)
}

// FindByID mocks base method.
func (m *MockChatGroupWithSendingJobSeekerRepository) FindByID(groupID uint) (*entity.ChatGroupWithSendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", groupID)
	ret0, _ := ret[0].(*entity.ChatGroupWithSendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockChatGroupWithSendingJobSeekerRepositoryMockRecorder) FindByID(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerRepository)(nil).FindByID), groupID)
}

// FindBySendingJobSeekerID mocks base method.
func (m *MockChatGroupWithSendingJobSeekerRepository) FindBySendingJobSeekerID(jobSeekerID uint) (*entity.ChatGroupWithSendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].(*entity.ChatGroupWithSendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerID indicates an expected call of FindBySendingJobSeekerID.
func (mr *MockChatGroupWithSendingJobSeekerRepositoryMockRecorder) FindBySendingJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerID", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerRepository)(nil).FindBySendingJobSeekerID), jobSeekerID)
}

// GetAll mocks base method.
func (m *MockChatGroupWithSendingJobSeekerRepository) GetAll() ([]*entity.ChatGroupWithSendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.ChatGroupWithSendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockChatGroupWithSendingJobSeekerRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerRepository)(nil).GetAll))
}

// GetListByAgentID mocks base method.
func (m *MockChatGroupWithSendingJobSeekerRepository) GetListByAgentID(agentID uint) ([]*entity.ChatGroupWithSendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.ChatGroupWithSendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockChatGroupWithSendingJobSeekerRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerRepository)(nil).GetListByAgentID), agentID)
}

// GetListByAgentIDAndFreeWord mocks base method.
func (m *MockChatGroupWithSendingJobSeekerRepository) GetListByAgentIDAndFreeWord(agentID uint, freeWord string) ([]*entity.ChatGroupWithSendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentIDAndFreeWord", agentID, freeWord)
	ret0, _ := ret[0].([]*entity.ChatGroupWithSendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentIDAndFreeWord indicates an expected call of GetListByAgentIDAndFreeWord.
func (mr *MockChatGroupWithSendingJobSeekerRepositoryMockRecorder) GetListByAgentIDAndFreeWord(agentID, freeWord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentIDAndFreeWord", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerRepository)(nil).GetListByAgentIDAndFreeWord), agentID, freeWord)
}

// GetNotificationCountByAgentID mocks base method.
func (m *MockChatGroupWithSendingJobSeekerRepository) GetNotificationCountByAgentID(agentID uint) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationCountByAgentID", agentID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationCountByAgentID indicates an expected call of GetNotificationCountByAgentID.
func (mr *MockChatGroupWithSendingJobSeekerRepositoryMockRecorder) GetNotificationCountByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationCountByAgentID", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerRepository)(nil).GetNotificationCountByAgentID), agentID)
}

// UpdateAgentLastSendAt mocks base method.
func (m *MockChatGroupWithSendingJobSeekerRepository) UpdateAgentLastSendAt(groupID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentLastSendAt", groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentLastSendAt indicates an expected call of UpdateAgentLastSendAt.
func (mr *MockChatGroupWithSendingJobSeekerRepositoryMockRecorder) UpdateAgentLastSendAt(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentLastSendAt", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerRepository)(nil).UpdateAgentLastSendAt), groupID)
}

// UpdateAgentLastWatchedAt mocks base method.
func (m *MockChatGroupWithSendingJobSeekerRepository) UpdateAgentLastWatchedAt(groupID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentLastWatchedAt", groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentLastWatchedAt indicates an expected call of UpdateAgentLastWatchedAt.
func (mr *MockChatGroupWithSendingJobSeekerRepositoryMockRecorder) UpdateAgentLastWatchedAt(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentLastWatchedAt", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerRepository)(nil).UpdateAgentLastWatchedAt), groupID)
}

// UpdateSendingJobSeekerLastWatchedAtAndSendAt mocks base method.
func (m *MockChatGroupWithSendingJobSeekerRepository) UpdateSendingJobSeekerLastWatchedAtAndSendAt(groupID uint, sendAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSendingJobSeekerLastWatchedAtAndSendAt", groupID, sendAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSendingJobSeekerLastWatchedAtAndSendAt indicates an expected call of UpdateSendingJobSeekerLastWatchedAtAndSendAt.
func (mr *MockChatGroupWithSendingJobSeekerRepositoryMockRecorder) UpdateSendingJobSeekerLastWatchedAtAndSendAt(groupID, sendAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendingJobSeekerLastWatchedAtAndSendAt", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerRepository)(nil).UpdateSendingJobSeekerLastWatchedAtAndSendAt), groupID, sendAt)
}

// UpdateSendingJobSeekerLineActive mocks base method.
func (m *MockChatGroupWithSendingJobSeekerRepository) UpdateSendingJobSeekerLineActive(isActive bool, jobSeekerID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSendingJobSeekerLineActive", isActive, jobSeekerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSendingJobSeekerLineActive indicates an expected call of UpdateSendingJobSeekerLineActive.
func (mr *MockChatGroupWithSendingJobSeekerRepositoryMockRecorder) UpdateSendingJobSeekerLineActive(isActive, jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendingJobSeekerLineActive", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerRepository)(nil).UpdateSendingJobSeekerLineActive), isActive, jobSeekerID)
}

// MockChatMessageWithSendingJobSeekerRepository is a mock of ChatMessageWithSendingJobSeekerRepository interface.
type MockChatMessageWithSendingJobSeekerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatMessageWithSendingJobSeekerRepositoryMockRecorder
}

// MockChatMessageWithSendingJobSeekerRepositoryMockRecorder is the mock recorder for MockChatMessageWithSendingJobSeekerRepository.
type MockChatMessageWithSendingJobSeekerRepositoryMockRecorder struct {
	mock *MockChatMessageWithSendingJobSeekerRepository
}

// NewMockChatMessageWithSendingJobSeekerRepository creates a new mock instance.
func NewMockChatMessageWithSendingJobSeekerRepository(ctrl *gomock.Controller) *MockChatMessageWithSendingJobSeekerRepository {
	mock := &MockChatMessageWithSendingJobSeekerRepository{ctrl: ctrl}
	mock.recorder = &MockChatMessageWithSendingJobSeekerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatMessageWithSendingJobSeekerRepository) EXPECT() *MockChatMessageWithSendingJobSeekerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChatMessageWithSendingJobSeekerRepository) Create(chatMessageSendingJobSeeker *entity.ChatMessageWithSendingJobSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", chatMessageSendingJobSeeker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockChatMessageWithSendingJobSeekerRepositoryMockRecorder) Create(chatMessageSendingJobSeeker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChatMessageWithSendingJobSeekerRepository)(nil).Create), chatMessageSendingJobSeeker)
}

// GetListByGroupID mocks base method.
func (m *MockChatMessageWithSendingJobSeekerRepository) GetListByGroupID(groupID uint) ([]*entity.ChatMessageWithSendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByGroupID", groupID)
	ret0, _ := ret[0].([]*entity.ChatMessageWithSendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByGroupID indicates an expected call of GetListByGroupID.
func (mr *MockChatMessageWithSendingJobSeekerRepositoryMockRecorder) GetListByGroupID(groupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByGroupID", reflect.TypeOf((*MockChatMessageWithSendingJobSeekerRepository)(nil).GetListByGroupID), groupID)
}

// MockEmailWithSendingJobSeekerRepository is a mock of EmailWithSendingJobSeekerRepository interface.
type MockEmailWithSendingJobSeekerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailWithSendingJobSeekerRepositoryMockRecorder
}

// MockEmailWithSendingJobSeekerRepositoryMockRecorder is the mock recorder for MockEmailWithSendingJobSeekerRepository.
type MockEmailWithSendingJobSeekerRepositoryMockRecorder struct {
	mock *MockEmailWithSendingJobSeekerRepository
}

// NewMockEmailWithSendingJobSeekerRepository creates a new mock instance.
func NewMockEmailWithSendingJobSeekerRepository(ctrl *gomock.Controller) *MockEmailWithSendingJobSeekerRepository {
	mock := &MockEmailWithSendingJobSeekerRepository{ctrl: ctrl}
	mock.recorder = &MockEmailWithSendingJobSeekerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailWithSendingJobSeekerRepository) EXPECT() *MockEmailWithSendingJobSeekerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEmailWithSendingJobSeekerRepository) Create(emailWithSendingJobSeeker *entity.EmailWithSendingJobSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", emailWithSendingJobSeeker)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEmailWithSendingJobSeekerRepositoryMockRecorder) Create(emailWithSendingJobSeeker any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmailWithSendingJobSeekerRepository)(nil).Create), emailWithSendingJobSeeker)
}

// GetListBySendingJobSeekerID mocks base method.
func (m *MockEmailWithSendingJobSeekerRepository) GetListBySendingJobSeekerID(jobSeekerID uint) ([]*entity.EmailWithSendingJobSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingJobSeekerID", jobSeekerID)
	ret0, _ := ret[0].([]*entity.EmailWithSendingJobSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingJobSeekerID indicates an expected call of GetListBySendingJobSeekerID.
func (mr *MockEmailWithSendingJobSeekerRepositoryMockRecorder) GetListBySendingJobSeekerID(jobSeekerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingJobSeekerID", reflect.TypeOf((*MockEmailWithSendingJobSeekerRepository)(nil).GetListBySendingJobSeekerID), jobSeekerID)
}

// MockSendingSaleRepository is a mock of SendingSaleRepository interface.
type MockSendingSaleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingSaleRepositoryMockRecorder
}

// MockSendingSaleRepositoryMockRecorder is the mock recorder for MockSendingSaleRepository.
type MockSendingSaleRepositoryMockRecorder struct {
	mock *MockSendingSaleRepository
}

// NewMockSendingSaleRepository creates a new mock instance.
func NewMockSendingSaleRepository(ctrl *gomock.Controller) *MockSendingSaleRepository {
	mock := &MockSendingSaleRepository{ctrl: ctrl}
	mock.recorder = &MockSendingSaleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingSaleRepository) EXPECT() *MockSendingSaleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingSaleRepository) Create(sendingSale *entity.SendingSale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", sendingSale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingSaleRepositoryMockRecorder) Create(sendingSale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingSaleRepository)(nil).Create), sendingSale)
}

// FindByID mocks base method.
func (m *MockSendingSaleRepository) FindByID(sendingSaleID uint) (*entity.SendingSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", sendingSaleID)
	ret0, _ := ret[0].(*entity.SendingSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSendingSaleRepositoryMockRecorder) FindByID(sendingSaleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSendingSaleRepository)(nil).FindByID), sendingSaleID)
}

// FindByJobSeekerIDAndEnterpriseID mocks base method.
func (m *MockSendingSaleRepository) FindByJobSeekerIDAndEnterpriseID(sendingJobSeekerID, sendingEnterpriseID uint) (*entity.SendingSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByJobSeekerIDAndEnterpriseID", sendingJobSeekerID, sendingEnterpriseID)
	ret0, _ := ret[0].(*entity.SendingSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByJobSeekerIDAndEnterpriseID indicates an expected call of FindByJobSeekerIDAndEnterpriseID.
func (mr *MockSendingSaleRepositoryMockRecorder) FindByJobSeekerIDAndEnterpriseID(sendingJobSeekerID, sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByJobSeekerIDAndEnterpriseID", reflect.TypeOf((*MockSendingSaleRepository)(nil).FindByJobSeekerIDAndEnterpriseID), sendingJobSeekerID, sendingEnterpriseID)
}

// GetAll mocks base method.
func (m *MockSendingSaleRepository) GetAll() ([]*entity.SendingSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.SendingSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSendingSaleRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSendingSaleRepository)(nil).GetAll))
}

// GetAllForMonthly mocks base method.
func (m *MockSendingSaleRepository) GetAllForMonthly(startMonth, endMonth string) ([]*entity.SendingSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForMonthly", startMonth, endMonth)
	ret0, _ := ret[0].([]*entity.SendingSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForMonthly indicates an expected call of GetAllForMonthly.
func (mr *MockSendingSaleRepositoryMockRecorder) GetAllForMonthly(startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForMonthly", reflect.TypeOf((*MockSendingSaleRepository)(nil).GetAllForMonthly), startMonth, endMonth)
}

// GetListByAgentID mocks base method.
func (m *MockSendingSaleRepository) GetListByAgentID(agentID uint) ([]*entity.SendingSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentID", agentID)
	ret0, _ := ret[0].([]*entity.SendingSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentID indicates an expected call of GetListByAgentID.
func (mr *MockSendingSaleRepositoryMockRecorder) GetListByAgentID(agentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentID", reflect.TypeOf((*MockSendingSaleRepository)(nil).GetListByAgentID), agentID)
}

// GetListByAgentIDForMonthly mocks base method.
func (m *MockSendingSaleRepository) GetListByAgentIDForMonthly(senderAgentID uint, startMonth, endMonth string) ([]*entity.SendingSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByAgentIDForMonthly", senderAgentID, startMonth, endMonth)
	ret0, _ := ret[0].([]*entity.SendingSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByAgentIDForMonthly indicates an expected call of GetListByAgentIDForMonthly.
func (mr *MockSendingSaleRepositoryMockRecorder) GetListByAgentIDForMonthly(senderAgentID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByAgentIDForMonthly", reflect.TypeOf((*MockSendingSaleRepository)(nil).GetListByAgentIDForMonthly), senderAgentID, startMonth, endMonth)
}

// GetListBySenderAgentIDForMonthly mocks base method.
func (m *MockSendingSaleRepository) GetListBySenderAgentIDForMonthly(senderAgentID uint, startMonth, endMonth string) ([]*entity.SendingSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySenderAgentIDForMonthly", senderAgentID, startMonth, endMonth)
	ret0, _ := ret[0].([]*entity.SendingSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySenderAgentIDForMonthly indicates an expected call of GetListBySenderAgentIDForMonthly.
func (mr *MockSendingSaleRepositoryMockRecorder) GetListBySenderAgentIDForMonthly(senderAgentID, startMonth, endMonth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySenderAgentIDForMonthly", reflect.TypeOf((*MockSendingSaleRepository)(nil).GetListBySenderAgentIDForMonthly), senderAgentID, startMonth, endMonth)
}

// Update mocks base method.
func (m *MockSendingSaleRepository) Update(sendingSaleID uint, sendingSale *entity.SendingSale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", sendingSaleID, sendingSale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSendingSaleRepositoryMockRecorder) Update(sendingSaleID, sendingSale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSendingSaleRepository)(nil).Update), sendingSaleID, sendingSale)
}

// MockSendingShareDocumentRepository is a mock of SendingShareDocumentRepository interface.
type MockSendingShareDocumentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSendingShareDocumentRepositoryMockRecorder
}

// MockSendingShareDocumentRepositoryMockRecorder is the mock recorder for MockSendingShareDocumentRepository.
type MockSendingShareDocumentRepositoryMockRecorder struct {
	mock *MockSendingShareDocumentRepository
}

// NewMockSendingShareDocumentRepository creates a new mock instance.
func NewMockSendingShareDocumentRepository(ctrl *gomock.Controller) *MockSendingShareDocumentRepository {
	mock := &MockSendingShareDocumentRepository{ctrl: ctrl}
	mock.recorder = &MockSendingShareDocumentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingShareDocumentRepository) EXPECT() *MockSendingShareDocumentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSendingShareDocumentRepository) Create(sendingShareDocument *entity.SendingShareDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", sendingShareDocument)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSendingShareDocumentRepositoryMockRecorder) Create(sendingShareDocument any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSendingShareDocumentRepository)(nil).Create), sendingShareDocument)
}

// FindBySendingJobSeekerIDAndSendingEnterpriseID mocks base method.
func (m *MockSendingShareDocumentRepository) FindBySendingJobSeekerIDAndSendingEnterpriseID(sendingJobSeekerID, sendingEnterpriseID uint) (*entity.SendingShareDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySendingJobSeekerIDAndSendingEnterpriseID", sendingJobSeekerID, sendingEnterpriseID)
	ret0, _ := ret[0].(*entity.SendingShareDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySendingJobSeekerIDAndSendingEnterpriseID indicates an expected call of FindBySendingJobSeekerIDAndSendingEnterpriseID.
func (mr *MockSendingShareDocumentRepositoryMockRecorder) FindBySendingJobSeekerIDAndSendingEnterpriseID(sendingJobSeekerID, sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySendingJobSeekerIDAndSendingEnterpriseID", reflect.TypeOf((*MockSendingShareDocumentRepository)(nil).FindBySendingJobSeekerIDAndSendingEnterpriseID), sendingJobSeekerID, sendingEnterpriseID)
}

// GetListBySendingEnterpriseID mocks base method.
func (m *MockSendingShareDocumentRepository) GetListBySendingEnterpriseID(sendingEnterpriseID uint) ([]*entity.SendingShareDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListBySendingEnterpriseID", sendingEnterpriseID)
	ret0, _ := ret[0].([]*entity.SendingShareDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListBySendingEnterpriseID indicates an expected call of GetListBySendingEnterpriseID.
func (mr *MockSendingShareDocumentRepositoryMockRecorder) GetListBySendingEnterpriseID(sendingEnterpriseID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListBySendingEnterpriseID", reflect.TypeOf((*MockSendingShareDocumentRepository)(nil).GetListBySendingEnterpriseID), sendingEnterpriseID)
}

// Update mocks base method.
func (m *MockSendingShareDocumentRepository) Update(sendingSaleID uint, sendingShareDocument *entity.SendingShareDocument) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", sendingSaleID, sendingShareDocument)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSendingShareDocumentRepositoryMockRecorder) Update(sendingSaleID, sendingShareDocument any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSendingShareDocumentRepository)(nil).Update), sendingSaleID, sendingShareDocument)
}

// MockGoogleAuthenticationRepository is a mock of GoogleAuthenticationRepository interface.
type MockGoogleAuthenticationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleAuthenticationRepositoryMockRecorder
}

// MockGoogleAuthenticationRepositoryMockRecorder is the mock recorder for MockGoogleAuthenticationRepository.
type MockGoogleAuthenticationRepositoryMockRecorder struct {
	mock *MockGoogleAuthenticationRepository
}

// NewMockGoogleAuthenticationRepository creates a new mock instance.
func NewMockGoogleAuthenticationRepository(ctrl *gomock.Controller) *MockGoogleAuthenticationRepository {
	mock := &MockGoogleAuthenticationRepository{ctrl: ctrl}
	mock.recorder = &MockGoogleAuthenticationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleAuthenticationRepository) EXPECT() *MockGoogleAuthenticationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGoogleAuthenticationRepository) Create(googleAuth *entity.GoogleAuthentication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", googleAuth)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockGoogleAuthenticationRepositoryMockRecorder) Create(googleAuth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGoogleAuthenticationRepository)(nil).Create), googleAuth)
}

// FindLatest mocks base method.
func (m *MockGoogleAuthenticationRepository) FindLatest() (*entity.GoogleAuthentication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatest")
	ret0, _ := ret[0].(*entity.GoogleAuthentication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatest indicates an expected call of FindLatest.
func (mr *MockGoogleAuthenticationRepositoryMockRecorder) FindLatest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatest", reflect.TypeOf((*MockGoogleAuthenticationRepository)(nil).FindLatest))
}

// Update mocks base method.
func (m *MockGoogleAuthenticationRepository) Update(id uint, googleAuth *entity.GoogleAuthentication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, googleAuth)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockGoogleAuthenticationRepositoryMockRecorder) Update(id, googleAuth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGoogleAuthenticationRepository)(nil).Update), id, googleAuth)
}

// UpdateTokenAndExpiry mocks base method.
func (m *MockGoogleAuthenticationRepository) UpdateTokenAndExpiry(id uint, accessToken string, expiry time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTokenAndExpiry", id, accessToken, expiry)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTokenAndExpiry indicates an expected call of UpdateTokenAndExpiry.
func (mr *MockGoogleAuthenticationRepositoryMockRecorder) UpdateTokenAndExpiry(id, accessToken, expiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTokenAndExpiry", reflect.TypeOf((*MockGoogleAuthenticationRepository)(nil).UpdateTokenAndExpiry), id, accessToken, expiry)
}

// MockUserEntryRepository is a mock of UserEntryRepository interface.
type MockUserEntryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserEntryRepositoryMockRecorder
}

// MockUserEntryRepositoryMockRecorder is the mock recorder for MockUserEntryRepository.
type MockUserEntryRepositoryMockRecorder struct {
	mock *MockUserEntryRepository
}

// NewMockUserEntryRepository creates a new mock instance.
func NewMockUserEntryRepository(ctrl *gomock.Controller) *MockUserEntryRepository {
	mock := &MockUserEntryRepository{ctrl: ctrl}
	mock.recorder = &MockUserEntryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserEntryRepository) EXPECT() *MockUserEntryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserEntryRepository) Create(userEntry *entity.UserEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userEntry)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserEntryRepositoryMockRecorder) Create(userEntry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserEntryRepository)(nil).Create), userEntry)
}

// GetUnprocessed mocks base method.
func (m *MockUserEntryRepository) GetUnprocessed() ([]*entity.UserEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessed")
	ret0, _ := ret[0].([]*entity.UserEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnprocessed indicates an expected call of GetUnprocessed.
func (mr *MockUserEntryRepositoryMockRecorder) GetUnprocessed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessed", reflect.TypeOf((*MockUserEntryRepository)(nil).GetUnprocessed))
}

// UpdateIsProcessedByUserID mocks base method.
func (m *MockUserEntryRepository) UpdateIsProcessedByUserID(userID string, isProcessed bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsProcessedByUserID", userID, isProcessed)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsProcessedByUserID indicates an expected call of UpdateIsProcessedByUserID.
func (mr *MockUserEntryRepositoryMockRecorder) UpdateIsProcessedByUserID(userID, isProcessed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsProcessedByUserID", reflect.TypeOf((*MockUserEntryRepository)(nil).UpdateIsProcessedByUserID), userID, isProcessed)
}

// UpdateIsProcessedByUserIDList mocks base method.
func (m *MockUserEntryRepository) UpdateIsProcessedByUserIDList(userIDList []string, isProcessed bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsProcessedByUserIDList", userIDList, isProcessed)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsProcessedByUserIDList indicates an expected call of UpdateIsProcessedByUserIDList.
func (mr *MockUserEntryRepositoryMockRecorder) UpdateIsProcessedByUserIDList(userIDList, isProcessed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsProcessedByUserIDList", reflect.TypeOf((*MockUserEntryRepository)(nil).UpdateIsProcessedByUserIDList), userIDList, isProcessed)
}
