// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/email_with_job_seeker.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/email_with_job_seeker.go -destination ./mock/mock_interactor/mock_email_with_job_seeker.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockEmailWithJobSeekerInteractor is a mock of EmailWithJobSeekerInteractor interface.
type MockEmailWithJobSeekerInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockEmailWithJobSeekerInteractorMockRecorder
}

// MockEmailWithJobSeekerInteractorMockRecorder is the mock recorder for MockEmailWithJobSeekerInteractor.
type MockEmailWithJobSeekerInteractorMockRecorder struct {
	mock *MockEmailWithJobSeekerInteractor
}

// NewMockEmailWithJobSeekerInteractor creates a new mock instance.
func NewMockEmailWithJobSeekerInteractor(ctrl *gomock.Controller) *MockEmailWithJobSeekerInteractor {
	mock := &MockEmailWithJobSeekerInteractor{ctrl: ctrl}
	mock.recorder = &MockEmailWithJobSeekerInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailWithJobSeekerInteractor) EXPECT() *MockEmailWithJobSeekerInteractorMockRecorder {
	return m.recorder
}

// GetEmailWithJobSeekerListByJobSeekerID mocks base method.
func (m *MockEmailWithJobSeekerInteractor) GetEmailWithJobSeekerListByJobSeekerID(input interactor.GetEmailWithJobSeekerListByJobSeekerIDInput) (interactor.GetEmailWithJobSeekerListByJobSeekerIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailWithJobSeekerListByJobSeekerID", input)
	ret0, _ := ret[0].(interactor.GetEmailWithJobSeekerListByJobSeekerIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailWithJobSeekerListByJobSeekerID indicates an expected call of GetEmailWithJobSeekerListByJobSeekerID.
func (mr *MockEmailWithJobSeekerInteractorMockRecorder) GetEmailWithJobSeekerListByJobSeekerID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailWithJobSeekerListByJobSeekerID", reflect.TypeOf((*MockEmailWithJobSeekerInteractor)(nil).GetEmailWithJobSeekerListByJobSeekerID), input)
}

// SendEmailWithJobSeeker mocks base method.
func (m *MockEmailWithJobSeekerInteractor) SendEmailWithJobSeeker(input interactor.SendEmailWithJobSeekerInput) (interactor.SendEmailWithJobSeekerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailWithJobSeeker", input)
	ret0, _ := ret[0].(interactor.SendEmailWithJobSeekerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmailWithJobSeeker indicates an expected call of SendEmailWithJobSeeker.
func (mr *MockEmailWithJobSeekerInteractorMockRecorder) SendEmailWithJobSeeker(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailWithJobSeeker", reflect.TypeOf((*MockEmailWithJobSeekerInteractor)(nil).SendEmailWithJobSeeker), input)
}
