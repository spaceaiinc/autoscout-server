// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/job_seeker_schedule.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/job_seeker_schedule.go -destination ./mock/mock_interactor/mock_job_seeker_schedule.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockJobSeekerScheduleInteractor is a mock of JobSeekerScheduleInteractor interface.
type MockJobSeekerScheduleInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerScheduleInteractorMockRecorder
}

// MockJobSeekerScheduleInteractorMockRecorder is the mock recorder for MockJobSeekerScheduleInteractor.
type MockJobSeekerScheduleInteractorMockRecorder struct {
	mock *MockJobSeekerScheduleInteractor
}

// NewMockJobSeekerScheduleInteractor creates a new mock instance.
func NewMockJobSeekerScheduleInteractor(ctrl *gomock.Controller) *MockJobSeekerScheduleInteractor {
	mock := &MockJobSeekerScheduleInteractor{ctrl: ctrl}
	mock.recorder = &MockJobSeekerScheduleInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerScheduleInteractor) EXPECT() *MockJobSeekerScheduleInteractorMockRecorder {
	return m.recorder
}

// CreateJobSeekerSchedule mocks base method.
func (m *MockJobSeekerScheduleInteractor) CreateJobSeekerSchedule(input interactor.CreateJobSeekerScheduleInput) (interactor.CreateJobSeekerScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobSeekerSchedule", input)
	ret0, _ := ret[0].(interactor.CreateJobSeekerScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobSeekerSchedule indicates an expected call of CreateJobSeekerSchedule.
func (mr *MockJobSeekerScheduleInteractorMockRecorder) CreateJobSeekerSchedule(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobSeekerSchedule", reflect.TypeOf((*MockJobSeekerScheduleInteractor)(nil).CreateJobSeekerSchedule), input)
}

// DeleteJobSeekerSchedule mocks base method.
func (m *MockJobSeekerScheduleInteractor) DeleteJobSeekerSchedule(input interactor.DeleteJobSeekerScheduleInput) (interactor.DeleteJobSeekerScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSeekerSchedule", input)
	ret0, _ := ret[0].(interactor.DeleteJobSeekerScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobSeekerSchedule indicates an expected call of DeleteJobSeekerSchedule.
func (mr *MockJobSeekerScheduleInteractorMockRecorder) DeleteJobSeekerSchedule(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSeekerSchedule", reflect.TypeOf((*MockJobSeekerScheduleInteractor)(nil).DeleteJobSeekerSchedule), input)
}

// GetJobSeekerScheduleListByJobSeekerID mocks base method.
func (m *MockJobSeekerScheduleInteractor) GetJobSeekerScheduleListByJobSeekerID(input interactor.GetJobSeekerScheduleListByJobSeekerIDInput) (interactor.GetJobSeekerScheduleListByJobSeekerIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerScheduleListByJobSeekerID", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerScheduleListByJobSeekerIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerScheduleListByJobSeekerID indicates an expected call of GetJobSeekerScheduleListByJobSeekerID.
func (mr *MockJobSeekerScheduleInteractorMockRecorder) GetJobSeekerScheduleListByJobSeekerID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerScheduleListByJobSeekerID", reflect.TypeOf((*MockJobSeekerScheduleInteractor)(nil).GetJobSeekerScheduleListByJobSeekerID), input)
}

// GetJobSeekerScheduleTypeListByJobSeekerID mocks base method.
func (m *MockJobSeekerScheduleInteractor) GetJobSeekerScheduleTypeListByJobSeekerID(input interactor.GetJobSeekerScheduleTypeListByJobSeekerIDInput) (interactor.GetJobSeekerScheduleTypeListByJobSeekerIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerScheduleTypeListByJobSeekerID", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerScheduleTypeListByJobSeekerIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerScheduleTypeListByJobSeekerID indicates an expected call of GetJobSeekerScheduleTypeListByJobSeekerID.
func (mr *MockJobSeekerScheduleInteractorMockRecorder) GetJobSeekerScheduleTypeListByJobSeekerID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerScheduleTypeListByJobSeekerID", reflect.TypeOf((*MockJobSeekerScheduleInteractor)(nil).GetJobSeekerScheduleTypeListByJobSeekerID), input)
}

// ShareScheduleToCAStaff mocks base method.
func (m *MockJobSeekerScheduleInteractor) ShareScheduleToCAStaff(input interactor.ShareScheduleToCAStaffInput) (interactor.ShareScheduleToCAStaffOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShareScheduleToCAStaff", input)
	ret0, _ := ret[0].(interactor.ShareScheduleToCAStaffOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShareScheduleToCAStaff indicates an expected call of ShareScheduleToCAStaff.
func (mr *MockJobSeekerScheduleInteractorMockRecorder) ShareScheduleToCAStaff(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShareScheduleToCAStaff", reflect.TypeOf((*MockJobSeekerScheduleInteractor)(nil).ShareScheduleToCAStaff), input)
}

// UpdateJobSeekerSchedule mocks base method.
func (m *MockJobSeekerScheduleInteractor) UpdateJobSeekerSchedule(input interactor.UpdateJobSeekerScheduleInput) (interactor.UpdateJobSeekerScheduleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobSeekerSchedule", input)
	ret0, _ := ret[0].(interactor.UpdateJobSeekerScheduleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobSeekerSchedule indicates an expected call of UpdateJobSeekerSchedule.
func (mr *MockJobSeekerScheduleInteractorMockRecorder) UpdateJobSeekerSchedule(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobSeekerSchedule", reflect.TypeOf((*MockJobSeekerScheduleInteractor)(nil).UpdateJobSeekerSchedule), input)
}
