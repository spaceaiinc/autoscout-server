// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/job_seeker.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/job_seeker.go -destination ./mock/mock_interactor/mock_job_seeker.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockJobSeekerInteractor is a mock of JobSeekerInteractor interface.
type MockJobSeekerInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockJobSeekerInteractorMockRecorder
}

// MockJobSeekerInteractorMockRecorder is the mock recorder for MockJobSeekerInteractor.
type MockJobSeekerInteractorMockRecorder struct {
	mock *MockJobSeekerInteractor
}

// NewMockJobSeekerInteractor creates a new mock instance.
func NewMockJobSeekerInteractor(ctrl *gomock.Controller) *MockJobSeekerInteractor {
	mock := &MockJobSeekerInteractor{ctrl: ctrl}
	mock.recorder = &MockJobSeekerInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobSeekerInteractor) EXPECT() *MockJobSeekerInteractorMockRecorder {
	return m.recorder
}

// CheckJobSeekerByUUIDAndName mocks base method.
func (m *MockJobSeekerInteractor) CheckJobSeekerByUUIDAndName(input interactor.CheckJobSeekerByUUIDAndNameInput) (interactor.CheckJobSeekerByUUIDAndNameOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckJobSeekerByUUIDAndName", input)
	ret0, _ := ret[0].(interactor.CheckJobSeekerByUUIDAndNameOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckJobSeekerByUUIDAndName indicates an expected call of CheckJobSeekerByUUIDAndName.
func (mr *MockJobSeekerInteractorMockRecorder) CheckJobSeekerByUUIDAndName(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckJobSeekerByUUIDAndName", reflect.TypeOf((*MockJobSeekerInteractor)(nil).CheckJobSeekerByUUIDAndName), input)
}

// CheckResetPasswordToken mocks base method.
func (m *MockJobSeekerInteractor) CheckResetPasswordToken(input interactor.CheckResetPasswordTokenInput) (interactor.CheckResetPasswordTokenOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckResetPasswordToken", input)
	ret0, _ := ret[0].(interactor.CheckResetPasswordTokenOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckResetPasswordToken indicates an expected call of CheckResetPasswordToken.
func (mr *MockJobSeekerInteractorMockRecorder) CheckResetPasswordToken(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckResetPasswordToken", reflect.TypeOf((*MockJobSeekerInteractor)(nil).CheckResetPasswordToken), input)
}

// CreateInitialQuestionnaire mocks base method.
func (m *MockJobSeekerInteractor) CreateInitialQuestionnaire(input interactor.CreateInitialQuestionnaireInput) (interactor.CreateInitialQuestionnairdhutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInitialQuestionnaire", input)
	ret0, _ := ret[0].(interactor.CreateInitialQuestionnairdhutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInitialQuestionnaire indicates an expected call of CreateInitialQuestionnaire.
func (mr *MockJobSeekerInteractorMockRecorder) CreateInitialQuestionnaire(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInitialQuestionnaire", reflect.TypeOf((*MockJobSeekerInteractor)(nil).CreateInitialQuestionnaire), input)
}

// CreateJobSeeker mocks base method.
func (m *MockJobSeekerInteractor) CreateJobSeeker(input interactor.CreateJobSeekerInput) (interactor.CreateJobSeekerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobSeeker", input)
	ret0, _ := ret[0].(interactor.CreateJobSeekerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobSeeker indicates an expected call of CreateJobSeeker.
func (mr *MockJobSeekerInteractorMockRecorder) CreateJobSeeker(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobSeeker", reflect.TypeOf((*MockJobSeekerInteractor)(nil).CreateJobSeeker), input)
}

// CreateJobSeekerDocument mocks base method.
func (m *MockJobSeekerInteractor) CreateJobSeekerDocument(input interactor.CreateJobSeekerDocumentInput) (interactor.CreateJobSeekerDocumentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobSeekerDocument", input)
	ret0, _ := ret[0].(interactor.CreateJobSeekerDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobSeekerDocument indicates an expected call of CreateJobSeekerDocument.
func (mr *MockJobSeekerInteractorMockRecorder) CreateJobSeekerDocument(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobSeekerDocument", reflect.TypeOf((*MockJobSeekerInteractor)(nil).CreateJobSeekerDocument), input)
}

// CreateJobSeekerFromLP mocks base method.
func (m *MockJobSeekerInteractor) CreateJobSeekerFromLP(input interactor.CreateJobSeekerFromLPInput) (interactor.CreateJobSeekerFromLPOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobSeekerFromLP", input)
	ret0, _ := ret[0].(interactor.CreateJobSeekerFromLPOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobSeekerFromLP indicates an expected call of CreateJobSeekerFromLP.
func (mr *MockJobSeekerInteractorMockRecorder) CreateJobSeekerFromLP(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobSeekerFromLP", reflect.TypeOf((*MockJobSeekerInteractor)(nil).CreateJobSeekerFromLP), input)
}

// DeleteJobSeeker mocks base method.
func (m *MockJobSeekerInteractor) DeleteJobSeeker(input interactor.DeleteJobSeekerInput) (interactor.DeleteJobSeekerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSeeker", input)
	ret0, _ := ret[0].(interactor.DeleteJobSeekerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobSeeker indicates an expected call of DeleteJobSeeker.
func (mr *MockJobSeekerInteractorMockRecorder) DeleteJobSeeker(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSeeker", reflect.TypeOf((*MockJobSeekerInteractor)(nil).DeleteJobSeeker), input)
}

// DeleteJobSeekerCVOriginURL mocks base method.
func (m *MockJobSeekerInteractor) DeleteJobSeekerCVOriginURL(input interactor.DeleteJobSeekerCVOriginURLInput) (interactor.DeleteJobSeekerCVOriginURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSeekerCVOriginURL", input)
	ret0, _ := ret[0].(interactor.DeleteJobSeekerCVOriginURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobSeekerCVOriginURL indicates an expected call of DeleteJobSeekerCVOriginURL.
func (mr *MockJobSeekerInteractorMockRecorder) DeleteJobSeekerCVOriginURL(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSeekerCVOriginURL", reflect.TypeOf((*MockJobSeekerInteractor)(nil).DeleteJobSeekerCVOriginURL), input)
}

// DeleteJobSeekerCVPDFURL mocks base method.
func (m *MockJobSeekerInteractor) DeleteJobSeekerCVPDFURL(input interactor.DeleteJobSeekerCVPDFURLInput) (interactor.DeleteJobSeekerCVPDFURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSeekerCVPDFURL", input)
	ret0, _ := ret[0].(interactor.DeleteJobSeekerCVPDFURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobSeekerCVPDFURL indicates an expected call of DeleteJobSeekerCVPDFURL.
func (mr *MockJobSeekerInteractorMockRecorder) DeleteJobSeekerCVPDFURL(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSeekerCVPDFURL", reflect.TypeOf((*MockJobSeekerInteractor)(nil).DeleteJobSeekerCVPDFURL), input)
}

// DeleteJobSeekerIDPhotoURL mocks base method.
func (m *MockJobSeekerInteractor) DeleteJobSeekerIDPhotoURL(input interactor.DeleteJobSeekerIDPhotoURLInput) (interactor.DeleteJobSeekerIDPhotoURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSeekerIDPhotoURL", input)
	ret0, _ := ret[0].(interactor.DeleteJobSeekerIDPhotoURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobSeekerIDPhotoURL indicates an expected call of DeleteJobSeekerIDPhotoURL.
func (mr *MockJobSeekerInteractorMockRecorder) DeleteJobSeekerIDPhotoURL(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSeekerIDPhotoURL", reflect.TypeOf((*MockJobSeekerInteractor)(nil).DeleteJobSeekerIDPhotoURL), input)
}

// DeleteJobSeekerOtherDocument1URL mocks base method.
func (m *MockJobSeekerInteractor) DeleteJobSeekerOtherDocument1URL(input interactor.DeleteJobSeekerOtherDocument1URLInput) (interactor.DeleteJobSeekerOtherDocument1URLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSeekerOtherDocument1URL", input)
	ret0, _ := ret[0].(interactor.DeleteJobSeekerOtherDocument1URLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobSeekerOtherDocument1URL indicates an expected call of DeleteJobSeekerOtherDocument1URL.
func (mr *MockJobSeekerInteractorMockRecorder) DeleteJobSeekerOtherDocument1URL(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSeekerOtherDocument1URL", reflect.TypeOf((*MockJobSeekerInteractor)(nil).DeleteJobSeekerOtherDocument1URL), input)
}

// DeleteJobSeekerOtherDocument2URL mocks base method.
func (m *MockJobSeekerInteractor) DeleteJobSeekerOtherDocument2URL(input interactor.DeleteJobSeekerOtherDocument2URLInput) (interactor.DeleteJobSeekerOtherDocument2URLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSeekerOtherDocument2URL", input)
	ret0, _ := ret[0].(interactor.DeleteJobSeekerOtherDocument2URLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobSeekerOtherDocument2URL indicates an expected call of DeleteJobSeekerOtherDocument2URL.
func (mr *MockJobSeekerInteractorMockRecorder) DeleteJobSeekerOtherDocument2URL(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSeekerOtherDocument2URL", reflect.TypeOf((*MockJobSeekerInteractor)(nil).DeleteJobSeekerOtherDocument2URL), input)
}

// DeleteJobSeekerOtherDocument3URL mocks base method.
func (m *MockJobSeekerInteractor) DeleteJobSeekerOtherDocument3URL(input interactor.DeleteJobSeekerOtherDocument3URLInput) (interactor.DeleteJobSeekerOtherDocument3URLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSeekerOtherDocument3URL", input)
	ret0, _ := ret[0].(interactor.DeleteJobSeekerOtherDocument3URLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobSeekerOtherDocument3URL indicates an expected call of DeleteJobSeekerOtherDocument3URL.
func (mr *MockJobSeekerInteractorMockRecorder) DeleteJobSeekerOtherDocument3URL(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSeekerOtherDocument3URL", reflect.TypeOf((*MockJobSeekerInteractor)(nil).DeleteJobSeekerOtherDocument3URL), input)
}

// DeleteJobSeekerRecommendationOriginURL mocks base method.
func (m *MockJobSeekerInteractor) DeleteJobSeekerRecommendationOriginURL(input interactor.DeleteJobSeekerRecommendationOriginURLInput) (interactor.DeleteJobSeekerRecommendationOriginURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSeekerRecommendationOriginURL", input)
	ret0, _ := ret[0].(interactor.DeleteJobSeekerRecommendationOriginURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobSeekerRecommendationOriginURL indicates an expected call of DeleteJobSeekerRecommendationOriginURL.
func (mr *MockJobSeekerInteractorMockRecorder) DeleteJobSeekerRecommendationOriginURL(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSeekerRecommendationOriginURL", reflect.TypeOf((*MockJobSeekerInteractor)(nil).DeleteJobSeekerRecommendationOriginURL), input)
}

// DeleteJobSeekerRecommendationPDFURL mocks base method.
func (m *MockJobSeekerInteractor) DeleteJobSeekerRecommendationPDFURL(input interactor.DeleteJobSeekerRecommendationPDFURLInput) (interactor.DeleteJobSeekerRecommendationPDFURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSeekerRecommendationPDFURL", input)
	ret0, _ := ret[0].(interactor.DeleteJobSeekerRecommendationPDFURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobSeekerRecommendationPDFURL indicates an expected call of DeleteJobSeekerRecommendationPDFURL.
func (mr *MockJobSeekerInteractorMockRecorder) DeleteJobSeekerRecommendationPDFURL(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSeekerRecommendationPDFURL", reflect.TypeOf((*MockJobSeekerInteractor)(nil).DeleteJobSeekerRecommendationPDFURL), input)
}

// DeleteJobSeekerResumeOriginURL mocks base method.
func (m *MockJobSeekerInteractor) DeleteJobSeekerResumeOriginURL(input interactor.DeleteJobSeekerResumeOriginURLInput) (interactor.DeleteJobSeekerResumeOriginURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSeekerResumeOriginURL", input)
	ret0, _ := ret[0].(interactor.DeleteJobSeekerResumeOriginURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobSeekerResumeOriginURL indicates an expected call of DeleteJobSeekerResumeOriginURL.
func (mr *MockJobSeekerInteractorMockRecorder) DeleteJobSeekerResumeOriginURL(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSeekerResumeOriginURL", reflect.TypeOf((*MockJobSeekerInteractor)(nil).DeleteJobSeekerResumeOriginURL), input)
}

// DeleteJobSeekerResumePDFURL mocks base method.
func (m *MockJobSeekerInteractor) DeleteJobSeekerResumePDFURL(input interactor.DeleteJobSeekerResumePDFURLInput) (interactor.DeleteJobSeekerResumePDFURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobSeekerResumePDFURL", input)
	ret0, _ := ret[0].(interactor.DeleteJobSeekerResumePDFURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobSeekerResumePDFURL indicates an expected call of DeleteJobSeekerResumePDFURL.
func (mr *MockJobSeekerInteractorMockRecorder) DeleteJobSeekerResumePDFURL(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobSeekerResumePDFURL", reflect.TypeOf((*MockJobSeekerInteractor)(nil).DeleteJobSeekerResumePDFURL), input)
}

// ExportJobSeekerCSV mocks base method.
func (m *MockJobSeekerInteractor) ExportJobSeekerCSV(input interactor.ExportJobSeekerCSVInput) (interactor.ExportJobSeekerCSVOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportJobSeekerCSV", input)
	ret0, _ := ret[0].(interactor.ExportJobSeekerCSVOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportJobSeekerCSV indicates an expected call of ExportJobSeekerCSV.
func (mr *MockJobSeekerInteractorMockRecorder) ExportJobSeekerCSV(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportJobSeekerCSV", reflect.TypeOf((*MockJobSeekerInteractor)(nil).ExportJobSeekerCSV), input)
}

// GetAllJobSeeker mocks base method.
func (m *MockJobSeekerInteractor) GetAllJobSeeker(input interactor.GetAllJobSeekerInput) (interactor.GetAllJobSeekerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobSeeker", input)
	ret0, _ := ret[0].(interactor.GetAllJobSeekerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobSeeker indicates an expected call of GetAllJobSeeker.
func (mr *MockJobSeekerInteractorMockRecorder) GetAllJobSeeker(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobSeeker", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetAllJobSeeker), input)
}

// GetDuplicateJobSeekerList mocks base method.
func (m *MockJobSeekerInteractor) GetDuplicateJobSeekerList(input interactor.GetDuplicateJobSeekerListInput) (interactor.GetDuplicateJobSeekerListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuplicateJobSeekerList", input)
	ret0, _ := ret[0].(interactor.GetDuplicateJobSeekerListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDuplicateJobSeekerList indicates an expected call of GetDuplicateJobSeekerList.
func (mr *MockJobSeekerInteractorMockRecorder) GetDuplicateJobSeekerList(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuplicateJobSeekerList", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetDuplicateJobSeekerList), input)
}

// GetGuestJobSeekerForByUUID mocks base method.
func (m *MockJobSeekerInteractor) GetGuestJobSeekerForByUUID(input interactor.GetGuestJobSeekerForByUUIDInput) (interactor.GetGuestJobSeekerForByUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuestJobSeekerForByUUID", input)
	ret0, _ := ret[0].(interactor.GetGuestJobSeekerForByUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuestJobSeekerForByUUID indicates an expected call of GetGuestJobSeekerForByUUID.
func (mr *MockJobSeekerInteractorMockRecorder) GetGuestJobSeekerForByUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuestJobSeekerForByUUID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetGuestJobSeekerForByUUID), input)
}

// GetJobSeekerAgentIDByUUID mocks base method.
func (m *MockJobSeekerInteractor) GetJobSeekerAgentIDByUUID(input interactor.GetJobSeekerAgentIDByUUIDInput) (interactor.GetJobSeekerAgentIDByUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerAgentIDByUUID", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerAgentIDByUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerAgentIDByUUID indicates an expected call of GetJobSeekerAgentIDByUUID.
func (mr *MockJobSeekerInteractorMockRecorder) GetJobSeekerAgentIDByUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerAgentIDByUUID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetJobSeekerAgentIDByUUID), input)
}

// GetJobSeekerByID mocks base method.
func (m *MockJobSeekerInteractor) GetJobSeekerByID(input interactor.GetJobSeekerByIDInput) (interactor.GetJobSeekerByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerByID", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerByID indicates an expected call of GetJobSeekerByID.
func (mr *MockJobSeekerInteractorMockRecorder) GetJobSeekerByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerByID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetJobSeekerByID), input)
}

// GetJobSeekerByTaskGroupUUID mocks base method.
func (m *MockJobSeekerInteractor) GetJobSeekerByTaskGroupUUID(input interactor.GetJobSeekerByTaskGroupUUIDInput) (interactor.GetJobSeekerByTaskGroupUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerByTaskGroupUUID", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerByTaskGroupUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerByTaskGroupUUID indicates an expected call of GetJobSeekerByTaskGroupUUID.
func (mr *MockJobSeekerInteractorMockRecorder) GetJobSeekerByTaskGroupUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerByTaskGroupUUID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetJobSeekerByTaskGroupUUID), input)
}

// GetJobSeekerByUUID mocks base method.
func (m *MockJobSeekerInteractor) GetJobSeekerByUUID(input interactor.GetJobSeekerByUUIDInput) (interactor.GetJobSeekerByUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerByUUID", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerByUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerByUUID indicates an expected call of GetJobSeekerByUUID.
func (mr *MockJobSeekerInteractorMockRecorder) GetJobSeekerByUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerByUUID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetJobSeekerByUUID), input)
}

// GetJobSeekerDesiredForGuestByUUID mocks base method.
func (m *MockJobSeekerInteractor) GetJobSeekerDesiredForGuestByUUID(input interactor.GetJobSeekerDesiredForGuestByUUIDInput) (interactor.GetJobSeekerDesiredForGuestByUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerDesiredForGuestByUUID", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerDesiredForGuestByUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerDesiredForGuestByUUID indicates an expected call of GetJobSeekerDesiredForGuestByUUID.
func (mr *MockJobSeekerInteractorMockRecorder) GetJobSeekerDesiredForGuestByUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerDesiredForGuestByUUID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetJobSeekerDesiredForGuestByUUID), input)
}

// GetJobSeekerDocumentByJobSeekerID mocks base method.
func (m *MockJobSeekerInteractor) GetJobSeekerDocumentByJobSeekerID(input interactor.GetJobSeekerDocumentByJobSeekerIDInput) (interactor.GetJobSeekerDocumentByJobSeekerIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerDocumentByJobSeekerID", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerDocumentByJobSeekerIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerDocumentByJobSeekerID indicates an expected call of GetJobSeekerDocumentByJobSeekerID.
func (mr *MockJobSeekerInteractorMockRecorder) GetJobSeekerDocumentByJobSeekerID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerDocumentByJobSeekerID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetJobSeekerDocumentByJobSeekerID), input)
}

// GetJobSeekerDocumentByUUID mocks base method.
func (m *MockJobSeekerInteractor) GetJobSeekerDocumentByUUID(input interactor.GetJobSeekerDocumentByUUIDInput) (interactor.GetJobSeekerDocumentByUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerDocumentByUUID", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerDocumentByUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerDocumentByUUID indicates an expected call of GetJobSeekerDocumentByUUID.
func (mr *MockJobSeekerInteractorMockRecorder) GetJobSeekerDocumentByUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerDocumentByUUID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetJobSeekerDocumentByUUID), input)
}

// GetJobSeekerForInitialStepByUUID mocks base method.
func (m *MockJobSeekerInteractor) GetJobSeekerForInitialStepByUUID(input interactor.GetJobSeekerForInitialStepByUUIDInput) (interactor.GetJobSeekerForInitialStepByUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerForInitialStepByUUID", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerForInitialStepByUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerForInitialStepByUUID indicates an expected call of GetJobSeekerForInitialStepByUUID.
func (mr *MockJobSeekerInteractorMockRecorder) GetJobSeekerForInitialStepByUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerForInitialStepByUUID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetJobSeekerForInitialStepByUUID), input)
}

// GetJobSeekerLPRegisterStatusByUUID mocks base method.
func (m *MockJobSeekerInteractor) GetJobSeekerLPRegisterStatusByUUID(input interactor.GetJobSeekerLPRegisterStatusByUUIDInput) (interactor.GetJobSeekerLPRegisterStatusByUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerLPRegisterStatusByUUID", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerLPRegisterStatusByUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerLPRegisterStatusByUUID indicates an expected call of GetJobSeekerLPRegisterStatusByUUID.
func (mr *MockJobSeekerInteractorMockRecorder) GetJobSeekerLPRegisterStatusByUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerLPRegisterStatusByUUID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetJobSeekerLPRegisterStatusByUUID), input)
}

// GetJobSeekerListByIDList mocks base method.
func (m *MockJobSeekerInteractor) GetJobSeekerListByIDList(input interactor.GetJobSeekerListByIDListInput) (interactor.GetJobSeekerListByIDListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerListByIDList", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerListByIDListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerListByIDList indicates an expected call of GetJobSeekerListByIDList.
func (mr *MockJobSeekerInteractorMockRecorder) GetJobSeekerListByIDList(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerListByIDList", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetJobSeekerListByIDList), input)
}

// GetSearchActiveJobSeekerListByAgentID mocks base method.
func (m *MockJobSeekerInteractor) GetSearchActiveJobSeekerListByAgentID(input interactor.GetSearchActiveJobSeekerListByAgentIDInput) (interactor.GetSearchActiveJobSeekerListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchActiveJobSeekerListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetSearchActiveJobSeekerListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchActiveJobSeekerListByAgentID indicates an expected call of GetSearchActiveJobSeekerListByAgentID.
func (mr *MockJobSeekerInteractorMockRecorder) GetSearchActiveJobSeekerListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchActiveJobSeekerListByAgentID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetSearchActiveJobSeekerListByAgentID), input)
}

// GetSearchAllianceJobSeekerListByAgentID mocks base method.
func (m *MockJobSeekerInteractor) GetSearchAllianceJobSeekerListByAgentID(input interactor.GetSearchAllianceJobSeekerListByAgentIDInput) (interactor.GetSearchAllianceJobSeekerListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchAllianceJobSeekerListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetSearchAllianceJobSeekerListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchAllianceJobSeekerListByAgentID indicates an expected call of GetSearchAllianceJobSeekerListByAgentID.
func (mr *MockJobSeekerInteractorMockRecorder) GetSearchAllianceJobSeekerListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchAllianceJobSeekerListByAgentID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetSearchAllianceJobSeekerListByAgentID), input)
}

// GetSearchJobSeekerListByAgentID mocks base method.
func (m *MockJobSeekerInteractor) GetSearchJobSeekerListByAgentID(input interactor.GetSearchJobSeekerListByAgentIDInput) (interactor.GetSearchJobSeekerListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchJobSeekerListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetSearchJobSeekerListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchJobSeekerListByAgentID indicates an expected call of GetSearchJobSeekerListByAgentID.
func (mr *MockJobSeekerInteractorMockRecorder) GetSearchJobSeekerListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchJobSeekerListByAgentID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetSearchJobSeekerListByAgentID), input)
}

// GetSearchJobSeekerListByAgentIDAndType mocks base method.
func (m *MockJobSeekerInteractor) GetSearchJobSeekerListByAgentIDAndType(input interactor.GetSearchJobSeekerListByAgentIDAndTypeInput) (interactor.GetSearchJobSeekerListByAgentIDAndTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchJobSeekerListByAgentIDAndType", input)
	ret0, _ := ret[0].(interactor.GetSearchJobSeekerListByAgentIDAndTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchJobSeekerListByAgentIDAndType indicates an expected call of GetSearchJobSeekerListByAgentIDAndType.
func (mr *MockJobSeekerInteractorMockRecorder) GetSearchJobSeekerListByAgentIDAndType(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchJobSeekerListByAgentIDAndType", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetSearchJobSeekerListByAgentIDAndType), input)
}

// GetSearchPublicJobSeekerListByAgentIDAndPage mocks base method.
func (m *MockJobSeekerInteractor) GetSearchPublicJobSeekerListByAgentIDAndPage(input interactor.GetSearchPublicJobSeekerListByAgentIDAndPageInput) (interactor.GetSearchPublicJobSeekerListByAgentIDAndPageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchPublicJobSeekerListByAgentIDAndPage", input)
	ret0, _ := ret[0].(interactor.GetSearchPublicJobSeekerListByAgentIDAndPageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchPublicJobSeekerListByAgentIDAndPage indicates an expected call of GetSearchPublicJobSeekerListByAgentIDAndPage.
func (mr *MockJobSeekerInteractorMockRecorder) GetSearchPublicJobSeekerListByAgentIDAndPage(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchPublicJobSeekerListByAgentIDAndPage", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetSearchPublicJobSeekerListByAgentIDAndPage), input)
}

// GetSelectListForCreateOrUpdateJobSeekerByAgentID mocks base method.
func (m *MockJobSeekerInteractor) GetSelectListForCreateOrUpdateJobSeekerByAgentID(input interactor.GetSelectListForCreateOrUpdateJobSeekerByAgentIDInput) (interactor.GetSelectListForCreateOrUpdateJobSeekerByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectListForCreateOrUpdateJobSeekerByAgentID", input)
	ret0, _ := ret[0].(interactor.GetSelectListForCreateOrUpdateJobSeekerByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelectListForCreateOrUpdateJobSeekerByAgentID indicates an expected call of GetSelectListForCreateOrUpdateJobSeekerByAgentID.
func (mr *MockJobSeekerInteractorMockRecorder) GetSelectListForCreateOrUpdateJobSeekerByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectListForCreateOrUpdateJobSeekerByAgentID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).GetSelectListForCreateOrUpdateJobSeekerByAgentID), input)
}

// ImportJobSeekerCSV mocks base method.
func (m *MockJobSeekerInteractor) ImportJobSeekerCSV(input interactor.ImportJobSeekerCSVInput) (interactor.ImportJobSeekerCSVOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportJobSeekerCSV", input)
	ret0, _ := ret[0].(interactor.ImportJobSeekerCSVOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportJobSeekerCSV indicates an expected call of ImportJobSeekerCSV.
func (mr *MockJobSeekerInteractorMockRecorder) ImportJobSeekerCSV(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportJobSeekerCSV", reflect.TypeOf((*MockJobSeekerInteractor)(nil).ImportJobSeekerCSV), input)
}

// ResetPasswordForLP mocks base method.
func (m *MockJobSeekerInteractor) ResetPasswordForLP(input interactor.ResetPasswordForLPInput) (interactor.ResetPasswordForLPOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordForLP", input)
	ret0, _ := ret[0].(interactor.ResetPasswordForLPOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPasswordForLP indicates an expected call of ResetPasswordForLP.
func (mr *MockJobSeekerInteractorMockRecorder) ResetPasswordForLP(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordForLP", reflect.TypeOf((*MockJobSeekerInteractor)(nil).ResetPasswordForLP), input)
}

// SendJobSeekerContact mocks base method.
func (m *MockJobSeekerInteractor) SendJobSeekerContact(input interactor.SendJobSeekerContactInput) (interactor.SendJobSeekerContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendJobSeekerContact", input)
	ret0, _ := ret[0].(interactor.SendJobSeekerContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendJobSeekerContact indicates an expected call of SendJobSeekerContact.
func (mr *MockJobSeekerInteractorMockRecorder) SendJobSeekerContact(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendJobSeekerContact", reflect.TypeOf((*MockJobSeekerInteractor)(nil).SendJobSeekerContact), input)
}

// SendJobSeekerResetPasswordEmail mocks base method.
func (m *MockJobSeekerInteractor) SendJobSeekerResetPasswordEmail(input interactor.SendJobSeekerResetPasswordEmailInput) (interactor.SendJobSeekerResetPasswordEmailOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendJobSeekerResetPasswordEmail", input)
	ret0, _ := ret[0].(interactor.SendJobSeekerResetPasswordEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendJobSeekerResetPasswordEmail indicates an expected call of SendJobSeekerResetPasswordEmail.
func (mr *MockJobSeekerInteractorMockRecorder) SendJobSeekerResetPasswordEmail(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendJobSeekerResetPasswordEmail", reflect.TypeOf((*MockJobSeekerInteractor)(nil).SendJobSeekerResetPasswordEmail), input)
}

// SendJobSeekerResetPasswordEmailForLP mocks base method.
func (m *MockJobSeekerInteractor) SendJobSeekerResetPasswordEmailForLP(input interactor.SendJobSeekerResetPasswordEmailForLPInput) (interactor.SendJobSeekerResetPasswordEmailForLPOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendJobSeekerResetPasswordEmailForLP", input)
	ret0, _ := ret[0].(interactor.SendJobSeekerResetPasswordEmailForLPOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendJobSeekerResetPasswordEmailForLP indicates an expected call of SendJobSeekerResetPasswordEmailForLP.
func (mr *MockJobSeekerInteractorMockRecorder) SendJobSeekerResetPasswordEmailForLP(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendJobSeekerResetPasswordEmailForLP", reflect.TypeOf((*MockJobSeekerInteractor)(nil).SendJobSeekerResetPasswordEmailForLP), input)
}

// SendLPContact mocks base method.
func (m *MockJobSeekerInteractor) SendLPContact(input interactor.SendLPContactInput) (interactor.SendLPContactOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLPContact", input)
	ret0, _ := ret[0].(interactor.SendLPContactOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendLPContact indicates an expected call of SendLPContact.
func (mr *MockJobSeekerInteractorMockRecorder) SendLPContact(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLPContact", reflect.TypeOf((*MockJobSeekerInteractor)(nil).SendLPContact), input)
}

// UpdateActivityMemoByJobSeekerID mocks base method.
func (m *MockJobSeekerInteractor) UpdateActivityMemoByJobSeekerID(input interactor.UpdateActivityMemoByJobSeekerIDInput) (interactor.UpdateActivityMemoByJobSeekerIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActivityMemoByJobSeekerID", input)
	ret0, _ := ret[0].(interactor.UpdateActivityMemoByJobSeekerIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActivityMemoByJobSeekerID indicates an expected call of UpdateActivityMemoByJobSeekerID.
func (mr *MockJobSeekerInteractorMockRecorder) UpdateActivityMemoByJobSeekerID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActivityMemoByJobSeekerID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).UpdateActivityMemoByJobSeekerID), input)
}

// UpdateCanViewMatchingJob mocks base method.
func (m *MockJobSeekerInteractor) UpdateCanViewMatchingJob(input interactor.UpdateCanViewMatchingJobInput) (interactor.UpdateCanViewMatchingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCanViewMatchingJob", input)
	ret0, _ := ret[0].(interactor.UpdateCanViewMatchingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCanViewMatchingJob indicates an expected call of UpdateCanViewMatchingJob.
func (mr *MockJobSeekerInteractorMockRecorder) UpdateCanViewMatchingJob(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCanViewMatchingJob", reflect.TypeOf((*MockJobSeekerInteractor)(nil).UpdateCanViewMatchingJob), input)
}

// UpdateInterviewDateByJobSeekerID mocks base method.
func (m *MockJobSeekerInteractor) UpdateInterviewDateByJobSeekerID(input interactor.UpdateInterviewDateByJobSeekerIDInput) (interactor.UpdateInterviewDateByJobSeekerIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInterviewDateByJobSeekerID", input)
	ret0, _ := ret[0].(interactor.UpdateInterviewDateByJobSeekerIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInterviewDateByJobSeekerID indicates an expected call of UpdateInterviewDateByJobSeekerID.
func (mr *MockJobSeekerInteractorMockRecorder) UpdateInterviewDateByJobSeekerID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInterviewDateByJobSeekerID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).UpdateInterviewDateByJobSeekerID), input)
}

// UpdateJobSeeker mocks base method.
func (m *MockJobSeekerInteractor) UpdateJobSeeker(input interactor.UpdateJobSeekerInput) (interactor.UpdateJobSeekerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobSeeker", input)
	ret0, _ := ret[0].(interactor.UpdateJobSeekerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobSeeker indicates an expected call of UpdateJobSeeker.
func (mr *MockJobSeekerInteractorMockRecorder) UpdateJobSeeker(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobSeeker", reflect.TypeOf((*MockJobSeekerInteractor)(nil).UpdateJobSeeker), input)
}

// UpdateJobSeekerDesiredFromLP mocks base method.
func (m *MockJobSeekerInteractor) UpdateJobSeekerDesiredFromLP(input interactor.UpdateJobSeekerDesiredFromLPInput) (interactor.UpdateJobSeekerDesiredFromLPOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobSeekerDesiredFromLP", input)
	ret0, _ := ret[0].(interactor.UpdateJobSeekerDesiredFromLPOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobSeekerDesiredFromLP indicates an expected call of UpdateJobSeekerDesiredFromLP.
func (mr *MockJobSeekerInteractorMockRecorder) UpdateJobSeekerDesiredFromLP(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobSeekerDesiredFromLP", reflect.TypeOf((*MockJobSeekerInteractor)(nil).UpdateJobSeekerDesiredFromLP), input)
}

// UpdateJobSeekerDocument mocks base method.
func (m *MockJobSeekerInteractor) UpdateJobSeekerDocument(input interactor.UpdateJobSeekerDocumentInput) (interactor.UpdateJobSeekerDocumentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobSeekerDocument", input)
	ret0, _ := ret[0].(interactor.UpdateJobSeekerDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobSeekerDocument indicates an expected call of UpdateJobSeekerDocument.
func (mr *MockJobSeekerInteractorMockRecorder) UpdateJobSeekerDocument(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobSeekerDocument", reflect.TypeOf((*MockJobSeekerInteractor)(nil).UpdateJobSeekerDocument), input)
}

// UpdateJobSeekerDocumentForTask mocks base method.
func (m *MockJobSeekerInteractor) UpdateJobSeekerDocumentForTask(input interactor.UpdateJobSeekerDocumentForTaskInput) (interactor.UpdateJobSeekerDocumentForTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobSeekerDocumentForTask", input)
	ret0, _ := ret[0].(interactor.UpdateJobSeekerDocumentForTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobSeekerDocumentForTask indicates an expected call of UpdateJobSeekerDocumentForTask.
func (mr *MockJobSeekerInteractorMockRecorder) UpdateJobSeekerDocumentForTask(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobSeekerDocumentForTask", reflect.TypeOf((*MockJobSeekerInteractor)(nil).UpdateJobSeekerDocumentForTask), input)
}

// UpdateJobSeekerLineID mocks base method.
func (m *MockJobSeekerInteractor) UpdateJobSeekerLineID(input interactor.UpdateJobSeekerLineIDInput) (interactor.UpdateJobSeekerLineIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobSeekerLineID", input)
	ret0, _ := ret[0].(interactor.UpdateJobSeekerLineIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobSeekerLineID indicates an expected call of UpdateJobSeekerLineID.
func (mr *MockJobSeekerInteractorMockRecorder) UpdateJobSeekerLineID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobSeekerLineID", reflect.TypeOf((*MockJobSeekerInteractor)(nil).UpdateJobSeekerLineID), input)
}

// UpdateJobSeekerPassword mocks base method.
func (m *MockJobSeekerInteractor) UpdateJobSeekerPassword(input interactor.UpdateJobSeekerPasswordInput) (interactor.UpdateJobSeekerPasswordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobSeekerPassword", input)
	ret0, _ := ret[0].(interactor.UpdateJobSeekerPasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobSeekerPassword indicates an expected call of UpdateJobSeekerPassword.
func (mr *MockJobSeekerInteractorMockRecorder) UpdateJobSeekerPassword(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobSeekerPassword", reflect.TypeOf((*MockJobSeekerInteractor)(nil).UpdateJobSeekerPassword), input)
}

// UpdateJobSeekerPhoneFromLP mocks base method.
func (m *MockJobSeekerInteractor) UpdateJobSeekerPhoneFromLP(input interactor.UpdateJobSeekerPhoneFromLPInput) (interactor.UpdateJobSeekerPhoneFromLPOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobSeekerPhoneFromLP", input)
	ret0, _ := ret[0].(interactor.UpdateJobSeekerPhoneFromLPOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobSeekerPhoneFromLP indicates an expected call of UpdateJobSeekerPhoneFromLP.
func (mr *MockJobSeekerInteractorMockRecorder) UpdateJobSeekerPhoneFromLP(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobSeekerPhoneFromLP", reflect.TypeOf((*MockJobSeekerInteractor)(nil).UpdateJobSeekerPhoneFromLP), input)
}
