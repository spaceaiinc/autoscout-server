// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/sending_billing_address.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/sending_billing_address.go -destination ./mock/mock_interactor/mock_sending_billing_address.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockSendingBillingAddressInteractor is a mock of SendingBillingAddressInteractor interface.
type MockSendingBillingAddressInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockSendingBillingAddressInteractorMockRecorder
}

// MockSendingBillingAddressInteractorMockRecorder is the mock recorder for MockSendingBillingAddressInteractor.
type MockSendingBillingAddressInteractorMockRecorder struct {
	mock *MockSendingBillingAddressInteractor
}

// NewMockSendingBillingAddressInteractor creates a new mock instance.
func NewMockSendingBillingAddressInteractor(ctrl *gomock.Controller) *MockSendingBillingAddressInteractor {
	mock := &MockSendingBillingAddressInteractor{ctrl: ctrl}
	mock.recorder = &MockSendingBillingAddressInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingBillingAddressInteractor) EXPECT() *MockSendingBillingAddressInteractorMockRecorder {
	return m.recorder
}

// GetAllSendingBillingAddress mocks base method.
func (m *MockSendingBillingAddressInteractor) GetAllSendingBillingAddress() (interactor.GetAllSendingBillingAddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSendingBillingAddress")
	ret0, _ := ret[0].(interactor.GetAllSendingBillingAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSendingBillingAddress indicates an expected call of GetAllSendingBillingAddress.
func (mr *MockSendingBillingAddressInteractorMockRecorder) GetAllSendingBillingAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSendingBillingAddress", reflect.TypeOf((*MockSendingBillingAddressInteractor)(nil).GetAllSendingBillingAddress))
}

// GetSendingBillingAddressByID mocks base method.
func (m *MockSendingBillingAddressInteractor) GetSendingBillingAddressByID(input interactor.GetSendingBillingAddressByIDInput) (interactor.GetSendingBillingAddressByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingBillingAddressByID", input)
	ret0, _ := ret[0].(interactor.GetSendingBillingAddressByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingBillingAddressByID indicates an expected call of GetSendingBillingAddressByID.
func (mr *MockSendingBillingAddressInteractorMockRecorder) GetSendingBillingAddressByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingBillingAddressByID", reflect.TypeOf((*MockSendingBillingAddressInteractor)(nil).GetSendingBillingAddressByID), input)
}

// GetSendingBillingAddressBySendingEnterpriseID mocks base method.
func (m *MockSendingBillingAddressInteractor) GetSendingBillingAddressBySendingEnterpriseID(input interactor.GetSendingBillingAddressBySendingEnterpriseIDInput) (interactor.GetSendingBillingAddressBySendingEnterpriseIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingBillingAddressBySendingEnterpriseID", input)
	ret0, _ := ret[0].(interactor.GetSendingBillingAddressBySendingEnterpriseIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingBillingAddressBySendingEnterpriseID indicates an expected call of GetSendingBillingAddressBySendingEnterpriseID.
func (mr *MockSendingBillingAddressInteractorMockRecorder) GetSendingBillingAddressBySendingEnterpriseID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingBillingAddressBySendingEnterpriseID", reflect.TypeOf((*MockSendingBillingAddressInteractor)(nil).GetSendingBillingAddressBySendingEnterpriseID), input)
}

// GetSendingBillingAddressListBySendingEnterpriseIDList mocks base method.
func (m *MockSendingBillingAddressInteractor) GetSendingBillingAddressListBySendingEnterpriseIDList(input interactor.GetSendingBillingAddressListBySendingEnterpriseIDListInput) (interactor.GetSendingBillingAddressListBySendingEnterpriseIDListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingBillingAddressListBySendingEnterpriseIDList", input)
	ret0, _ := ret[0].(interactor.GetSendingBillingAddressListBySendingEnterpriseIDListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingBillingAddressListBySendingEnterpriseIDList indicates an expected call of GetSendingBillingAddressListBySendingEnterpriseIDList.
func (mr *MockSendingBillingAddressInteractorMockRecorder) GetSendingBillingAddressListBySendingEnterpriseIDList(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingBillingAddressListBySendingEnterpriseIDList", reflect.TypeOf((*MockSendingBillingAddressInteractor)(nil).GetSendingBillingAddressListBySendingEnterpriseIDList), input)
}

// UpdateSendingBillingAddress mocks base method.
func (m *MockSendingBillingAddressInteractor) UpdateSendingBillingAddress(input interactor.UpdateSendingBillingAddressInput) (interactor.UpdateSendingBillingAddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSendingBillingAddress", input)
	ret0, _ := ret[0].(interactor.UpdateSendingBillingAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSendingBillingAddress indicates an expected call of UpdateSendingBillingAddress.
func (mr *MockSendingBillingAddressInteractorMockRecorder) UpdateSendingBillingAddress(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendingBillingAddress", reflect.TypeOf((*MockSendingBillingAddressInteractor)(nil).UpdateSendingBillingAddress), input)
}
