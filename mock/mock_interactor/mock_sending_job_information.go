// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/sending_job_information.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/sending_job_information.go -destination ./mock/mock_interactor/mock_sending_job_information.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockSendingJobInformationInteractor is a mock of SendingJobInformationInteractor interface.
type MockSendingJobInformationInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockSendingJobInformationInteractorMockRecorder
}

// MockSendingJobInformationInteractorMockRecorder is the mock recorder for MockSendingJobInformationInteractor.
type MockSendingJobInformationInteractorMockRecorder struct {
	mock *MockSendingJobInformationInteractor
}

// NewMockSendingJobInformationInteractor creates a new mock instance.
func NewMockSendingJobInformationInteractor(ctrl *gomock.Controller) *MockSendingJobInformationInteractor {
	mock := &MockSendingJobInformationInteractor{ctrl: ctrl}
	mock.recorder = &MockSendingJobInformationInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingJobInformationInteractor) EXPECT() *MockSendingJobInformationInteractorMockRecorder {
	return m.recorder
}

// CreateSendingJobInformation mocks base method.
func (m *MockSendingJobInformationInteractor) CreateSendingJobInformation(input interactor.CreateSendingJobInformationInput) (interactor.CreateSendingJobInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSendingJobInformation", input)
	ret0, _ := ret[0].(interactor.CreateSendingJobInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSendingJobInformation indicates an expected call of CreateSendingJobInformation.
func (mr *MockSendingJobInformationInteractorMockRecorder) CreateSendingJobInformation(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSendingJobInformation", reflect.TypeOf((*MockSendingJobInformationInteractor)(nil).CreateSendingJobInformation), input)
}

// DeleteSendingJobInformation mocks base method.
func (m *MockSendingJobInformationInteractor) DeleteSendingJobInformation(input interactor.DeleteSendingJobInformationInput) (interactor.DeleteSendingJobInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSendingJobInformation", input)
	ret0, _ := ret[0].(interactor.DeleteSendingJobInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSendingJobInformation indicates an expected call of DeleteSendingJobInformation.
func (mr *MockSendingJobInformationInteractorMockRecorder) DeleteSendingJobInformation(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSendingJobInformation", reflect.TypeOf((*MockSendingJobInformationInteractor)(nil).DeleteSendingJobInformation), input)
}

// GetJobListingBySendingJobInformationUUID mocks base method.
func (m *MockSendingJobInformationInteractor) GetJobListingBySendingJobInformationUUID(input interactor.GetJobListingBySendingJobInformationUUIDInput) (interactor.GetJobListingBySendingJobInformationUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobListingBySendingJobInformationUUID", input)
	ret0, _ := ret[0].(interactor.GetJobListingBySendingJobInformationUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobListingBySendingJobInformationUUID indicates an expected call of GetJobListingBySendingJobInformationUUID.
func (mr *MockSendingJobInformationInteractorMockRecorder) GetJobListingBySendingJobInformationUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobListingBySendingJobInformationUUID", reflect.TypeOf((*MockSendingJobInformationInteractor)(nil).GetJobListingBySendingJobInformationUUID), input)
}

// GetSendingEnterpriseListAndJobInfoPageListByHaveNotSentYet mocks base method.
func (m *MockSendingJobInformationInteractor) GetSendingEnterpriseListAndJobInfoPageListByHaveNotSentYet(arg0 interactor.GetSendingEnterpriseListAndJobInfoPageListByHaveNotSentYetInput) (interactor.GetSendingEnterpriseListAndJobInfoPageListByHaveNotSentYetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingEnterpriseListAndJobInfoPageListByHaveNotSentYet", arg0)
	ret0, _ := ret[0].(interactor.GetSendingEnterpriseListAndJobInfoPageListByHaveNotSentYetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingEnterpriseListAndJobInfoPageListByHaveNotSentYet indicates an expected call of GetSendingEnterpriseListAndJobInfoPageListByHaveNotSentYet.
func (mr *MockSendingJobInformationInteractorMockRecorder) GetSendingEnterpriseListAndJobInfoPageListByHaveNotSentYet(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingEnterpriseListAndJobInfoPageListByHaveNotSentYet", reflect.TypeOf((*MockSendingJobInformationInteractor)(nil).GetSendingEnterpriseListAndJobInfoPageListByHaveNotSentYet), arg0)
}

// GetSendingEnterpriseListAndJobInfoPageSearchListByHaveNotSentYet mocks base method.
func (m *MockSendingJobInformationInteractor) GetSendingEnterpriseListAndJobInfoPageSearchListByHaveNotSentYet(arg0 interactor.GetSendingEnterpriseListAndJobInfoPageSearchListByHaveNotSentYetInput) (interactor.GetSendingEnterpriseListAndJobInfoPageSearchListByHaveNotSentYetOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingEnterpriseListAndJobInfoPageSearchListByHaveNotSentYet", arg0)
	ret0, _ := ret[0].(interactor.GetSendingEnterpriseListAndJobInfoPageSearchListByHaveNotSentYetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingEnterpriseListAndJobInfoPageSearchListByHaveNotSentYet indicates an expected call of GetSendingEnterpriseListAndJobInfoPageSearchListByHaveNotSentYet.
func (mr *MockSendingJobInformationInteractorMockRecorder) GetSendingEnterpriseListAndJobInfoPageSearchListByHaveNotSentYet(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingEnterpriseListAndJobInfoPageSearchListByHaveNotSentYet", reflect.TypeOf((*MockSendingJobInformationInteractor)(nil).GetSendingEnterpriseListAndJobInfoPageSearchListByHaveNotSentYet), arg0)
}

// GetSendingJobInformationByID mocks base method.
func (m *MockSendingJobInformationInteractor) GetSendingJobInformationByID(input interactor.GetSendingJobInformationByIDInput) (interactor.GetSendingJobInformationByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingJobInformationByID", input)
	ret0, _ := ret[0].(interactor.GetSendingJobInformationByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingJobInformationByID indicates an expected call of GetSendingJobInformationByID.
func (mr *MockSendingJobInformationInteractorMockRecorder) GetSendingJobInformationByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingJobInformationByID", reflect.TypeOf((*MockSendingJobInformationInteractor)(nil).GetSendingJobInformationByID), input)
}

// GetSendingJobInformationByUUID mocks base method.
func (m *MockSendingJobInformationInteractor) GetSendingJobInformationByUUID(input interactor.GetSendingJobInformationByUUIDInput) (interactor.GetSendingJobInformationByUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingJobInformationByUUID", input)
	ret0, _ := ret[0].(interactor.GetSendingJobInformationByUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingJobInformationByUUID indicates an expected call of GetSendingJobInformationByUUID.
func (mr *MockSendingJobInformationInteractorMockRecorder) GetSendingJobInformationByUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingJobInformationByUUID", reflect.TypeOf((*MockSendingJobInformationInteractor)(nil).GetSendingJobInformationByUUID), input)
}

// GetSendingJobInformationListBySendingEnterpriseID mocks base method.
func (m *MockSendingJobInformationInteractor) GetSendingJobInformationListBySendingEnterpriseID(input interactor.GetSendingJobInformationListBySendingEnterpriseIDInput) (interactor.GetSendingJobInformationListBySendingEnterpriseIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingJobInformationListBySendingEnterpriseID", input)
	ret0, _ := ret[0].(interactor.GetSendingJobInformationListBySendingEnterpriseIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingJobInformationListBySendingEnterpriseID indicates an expected call of GetSendingJobInformationListBySendingEnterpriseID.
func (mr *MockSendingJobInformationInteractorMockRecorder) GetSendingJobInformationListBySendingEnterpriseID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingJobInformationListBySendingEnterpriseID", reflect.TypeOf((*MockSendingJobInformationInteractor)(nil).GetSendingJobInformationListBySendingEnterpriseID), input)
}

// ImportSendingJobInformationCSV mocks base method.
func (m *MockSendingJobInformationInteractor) ImportSendingJobInformationCSV(input interactor.ImportSendingJobInformationCSVInput) (interactor.ImportSendingJobInformationCSVOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportSendingJobInformationCSV", input)
	ret0, _ := ret[0].(interactor.ImportSendingJobInformationCSVOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportSendingJobInformationCSV indicates an expected call of ImportSendingJobInformationCSV.
func (mr *MockSendingJobInformationInteractorMockRecorder) ImportSendingJobInformationCSV(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSendingJobInformationCSV", reflect.TypeOf((*MockSendingJobInformationInteractor)(nil).ImportSendingJobInformationCSV), input)
}

// UpdateSendingJobInformation mocks base method.
func (m *MockSendingJobInformationInteractor) UpdateSendingJobInformation(input interactor.UpdateSendingJobInformationInput) (interactor.UpdateSendingJobInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSendingJobInformation", input)
	ret0, _ := ret[0].(interactor.UpdateSendingJobInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSendingJobInformation indicates an expected call of UpdateSendingJobInformation.
func (mr *MockSendingJobInformationInteractorMockRecorder) UpdateSendingJobInformation(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendingJobInformation", reflect.TypeOf((*MockSendingJobInformationInteractor)(nil).UpdateSendingJobInformation), input)
}
