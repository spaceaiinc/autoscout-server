// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/email_with_sending_job_seeker.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/email_with_sending_job_seeker.go -destination ./mock/mock_interactor/mock_email_with_sending_job_seeker.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockEmailWithSendingJobSeekerInteractor is a mock of EmailWithSendingJobSeekerInteractor interface.
type MockEmailWithSendingJobSeekerInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockEmailWithSendingJobSeekerInteractorMockRecorder
}

// MockEmailWithSendingJobSeekerInteractorMockRecorder is the mock recorder for MockEmailWithSendingJobSeekerInteractor.
type MockEmailWithSendingJobSeekerInteractorMockRecorder struct {
	mock *MockEmailWithSendingJobSeekerInteractor
}

// NewMockEmailWithSendingJobSeekerInteractor creates a new mock instance.
func NewMockEmailWithSendingJobSeekerInteractor(ctrl *gomock.Controller) *MockEmailWithSendingJobSeekerInteractor {
	mock := &MockEmailWithSendingJobSeekerInteractor{ctrl: ctrl}
	mock.recorder = &MockEmailWithSendingJobSeekerInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailWithSendingJobSeekerInteractor) EXPECT() *MockEmailWithSendingJobSeekerInteractorMockRecorder {
	return m.recorder
}

// GetEmailWithSendingJobSeekerListBySendingJobSeekerID mocks base method.
func (m *MockEmailWithSendingJobSeekerInteractor) GetEmailWithSendingJobSeekerListBySendingJobSeekerID(input interactor.GetEmailWithSendingJobSeekerListBySendingJobSeekerIDInput) (interactor.GetEmailWithSendingJobSeekerListBySendingJobSeekerIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailWithSendingJobSeekerListBySendingJobSeekerID", input)
	ret0, _ := ret[0].(interactor.GetEmailWithSendingJobSeekerListBySendingJobSeekerIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailWithSendingJobSeekerListBySendingJobSeekerID indicates an expected call of GetEmailWithSendingJobSeekerListBySendingJobSeekerID.
func (mr *MockEmailWithSendingJobSeekerInteractorMockRecorder) GetEmailWithSendingJobSeekerListBySendingJobSeekerID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailWithSendingJobSeekerListBySendingJobSeekerID", reflect.TypeOf((*MockEmailWithSendingJobSeekerInteractor)(nil).GetEmailWithSendingJobSeekerListBySendingJobSeekerID), input)
}

// SendEmailWithSendingJobSeeker mocks base method.
func (m *MockEmailWithSendingJobSeekerInteractor) SendEmailWithSendingJobSeeker(input interactor.SendEmailWithSendingJobSeekerInput) (interactor.SendEmailWithSendingJobSeekerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailWithSendingJobSeeker", input)
	ret0, _ := ret[0].(interactor.SendEmailWithSendingJobSeekerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmailWithSendingJobSeeker indicates an expected call of SendEmailWithSendingJobSeeker.
func (mr *MockEmailWithSendingJobSeekerInteractorMockRecorder) SendEmailWithSendingJobSeeker(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailWithSendingJobSeeker", reflect.TypeOf((*MockEmailWithSendingJobSeekerInteractor)(nil).SendEmailWithSendingJobSeeker), input)
}
