// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/chat_group_with_sending_job_seeker.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/chat_group_with_sending_job_seeker.go -destination ./mock/mock_interactor/mock_chat_group_with_sending_job_seeker.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockChatGroupWithSendingJobSeekerInteractor is a mock of ChatGroupWithSendingJobSeekerInteractor interface.
type MockChatGroupWithSendingJobSeekerInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockChatGroupWithSendingJobSeekerInteractorMockRecorder
}

// MockChatGroupWithSendingJobSeekerInteractorMockRecorder is the mock recorder for MockChatGroupWithSendingJobSeekerInteractor.
type MockChatGroupWithSendingJobSeekerInteractorMockRecorder struct {
	mock *MockChatGroupWithSendingJobSeekerInteractor
}

// NewMockChatGroupWithSendingJobSeekerInteractor creates a new mock instance.
func NewMockChatGroupWithSendingJobSeekerInteractor(ctrl *gomock.Controller) *MockChatGroupWithSendingJobSeekerInteractor {
	mock := &MockChatGroupWithSendingJobSeekerInteractor{ctrl: ctrl}
	mock.recorder = &MockChatGroupWithSendingJobSeekerInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatGroupWithSendingJobSeekerInteractor) EXPECT() *MockChatGroupWithSendingJobSeekerInteractorMockRecorder {
	return m.recorder
}

// CreateChatGroupWithSendingJobSeeker mocks base method.
func (m *MockChatGroupWithSendingJobSeekerInteractor) CreateChatGroupWithSendingJobSeeker(input interactor.CreateChatGroupWithSendingJobSeekerInput) (interactor.CreateChatGroupWithSendingJobSeekerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatGroupWithSendingJobSeeker", input)
	ret0, _ := ret[0].(interactor.CreateChatGroupWithSendingJobSeekerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatGroupWithSendingJobSeeker indicates an expected call of CreateChatGroupWithSendingJobSeeker.
func (mr *MockChatGroupWithSendingJobSeekerInteractorMockRecorder) CreateChatGroupWithSendingJobSeeker(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatGroupWithSendingJobSeeker", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerInteractor)(nil).CreateChatGroupWithSendingJobSeeker), input)
}

// GetChatGroupWithSendingJobSeekerByID mocks base method.
func (m *MockChatGroupWithSendingJobSeekerInteractor) GetChatGroupWithSendingJobSeekerByID(input interactor.GetChatGroupWithSendingJobSeekerByIDInput) (interactor.GetChatGroupWithSendingJobSeekerByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatGroupWithSendingJobSeekerByID", input)
	ret0, _ := ret[0].(interactor.GetChatGroupWithSendingJobSeekerByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatGroupWithSendingJobSeekerByID indicates an expected call of GetChatGroupWithSendingJobSeekerByID.
func (mr *MockChatGroupWithSendingJobSeekerInteractorMockRecorder) GetChatGroupWithSendingJobSeekerByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatGroupWithSendingJobSeekerByID", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerInteractor)(nil).GetChatGroupWithSendingJobSeekerByID), input)
}

// GetChatGroupWithSendingJobSeekerSearchListAndPageByAgentID mocks base method.
func (m *MockChatGroupWithSendingJobSeekerInteractor) GetChatGroupWithSendingJobSeekerSearchListAndPageByAgentID(input interactor.GetChatGroupWithSendingJobSeekerSearchListAndPageByAgentIDInput) (interactor.GetChatGroupWithSendingJobSeekerSearchListAndPageByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatGroupWithSendingJobSeekerSearchListAndPageByAgentID", input)
	ret0, _ := ret[0].(interactor.GetChatGroupWithSendingJobSeekerSearchListAndPageByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatGroupWithSendingJobSeekerSearchListAndPageByAgentID indicates an expected call of GetChatGroupWithSendingJobSeekerSearchListAndPageByAgentID.
func (mr *MockChatGroupWithSendingJobSeekerInteractorMockRecorder) GetChatGroupWithSendingJobSeekerSearchListAndPageByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatGroupWithSendingJobSeekerSearchListAndPageByAgentID", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerInteractor)(nil).GetChatGroupWithSendingJobSeekerSearchListAndPageByAgentID), input)
}

// GetSendingJobSeekerChatNotificationByAgentID mocks base method.
func (m *MockChatGroupWithSendingJobSeekerInteractor) GetSendingJobSeekerChatNotificationByAgentID(input interactor.GetSendingJobSeekerChatNotificationByAgentIDInput) (interactor.GetSendingJobSeekerChatNotificationByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingJobSeekerChatNotificationByAgentID", input)
	ret0, _ := ret[0].(interactor.GetSendingJobSeekerChatNotificationByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingJobSeekerChatNotificationByAgentID indicates an expected call of GetSendingJobSeekerChatNotificationByAgentID.
func (mr *MockChatGroupWithSendingJobSeekerInteractorMockRecorder) GetSendingJobSeekerChatNotificationByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingJobSeekerChatNotificationByAgentID", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerInteractor)(nil).GetSendingJobSeekerChatNotificationByAgentID), input)
}

// UpdateSendingJobSeekerAgentLastWatched mocks base method.
func (m *MockChatGroupWithSendingJobSeekerInteractor) UpdateSendingJobSeekerAgentLastWatched(input interactor.UpdateSendingJobSeekerAgentLastWatchedInput) (interactor.UpdateSendingJobSeekerAgentLastWatchedOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSendingJobSeekerAgentLastWatched", input)
	ret0, _ := ret[0].(interactor.UpdateSendingJobSeekerAgentLastWatchedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSendingJobSeekerAgentLastWatched indicates an expected call of UpdateSendingJobSeekerAgentLastWatched.
func (mr *MockChatGroupWithSendingJobSeekerInteractorMockRecorder) UpdateSendingJobSeekerAgentLastWatched(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendingJobSeekerAgentLastWatched", reflect.TypeOf((*MockChatGroupWithSendingJobSeekerInteractor)(nil).UpdateSendingJobSeekerAgentLastWatched), input)
}
