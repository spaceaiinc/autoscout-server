// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/interview_task.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/interview_task.go -destination ./mock/mock_interactor/mock_interview_task.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockInterviewTaskInteractor is a mock of InterviewTaskInteractor interface.
type MockInterviewTaskInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockInterviewTaskInteractorMockRecorder
}

// MockInterviewTaskInteractorMockRecorder is the mock recorder for MockInterviewTaskInteractor.
type MockInterviewTaskInteractorMockRecorder struct {
	mock *MockInterviewTaskInteractor
}

// NewMockInterviewTaskInteractor creates a new mock instance.
func NewMockInterviewTaskInteractor(ctrl *gomock.Controller) *MockInterviewTaskInteractor {
	mock := &MockInterviewTaskInteractor{ctrl: ctrl}
	mock.recorder = &MockInterviewTaskInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterviewTaskInteractor) EXPECT() *MockInterviewTaskInteractorMockRecorder {
	return m.recorder
}

// CreateNextInterviewTask mocks base method.
func (m *MockInterviewTaskInteractor) CreateNextInterviewTask(input interactor.CreateNextInterviewTaskInput) (interactor.CreateNextInterviewTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNextInterviewTask", input)
	ret0, _ := ret[0].(interactor.CreateNextInterviewTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNextInterviewTask indicates an expected call of CreateNextInterviewTask.
func (mr *MockInterviewTaskInteractorMockRecorder) CreateNextInterviewTask(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNextInterviewTask", reflect.TypeOf((*MockInterviewTaskInteractor)(nil).CreateNextInterviewTask), input)
}

// DeleteLatestInterviewTask mocks base method.
func (m *MockInterviewTaskInteractor) DeleteLatestInterviewTask(input interactor.DeleteLatestInterviewTaskInput) (interactor.DeleteLatestInterviewTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLatestInterviewTask", input)
	ret0, _ := ret[0].(interactor.DeleteLatestInterviewTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLatestInterviewTask indicates an expected call of DeleteLatestInterviewTask.
func (mr *MockInterviewTaskInteractorMockRecorder) DeleteLatestInterviewTask(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLatestInterviewTask", reflect.TypeOf((*MockInterviewTaskInteractor)(nil).DeleteLatestInterviewTask), input)
}

// GetInterviewTaskListByGroupID mocks base method.
func (m *MockInterviewTaskInteractor) GetInterviewTaskListByGroupID(input interactor.GetInterviewTaskListByGroupIDInput) (interactor.GetInterviewTaskListByGroupIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterviewTaskListByGroupID", input)
	ret0, _ := ret[0].(interactor.GetInterviewTaskListByGroupIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterviewTaskListByGroupID indicates an expected call of GetInterviewTaskListByGroupID.
func (mr *MockInterviewTaskInteractorMockRecorder) GetInterviewTaskListByGroupID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterviewTaskListByGroupID", reflect.TypeOf((*MockInterviewTaskInteractor)(nil).GetInterviewTaskListByGroupID), input)
}

// GetLatestAdjustmentTaskListByAgentID mocks base method.
func (m *MockInterviewTaskInteractor) GetLatestAdjustmentTaskListByAgentID(input interactor.GetLatestAdjustmentTaskListByAgentIDInput) (interactor.GetLatestAdjustmentTaskListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAdjustmentTaskListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetLatestAdjustmentTaskListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAdjustmentTaskListByAgentID indicates an expected call of GetLatestAdjustmentTaskListByAgentID.
func (mr *MockInterviewTaskInteractorMockRecorder) GetLatestAdjustmentTaskListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAdjustmentTaskListByAgentID", reflect.TypeOf((*MockInterviewTaskInteractor)(nil).GetLatestAdjustmentTaskListByAgentID), input)
}

// GetLatestConfirmationTaskListByAgentID mocks base method.
func (m *MockInterviewTaskInteractor) GetLatestConfirmationTaskListByAgentID(input interactor.GetLatestConfirmationTaskListByAgentIDInput) (interactor.GetLatestConfirmationTaskListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestConfirmationTaskListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetLatestConfirmationTaskListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestConfirmationTaskListByAgentID indicates an expected call of GetLatestConfirmationTaskListByAgentID.
func (mr *MockInterviewTaskInteractorMockRecorder) GetLatestConfirmationTaskListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestConfirmationTaskListByAgentID", reflect.TypeOf((*MockInterviewTaskInteractor)(nil).GetLatestConfirmationTaskListByAgentID), input)
}

// UpdateInterviewTaskCAStaffID mocks base method.
func (m *MockInterviewTaskInteractor) UpdateInterviewTaskCAStaffID(input interactor.UpdateInterviewTaskCAStaffIDInput) (interactor.UpdateInterviewTaskCAStaffIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInterviewTaskCAStaffID", input)
	ret0, _ := ret[0].(interactor.UpdateInterviewTaskCAStaffIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInterviewTaskCAStaffID indicates an expected call of UpdateInterviewTaskCAStaffID.
func (mr *MockInterviewTaskInteractorMockRecorder) UpdateInterviewTaskCAStaffID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInterviewTaskCAStaffID", reflect.TypeOf((*MockInterviewTaskInteractor)(nil).UpdateInterviewTaskCAStaffID), input)
}

// UpdateInterviewTaskGroupLastWatched mocks base method.
func (m *MockInterviewTaskInteractor) UpdateInterviewTaskGroupLastWatched(input interactor.UpdateInterviewTaskGroupLastWatchedInput) (interactor.UpdateInterviewTaskGroupLastWatchedOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInterviewTaskGroupLastWatched", input)
	ret0, _ := ret[0].(interactor.UpdateInterviewTaskGroupLastWatchedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInterviewTaskGroupLastWatched indicates an expected call of UpdateInterviewTaskGroupLastWatched.
func (mr *MockInterviewTaskInteractorMockRecorder) UpdateInterviewTaskGroupLastWatched(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInterviewTaskGroupLastWatched", reflect.TypeOf((*MockInterviewTaskInteractor)(nil).UpdateInterviewTaskGroupLastWatched), input)
}

// UpdateInterviewTaskInterviewDate mocks base method.
func (m *MockInterviewTaskInteractor) UpdateInterviewTaskInterviewDate(input interactor.UpdateInterviewTaskInterviewDateInput) (interactor.UpdateInterviewTaskInterviewDateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInterviewTaskInterviewDate", input)
	ret0, _ := ret[0].(interactor.UpdateInterviewTaskInterviewDateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInterviewTaskInterviewDate indicates an expected call of UpdateInterviewTaskInterviewDate.
func (mr *MockInterviewTaskInteractorMockRecorder) UpdateInterviewTaskInterviewDate(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInterviewTaskInterviewDate", reflect.TypeOf((*MockInterviewTaskInteractor)(nil).UpdateInterviewTaskInterviewDate), input)
}
