// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/admin.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/admin.go -destination ./mock/mock_interactor/mock_admin.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockAdminInteractor is a mock of AdminInteractor interface.
type MockAdminInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockAdminInteractorMockRecorder
}

// MockAdminInteractorMockRecorder is the mock recorder for MockAdminInteractor.
type MockAdminInteractorMockRecorder struct {
	mock *MockAdminInteractor
}

// NewMockAdminInteractor creates a new mock instance.
func NewMockAdminInteractor(ctrl *gomock.Controller) *MockAdminInteractor {
	mock := &MockAdminInteractor{ctrl: ctrl}
	mock.recorder = &MockAdminInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminInteractor) EXPECT() *MockAdminInteractorMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAdminInteractor) Authorize(input interactor.AdminAuthorizeInput) (interactor.AdminAuthorizeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", input)
	ret0, _ := ret[0].(interactor.AdminAuthorizeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAdminInteractorMockRecorder) Authorize(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAdminInteractor)(nil).Authorize), input)
}
