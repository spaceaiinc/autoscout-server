// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/sending_phase.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/sending_phase.go -destination ./mock/mock_interactor/mock_sending_phase.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockSendingPhaseInteractor is a mock of SendingPhaseInteractor interface.
type MockSendingPhaseInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockSendingPhaseInteractorMockRecorder
}

// MockSendingPhaseInteractorMockRecorder is the mock recorder for MockSendingPhaseInteractor.
type MockSendingPhaseInteractorMockRecorder struct {
	mock *MockSendingPhaseInteractor
}

// NewMockSendingPhaseInteractor creates a new mock instance.
func NewMockSendingPhaseInteractor(ctrl *gomock.Controller) *MockSendingPhaseInteractor {
	mock := &MockSendingPhaseInteractor{ctrl: ctrl}
	mock.recorder = &MockSendingPhaseInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingPhaseInteractor) EXPECT() *MockSendingPhaseInteractorMockRecorder {
	return m.recorder
}

// CreateSendingPhaseEndStatus mocks base method.
func (m *MockSendingPhaseInteractor) CreateSendingPhaseEndStatus(input interactor.CreateSendingPhaseEndStatusInput) (interactor.CreateSendingPhaseEndStatusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSendingPhaseEndStatus", input)
	ret0, _ := ret[0].(interactor.CreateSendingPhaseEndStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSendingPhaseEndStatus indicates an expected call of CreateSendingPhaseEndStatus.
func (mr *MockSendingPhaseInteractorMockRecorder) CreateSendingPhaseEndStatus(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSendingPhaseEndStatus", reflect.TypeOf((*MockSendingPhaseInteractor)(nil).CreateSendingPhaseEndStatus), input)
}

// GetSearchSendingPhaseListByPageAndTabAndAgentID mocks base method.
func (m *MockSendingPhaseInteractor) GetSearchSendingPhaseListByPageAndTabAndAgentID(input interactor.GetSearchSendingPhaseListByPageAndTabAndAgentIDInput) (interactor.GetSearchSendingPhaseListByPageAndTabAndAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchSendingPhaseListByPageAndTabAndAgentID", input)
	ret0, _ := ret[0].(interactor.GetSearchSendingPhaseListByPageAndTabAndAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchSendingPhaseListByPageAndTabAndAgentID indicates an expected call of GetSearchSendingPhaseListByPageAndTabAndAgentID.
func (mr *MockSendingPhaseInteractorMockRecorder) GetSearchSendingPhaseListByPageAndTabAndAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchSendingPhaseListByPageAndTabAndAgentID", reflect.TypeOf((*MockSendingPhaseInteractor)(nil).GetSearchSendingPhaseListByPageAndTabAndAgentID), input)
}

// GetSendingPhaseByID mocks base method.
func (m *MockSendingPhaseInteractor) GetSendingPhaseByID(input interactor.GetSendingPhaseByIDInput) (interactor.GetSendingPhaseByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingPhaseByID", input)
	ret0, _ := ret[0].(interactor.GetSendingPhaseByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingPhaseByID indicates an expected call of GetSendingPhaseByID.
func (mr *MockSendingPhaseInteractorMockRecorder) GetSendingPhaseByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingPhaseByID", reflect.TypeOf((*MockSendingPhaseInteractor)(nil).GetSendingPhaseByID), input)
}

// GetSendingPhaseListBySendingJobSeekerID mocks base method.
func (m *MockSendingPhaseInteractor) GetSendingPhaseListBySendingJobSeekerID(input interactor.GetSendingPhaseListBySendingJobSeekerIDInput) (interactor.GetSendingPhaseListBySendingJobSeekerIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingPhaseListBySendingJobSeekerID", input)
	ret0, _ := ret[0].(interactor.GetSendingPhaseListBySendingJobSeekerIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingPhaseListBySendingJobSeekerID indicates an expected call of GetSendingPhaseListBySendingJobSeekerID.
func (mr *MockSendingPhaseInteractorMockRecorder) GetSendingPhaseListBySendingJobSeekerID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingPhaseListBySendingJobSeekerID", reflect.TypeOf((*MockSendingPhaseInteractor)(nil).GetSendingPhaseListBySendingJobSeekerID), input)
}

// UpdateSendingPhaseSendingDate mocks base method.
func (m *MockSendingPhaseInteractor) UpdateSendingPhaseSendingDate(input interactor.UpdateSendingPhaseSendingDateInput) (interactor.UpdateSendingPhaseSendingDateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSendingPhaseSendingDate", input)
	ret0, _ := ret[0].(interactor.UpdateSendingPhaseSendingDateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSendingPhaseSendingDate indicates an expected call of UpdateSendingPhaseSendingDate.
func (mr *MockSendingPhaseInteractorMockRecorder) UpdateSendingPhaseSendingDate(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendingPhaseSendingDate", reflect.TypeOf((*MockSendingPhaseInteractor)(nil).UpdateSendingPhaseSendingDate), input)
}
