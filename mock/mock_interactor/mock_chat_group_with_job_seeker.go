// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/chat_group_with_job_seeker.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/chat_group_with_job_seeker.go -destination ./mock/mock_interactor/mock_chat_group_with_job_seeker.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockChatGroupWithJobSeekerInteractor is a mock of ChatGroupWithJobSeekerInteractor interface.
type MockChatGroupWithJobSeekerInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockChatGroupWithJobSeekerInteractorMockRecorder
}

// MockChatGroupWithJobSeekerInteractorMockRecorder is the mock recorder for MockChatGroupWithJobSeekerInteractor.
type MockChatGroupWithJobSeekerInteractorMockRecorder struct {
	mock *MockChatGroupWithJobSeekerInteractor
}

// NewMockChatGroupWithJobSeekerInteractor creates a new mock instance.
func NewMockChatGroupWithJobSeekerInteractor(ctrl *gomock.Controller) *MockChatGroupWithJobSeekerInteractor {
	mock := &MockChatGroupWithJobSeekerInteractor{ctrl: ctrl}
	mock.recorder = &MockChatGroupWithJobSeekerInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatGroupWithJobSeekerInteractor) EXPECT() *MockChatGroupWithJobSeekerInteractorMockRecorder {
	return m.recorder
}

// CreateChatGroupWithJobSeeker mocks base method.
func (m *MockChatGroupWithJobSeekerInteractor) CreateChatGroupWithJobSeeker(input interactor.CreateChatGroupWithJobSeekerInput) (interactor.CreateChatGroupWithJobSeekerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatGroupWithJobSeeker", input)
	ret0, _ := ret[0].(interactor.CreateChatGroupWithJobSeekerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatGroupWithJobSeeker indicates an expected call of CreateChatGroupWithJobSeeker.
func (mr *MockChatGroupWithJobSeekerInteractorMockRecorder) CreateChatGroupWithJobSeeker(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatGroupWithJobSeeker", reflect.TypeOf((*MockChatGroupWithJobSeekerInteractor)(nil).CreateChatGroupWithJobSeeker), input)
}

// GetChatGroupWithJobSeekerByID mocks base method.
func (m *MockChatGroupWithJobSeekerInteractor) GetChatGroupWithJobSeekerByID(input interactor.GetChatGroupWithJobSeekerByIDInput) (interactor.GetChatGroupWithJobSeekerByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatGroupWithJobSeekerByID", input)
	ret0, _ := ret[0].(interactor.GetChatGroupWithJobSeekerByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatGroupWithJobSeekerByID indicates an expected call of GetChatGroupWithJobSeekerByID.
func (mr *MockChatGroupWithJobSeekerInteractorMockRecorder) GetChatGroupWithJobSeekerByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatGroupWithJobSeekerByID", reflect.TypeOf((*MockChatGroupWithJobSeekerInteractor)(nil).GetChatGroupWithJobSeekerByID), input)
}

// GetChatGroupWithJobSeekerListByAgentID mocks base method.
func (m *MockChatGroupWithJobSeekerInteractor) GetChatGroupWithJobSeekerListByAgentID(input interactor.GetChatGroupWithJobSeekerListByAgentIDInput) (interactor.GetChatGroupWithJobSeekerListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatGroupWithJobSeekerListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetChatGroupWithJobSeekerListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatGroupWithJobSeekerListByAgentID indicates an expected call of GetChatGroupWithJobSeekerListByAgentID.
func (mr *MockChatGroupWithJobSeekerInteractorMockRecorder) GetChatGroupWithJobSeekerListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatGroupWithJobSeekerListByAgentID", reflect.TypeOf((*MockChatGroupWithJobSeekerInteractor)(nil).GetChatGroupWithJobSeekerListByAgentID), input)
}

// GetChatGroupWithJobSeekerSearchListAndPageByAgentID mocks base method.
func (m *MockChatGroupWithJobSeekerInteractor) GetChatGroupWithJobSeekerSearchListAndPageByAgentID(input interactor.GetChatGroupWithJobSeekerSearchListAndPageByAgentIDInput) (interactor.GetChatGroupWithJobSeekerSearchListAndPageByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatGroupWithJobSeekerSearchListAndPageByAgentID", input)
	ret0, _ := ret[0].(interactor.GetChatGroupWithJobSeekerSearchListAndPageByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatGroupWithJobSeekerSearchListAndPageByAgentID indicates an expected call of GetChatGroupWithJobSeekerSearchListAndPageByAgentID.
func (mr *MockChatGroupWithJobSeekerInteractorMockRecorder) GetChatGroupWithJobSeekerSearchListAndPageByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatGroupWithJobSeekerSearchListAndPageByAgentID", reflect.TypeOf((*MockChatGroupWithJobSeekerInteractor)(nil).GetChatGroupWithJobSeekerSearchListAndPageByAgentID), input)
}

// GetJobSeekerChatNotificationByAgentID mocks base method.
func (m *MockChatGroupWithJobSeekerInteractor) GetJobSeekerChatNotificationByAgentID(input interactor.GetJobSeekerChatNotificationByAgentIDInput) (interactor.GetJobSeekerChatNotificationByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerChatNotificationByAgentID", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerChatNotificationByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerChatNotificationByAgentID indicates an expected call of GetJobSeekerChatNotificationByAgentID.
func (mr *MockChatGroupWithJobSeekerInteractorMockRecorder) GetJobSeekerChatNotificationByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerChatNotificationByAgentID", reflect.TypeOf((*MockChatGroupWithJobSeekerInteractor)(nil).GetJobSeekerChatNotificationByAgentID), input)
}

// UpdateAgentLastWatched mocks base method.
func (m *MockChatGroupWithJobSeekerInteractor) UpdateAgentLastWatched(input interactor.UpdateAgentLastWatchedInput) (interactor.UpdateAgentLastWatchedOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentLastWatched", input)
	ret0, _ := ret[0].(interactor.UpdateAgentLastWatchedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentLastWatched indicates an expected call of UpdateAgentLastWatched.
func (mr *MockChatGroupWithJobSeekerInteractorMockRecorder) UpdateAgentLastWatched(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentLastWatched", reflect.TypeOf((*MockChatGroupWithJobSeekerInteractor)(nil).UpdateAgentLastWatched), input)
}
