// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/sending_enterprise.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/sending_enterprise.go -destination ./mock/mock_interactor/mock_sending_enterprise.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockSendingEnterpriseInteractor is a mock of SendingEnterpriseInteractor interface.
type MockSendingEnterpriseInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockSendingEnterpriseInteractorMockRecorder
}

// MockSendingEnterpriseInteractorMockRecorder is the mock recorder for MockSendingEnterpriseInteractor.
type MockSendingEnterpriseInteractorMockRecorder struct {
	mock *MockSendingEnterpriseInteractor
}

// NewMockSendingEnterpriseInteractor creates a new mock instance.
func NewMockSendingEnterpriseInteractor(ctrl *gomock.Controller) *MockSendingEnterpriseInteractor {
	mock := &MockSendingEnterpriseInteractor{ctrl: ctrl}
	mock.recorder = &MockSendingEnterpriseInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendingEnterpriseInteractor) EXPECT() *MockSendingEnterpriseInteractorMockRecorder {
	return m.recorder
}

// CreateSendingEnterprise mocks base method.
func (m *MockSendingEnterpriseInteractor) CreateSendingEnterprise(input interactor.CreateSendingEnterpriseInput) (interactor.CreateSendingEnterpriseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSendingEnterprise", input)
	ret0, _ := ret[0].(interactor.CreateSendingEnterpriseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSendingEnterprise indicates an expected call of CreateSendingEnterprise.
func (mr *MockSendingEnterpriseInteractorMockRecorder) CreateSendingEnterprise(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSendingEnterprise", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).CreateSendingEnterprise), input)
}

// CreateSendingEnterpriseReferenceMaterial mocks base method.
func (m *MockSendingEnterpriseInteractor) CreateSendingEnterpriseReferenceMaterial(input interactor.CreateSendingEnterpriseReferenceMaterialInput) (interactor.CreateSendingEnterpriseReferenceMaterialOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSendingEnterpriseReferenceMaterial", input)
	ret0, _ := ret[0].(interactor.CreateSendingEnterpriseReferenceMaterialOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSendingEnterpriseReferenceMaterial indicates an expected call of CreateSendingEnterpriseReferenceMaterial.
func (mr *MockSendingEnterpriseInteractorMockRecorder) CreateSendingEnterpriseReferenceMaterial(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSendingEnterpriseReferenceMaterial", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).CreateSendingEnterpriseReferenceMaterial), input)
}

// DeleteSendingEnterprise mocks base method.
func (m *MockSendingEnterpriseInteractor) DeleteSendingEnterprise(input interactor.DeleteSendingEnterpriseInput) (interactor.DeleteSendingEnterpriseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSendingEnterprise", input)
	ret0, _ := ret[0].(interactor.DeleteSendingEnterpriseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSendingEnterprise indicates an expected call of DeleteSendingEnterprise.
func (mr *MockSendingEnterpriseInteractorMockRecorder) DeleteSendingEnterprise(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSendingEnterprise", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).DeleteSendingEnterprise), input)
}

// DeleteSendingEnterpriseReferenceMaterial mocks base method.
func (m *MockSendingEnterpriseInteractor) DeleteSendingEnterpriseReferenceMaterial(input interactor.DeleteSendingEnterpriseReferenceMaterialInput) (interactor.DeleteSendingEnterpriseReferenceMaterialOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSendingEnterpriseReferenceMaterial", input)
	ret0, _ := ret[0].(interactor.DeleteSendingEnterpriseReferenceMaterialOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSendingEnterpriseReferenceMaterial indicates an expected call of DeleteSendingEnterpriseReferenceMaterial.
func (mr *MockSendingEnterpriseInteractorMockRecorder) DeleteSendingEnterpriseReferenceMaterial(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSendingEnterpriseReferenceMaterial", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).DeleteSendingEnterpriseReferenceMaterial), input)
}

// GetAllSendingEnterpriseByPageAndFreeWord mocks base method.
func (m *MockSendingEnterpriseInteractor) GetAllSendingEnterpriseByPageAndFreeWord(input interactor.GetAllSendingEnterpriseByPageAndFreeWordInput) (interactor.GetAllSendingEnterpriseByPageAndFreeWordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSendingEnterpriseByPageAndFreeWord", input)
	ret0, _ := ret[0].(interactor.GetAllSendingEnterpriseByPageAndFreeWordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSendingEnterpriseByPageAndFreeWord indicates an expected call of GetAllSendingEnterpriseByPageAndFreeWord.
func (mr *MockSendingEnterpriseInteractorMockRecorder) GetAllSendingEnterpriseByPageAndFreeWord(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSendingEnterpriseByPageAndFreeWord", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).GetAllSendingEnterpriseByPageAndFreeWord), input)
}

// GetSendingEnterpriseAndAcceptJobSeekerListByAgentID mocks base method.
func (m *MockSendingEnterpriseInteractor) GetSendingEnterpriseAndAcceptJobSeekerListByAgentID(input interactor.GetSendingEnterpriseAndAcceptJobSeekerListByAgentIDInput) (interactor.GetSendingEnterpriseAndAcceptJobSeekerListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingEnterpriseAndAcceptJobSeekerListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetSendingEnterpriseAndAcceptJobSeekerListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingEnterpriseAndAcceptJobSeekerListByAgentID indicates an expected call of GetSendingEnterpriseAndAcceptJobSeekerListByAgentID.
func (mr *MockSendingEnterpriseInteractorMockRecorder) GetSendingEnterpriseAndAcceptJobSeekerListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingEnterpriseAndAcceptJobSeekerListByAgentID", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).GetSendingEnterpriseAndAcceptJobSeekerListByAgentID), input)
}

// GetSendingEnterpriseAndBillingAddressByID mocks base method.
func (m *MockSendingEnterpriseInteractor) GetSendingEnterpriseAndBillingAddressByID(input interactor.GetSendingEnterpriseAndBillingAddressByIDInput) (interactor.GetSendingEnterpriseAndBillingAddressByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingEnterpriseAndBillingAddressByID", input)
	ret0, _ := ret[0].(interactor.GetSendingEnterpriseAndBillingAddressByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingEnterpriseAndBillingAddressByID indicates an expected call of GetSendingEnterpriseAndBillingAddressByID.
func (mr *MockSendingEnterpriseInteractorMockRecorder) GetSendingEnterpriseAndBillingAddressByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingEnterpriseAndBillingAddressByID", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).GetSendingEnterpriseAndBillingAddressByID), input)
}

// GetSendingEnterpriseByID mocks base method.
func (m *MockSendingEnterpriseInteractor) GetSendingEnterpriseByID(input interactor.GetSendingEnterpriseByIDInput) (interactor.GetSendingEnterpriseByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingEnterpriseByID", input)
	ret0, _ := ret[0].(interactor.GetSendingEnterpriseByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingEnterpriseByID indicates an expected call of GetSendingEnterpriseByID.
func (mr *MockSendingEnterpriseInteractorMockRecorder) GetSendingEnterpriseByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingEnterpriseByID", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).GetSendingEnterpriseByID), input)
}

// GetSendingEnterpriseByUUID mocks base method.
func (m *MockSendingEnterpriseInteractor) GetSendingEnterpriseByUUID(input interactor.GetSendingEnterpriseByUUIDInput) (interactor.GetSendingEnterpriseByUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingEnterpriseByUUID", input)
	ret0, _ := ret[0].(interactor.GetSendingEnterpriseByUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingEnterpriseByUUID indicates an expected call of GetSendingEnterpriseByUUID.
func (mr *MockSendingEnterpriseInteractorMockRecorder) GetSendingEnterpriseByUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingEnterpriseByUUID", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).GetSendingEnterpriseByUUID), input)
}

// GetSendingEnterpriseReferenceMaterialBySendingEnterpriseID mocks base method.
func (m *MockSendingEnterpriseInteractor) GetSendingEnterpriseReferenceMaterialBySendingEnterpriseID(input interactor.GetSendingEnterpriseReferenceMaterialBySendingEnterpriseIDInput) (interactor.GetSendingEnterpriseReferenceMaterialBySendingEnterpriseIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingEnterpriseReferenceMaterialBySendingEnterpriseID", input)
	ret0, _ := ret[0].(interactor.GetSendingEnterpriseReferenceMaterialBySendingEnterpriseIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingEnterpriseReferenceMaterialBySendingEnterpriseID indicates an expected call of GetSendingEnterpriseReferenceMaterialBySendingEnterpriseID.
func (mr *MockSendingEnterpriseInteractorMockRecorder) GetSendingEnterpriseReferenceMaterialBySendingEnterpriseID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingEnterpriseReferenceMaterialBySendingEnterpriseID", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).GetSendingEnterpriseReferenceMaterialBySendingEnterpriseID), input)
}

// GetSendingInformationForSendingMail mocks base method.
func (m *MockSendingEnterpriseInteractor) GetSendingInformationForSendingMail(input interactor.GetSendingInformationForSendingMailInput) (interactor.GetSendingInformationForSendingMailOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSendingInformationForSendingMail", input)
	ret0, _ := ret[0].(interactor.GetSendingInformationForSendingMailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSendingInformationForSendingMail indicates an expected call of GetSendingInformationForSendingMail.
func (mr *MockSendingEnterpriseInteractorMockRecorder) GetSendingInformationForSendingMail(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSendingInformationForSendingMail", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).GetSendingInformationForSendingMail), input)
}

// SendMailForRSVP mocks base method.
func (m *MockSendingEnterpriseInteractor) SendMailForRSVP(input interactor.SendMailForRSVPInput) (interactor.SendMailForRSVPOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMailForRSVP", input)
	ret0, _ := ret[0].(interactor.SendMailForRSVPOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMailForRSVP indicates an expected call of SendMailForRSVP.
func (mr *MockSendingEnterpriseInteractorMockRecorder) SendMailForRSVP(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMailForRSVP", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).SendMailForRSVP), input)
}

// SendSendingMail mocks base method.
func (m *MockSendingEnterpriseInteractor) SendSendingMail(input interactor.SendSendingMailInput) (interactor.SendSendingMailOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendSendingMail", input)
	ret0, _ := ret[0].(interactor.SendSendingMailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendSendingMail indicates an expected call of SendSendingMail.
func (mr *MockSendingEnterpriseInteractorMockRecorder) SendSendingMail(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSendingMail", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).SendSendingMail), input)
}

// SigninSendingEnterprise mocks base method.
func (m *MockSendingEnterpriseInteractor) SigninSendingEnterprise(input interactor.SigninSendingEnterpriseInput) (interactor.SigninSendingEnterpriseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SigninSendingEnterprise", input)
	ret0, _ := ret[0].(interactor.SigninSendingEnterpriseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SigninSendingEnterprise indicates an expected call of SigninSendingEnterprise.
func (mr *MockSendingEnterpriseInteractorMockRecorder) SigninSendingEnterprise(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SigninSendingEnterprise", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).SigninSendingEnterprise), input)
}

// UpdateSendingEnterprise mocks base method.
func (m *MockSendingEnterpriseInteractor) UpdateSendingEnterprise(input interactor.UpdateSendingEnterpriseInput) (interactor.UpdateSendingEnterpriseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSendingEnterprise", input)
	ret0, _ := ret[0].(interactor.UpdateSendingEnterpriseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSendingEnterprise indicates an expected call of UpdateSendingEnterprise.
func (mr *MockSendingEnterpriseInteractorMockRecorder) UpdateSendingEnterprise(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendingEnterprise", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).UpdateSendingEnterprise), input)
}

// UpdateSendingEnterprisePassword mocks base method.
func (m *MockSendingEnterpriseInteractor) UpdateSendingEnterprisePassword(input interactor.UpdateSendingEnterprisePasswordInput) (interactor.UpdateSendingEnterprisePasswordOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSendingEnterprisePassword", input)
	ret0, _ := ret[0].(interactor.UpdateSendingEnterprisePasswordOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSendingEnterprisePassword indicates an expected call of UpdateSendingEnterprisePassword.
func (mr *MockSendingEnterpriseInteractorMockRecorder) UpdateSendingEnterprisePassword(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendingEnterprisePassword", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).UpdateSendingEnterprisePassword), input)
}

// UpdateSendingEnterpriseReferenceMaterial mocks base method.
func (m *MockSendingEnterpriseInteractor) UpdateSendingEnterpriseReferenceMaterial(input interactor.UpdateSendingEnterpriseReferenceMaterialInput) (interactor.UpdateSendingEnterpriseReferenceMaterialOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSendingEnterpriseReferenceMaterial", input)
	ret0, _ := ret[0].(interactor.UpdateSendingEnterpriseReferenceMaterialOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSendingEnterpriseReferenceMaterial indicates an expected call of UpdateSendingEnterpriseReferenceMaterial.
func (mr *MockSendingEnterpriseInteractorMockRecorder) UpdateSendingEnterpriseReferenceMaterial(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSendingEnterpriseReferenceMaterial", reflect.TypeOf((*MockSendingEnterpriseInteractor)(nil).UpdateSendingEnterpriseReferenceMaterial), input)
}
