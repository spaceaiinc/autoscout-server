// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/agent.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/agent.go -destination ./mock/mock_interactor/mock_agent.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentInteractor is a mock of AgentInteractor interface.
type MockAgentInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockAgentInteractorMockRecorder
}

// MockAgentInteractorMockRecorder is the mock recorder for MockAgentInteractor.
type MockAgentInteractorMockRecorder struct {
	mock *MockAgentInteractor
}

// NewMockAgentInteractor creates a new mock instance.
func NewMockAgentInteractor(ctrl *gomock.Controller) *MockAgentInteractor {
	mock := &MockAgentInteractor{ctrl: ctrl}
	mock.recorder = &MockAgentInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentInteractor) EXPECT() *MockAgentInteractorMockRecorder {
	return m.recorder
}

// AgentAndAgentStaffSignUp mocks base method.
func (m *MockAgentInteractor) AgentAndAgentStaffSignUp(input interactor.AgentAndAgentStaffSignUpInput) (interactor.AgentAndAgentStaffSignUpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentAndAgentStaffSignUp", input)
	ret0, _ := ret[0].(interactor.AgentAndAgentStaffSignUpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentAndAgentStaffSignUp indicates an expected call of AgentAndAgentStaffSignUp.
func (mr *MockAgentInteractorMockRecorder) AgentAndAgentStaffSignUp(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentAndAgentStaffSignUp", reflect.TypeOf((*MockAgentInteractor)(nil).AgentAndAgentStaffSignUp), input)
}

// AgentSignUp mocks base method.
func (m *MockAgentInteractor) AgentSignUp(input interactor.AgentSignUpInput) (interactor.AgentSignUpOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentSignUp", input)
	ret0, _ := ret[0].(interactor.AgentSignUpOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentSignUp indicates an expected call of AgentSignUp.
func (mr *MockAgentInteractorMockRecorder) AgentSignUp(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentSignUp", reflect.TypeOf((*MockAgentInteractor)(nil).AgentSignUp), input)
}

// GetAgentByAgentID mocks base method.
func (m *MockAgentInteractor) GetAgentByAgentID(input interactor.GetAgentByAgentIDInput) (interactor.GetAgentByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentByAgentID", input)
	ret0, _ := ret[0].(interactor.GetAgentByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentByAgentID indicates an expected call of GetAgentByAgentID.
func (mr *MockAgentInteractorMockRecorder) GetAgentByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentByAgentID", reflect.TypeOf((*MockAgentInteractor)(nil).GetAgentByAgentID), input)
}

// GetAgentByAgentUUID mocks base method.
func (m *MockAgentInteractor) GetAgentByAgentUUID(input interactor.GetAgentByAgentUUIDInput) (interactor.GetAgentByAgentUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentByAgentUUID", input)
	ret0, _ := ret[0].(interactor.GetAgentByAgentUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentByAgentUUID indicates an expected call of GetAgentByAgentUUID.
func (mr *MockAgentInteractorMockRecorder) GetAgentByAgentUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentByAgentUUID", reflect.TypeOf((*MockAgentInteractor)(nil).GetAgentByAgentUUID), input)
}

// GetAgentClaimList mocks base method.
func (m *MockAgentInteractor) GetAgentClaimList(input interactor.GetAgentClaimListInput) (interactor.GetAgentClaimListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentClaimList", input)
	ret0, _ := ret[0].(interactor.GetAgentClaimListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentClaimList indicates an expected call of GetAgentClaimList.
func (mr *MockAgentInteractorMockRecorder) GetAgentClaimList(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentClaimList", reflect.TypeOf((*MockAgentInteractor)(nil).GetAgentClaimList), input)
}

// GetAgentLineChannelByAgentID mocks base method.
func (m *MockAgentInteractor) GetAgentLineChannelByAgentID(input interactor.GetAgentLineChannelByAgentIDInput) (interactor.GetAgentLineChannelByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentLineChannelByAgentID", input)
	ret0, _ := ret[0].(interactor.GetAgentLineChannelByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentLineChannelByAgentID indicates an expected call of GetAgentLineChannelByAgentID.
func (mr *MockAgentInteractorMockRecorder) GetAgentLineChannelByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentLineChannelByAgentID", reflect.TypeOf((*MockAgentInteractor)(nil).GetAgentLineChannelByAgentID), input)
}

// GetAgentLineLoginChannelIDByAgentUUID mocks base method.
func (m *MockAgentInteractor) GetAgentLineLoginChannelIDByAgentUUID(input interactor.GetAgentLineLoginChannelIDByAgentUUIDInput) (interactor.GetAgentLineLoginChannelIDByAgentUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentLineLoginChannelIDByAgentUUID", input)
	ret0, _ := ret[0].(interactor.GetAgentLineLoginChannelIDByAgentUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentLineLoginChannelIDByAgentUUID indicates an expected call of GetAgentLineLoginChannelIDByAgentUUID.
func (mr *MockAgentInteractorMockRecorder) GetAgentLineLoginChannelIDByAgentUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentLineLoginChannelIDByAgentUUID", reflect.TypeOf((*MockAgentInteractor)(nil).GetAgentLineLoginChannelIDByAgentUUID), input)
}

// GetAgreementFileURL mocks base method.
func (m *MockAgentInteractor) GetAgreementFileURL(input interactor.GetAgreementFileURLInput) (interactor.GetAgreementFileURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgreementFileURL", input)
	ret0, _ := ret[0].(interactor.GetAgreementFileURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgreementFileURL indicates an expected call of GetAgreementFileURL.
func (mr *MockAgentInteractorMockRecorder) GetAgreementFileURL(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgreementFileURL", reflect.TypeOf((*MockAgentInteractor)(nil).GetAgreementFileURL), input)
}

// GetAllAgentList mocks base method.
func (m *MockAgentInteractor) GetAllAgentList() (interactor.GetAllAgentListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAgentList")
	ret0, _ := ret[0].(interactor.GetAllAgentListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAgentList indicates an expected call of GetAllAgentList.
func (mr *MockAgentInteractorMockRecorder) GetAllAgentList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAgentList", reflect.TypeOf((*MockAgentInteractor)(nil).GetAllAgentList))
}

// GetAllianceAgentListByAgentID mocks base method.
func (m *MockAgentInteractor) GetAllianceAgentListByAgentID(input interactor.GetAllianceAgentListByAgentIDInput) (interactor.GetAllianceAgentListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllianceAgentListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetAllianceAgentListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllianceAgentListByAgentID indicates an expected call of GetAllianceAgentListByAgentID.
func (mr *MockAgentInteractorMockRecorder) GetAllianceAgentListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllianceAgentListByAgentID", reflect.TypeOf((*MockAgentInteractor)(nil).GetAllianceAgentListByAgentID), input)
}

// GetAllianceAgentListByAgentIDForSelect mocks base method.
func (m *MockAgentInteractor) GetAllianceAgentListByAgentIDForSelect(input interactor.GetAllianceAgentListByAgentIDForSelectInput) (interactor.GetAllianceAgentListByAgentIDForSelectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllianceAgentListByAgentIDForSelect", input)
	ret0, _ := ret[0].(interactor.GetAllianceAgentListByAgentIDForSelectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllianceAgentListByAgentIDForSelect indicates an expected call of GetAllianceAgentListByAgentIDForSelect.
func (mr *MockAgentInteractorMockRecorder) GetAllianceAgentListByAgentIDForSelect(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllianceAgentListByAgentIDForSelect", reflect.TypeOf((*MockAgentInteractor)(nil).GetAllianceAgentListByAgentIDForSelect), input)
}

// UpdateAgent mocks base method.
func (m *MockAgentInteractor) UpdateAgent(input interactor.UpdateAgentInput) (interactor.UpdateAgentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgent", input)
	ret0, _ := ret[0].(interactor.UpdateAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgent indicates an expected call of UpdateAgent.
func (mr *MockAgentInteractorMockRecorder) UpdateAgent(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgent", reflect.TypeOf((*MockAgentInteractor)(nil).UpdateAgent), input)
}

// UpdateAgentAgreementFileURL mocks base method.
func (m *MockAgentInteractor) UpdateAgentAgreementFileURL(input interactor.UpdateAgentAgreementFileURLInput) (interactor.UpdateAgentAgreementFileURLOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentAgreementFileURL", input)
	ret0, _ := ret[0].(interactor.UpdateAgentAgreementFileURLOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentAgreementFileURL indicates an expected call of UpdateAgentAgreementFileURL.
func (mr *MockAgentInteractorMockRecorder) UpdateAgentAgreementFileURL(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentAgreementFileURL", reflect.TypeOf((*MockAgentInteractor)(nil).UpdateAgentAgreementFileURL), input)
}

// UpdateAgentForAdmin mocks base method.
func (m *MockAgentInteractor) UpdateAgentForAdmin(input interactor.UpdateAgentForAdminInput) (interactor.UpdateAgentForAdminOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentForAdmin", input)
	ret0, _ := ret[0].(interactor.UpdateAgentForAdminOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentForAdmin indicates an expected call of UpdateAgentForAdmin.
func (mr *MockAgentInteractorMockRecorder) UpdateAgentForAdmin(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentForAdmin", reflect.TypeOf((*MockAgentInteractor)(nil).UpdateAgentForAdmin), input)
}

// UpdateAgentLineChannel mocks base method.
func (m *MockAgentInteractor) UpdateAgentLineChannel(input interactor.UpdateAgentLineChannelInput) (interactor.UpdateAgentLineChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentLineChannel", input)
	ret0, _ := ret[0].(interactor.UpdateAgentLineChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentLineChannel indicates an expected call of UpdateAgentLineChannel.
func (mr *MockAgentInteractorMockRecorder) UpdateAgentLineChannel(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentLineChannel", reflect.TypeOf((*MockAgentInteractor)(nil).UpdateAgentLineChannel), input)
}
