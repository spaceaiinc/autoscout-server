// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/chat_message_with_agent.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/chat_message_with_agent.go -destination ./mock/mock_interactor/mock_chat_message_with_agent.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockChatMessageWithAgentInteractor is a mock of ChatMessageWithAgentInteractor interface.
type MockChatMessageWithAgentInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockChatMessageWithAgentInteractorMockRecorder
}

// MockChatMessageWithAgentInteractorMockRecorder is the mock recorder for MockChatMessageWithAgentInteractor.
type MockChatMessageWithAgentInteractorMockRecorder struct {
	mock *MockChatMessageWithAgentInteractor
}

// NewMockChatMessageWithAgentInteractor creates a new mock instance.
func NewMockChatMessageWithAgentInteractor(ctrl *gomock.Controller) *MockChatMessageWithAgentInteractor {
	mock := &MockChatMessageWithAgentInteractor{ctrl: ctrl}
	mock.recorder = &MockChatMessageWithAgentInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatMessageWithAgentInteractor) EXPECT() *MockChatMessageWithAgentInteractorMockRecorder {
	return m.recorder
}

// GetChatMessageWithAgentListByThreadID mocks base method.
func (m *MockChatMessageWithAgentInteractor) GetChatMessageWithAgentListByThreadID(input interactor.GetChatMessageWithAgentListByThreadIDInput) (interactor.GetChatMessageWithAgentListByThreadIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessageWithAgentListByThreadID", input)
	ret0, _ := ret[0].(interactor.GetChatMessageWithAgentListByThreadIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessageWithAgentListByThreadID indicates an expected call of GetChatMessageWithAgentListByThreadID.
func (mr *MockChatMessageWithAgentInteractorMockRecorder) GetChatMessageWithAgentListByThreadID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessageWithAgentListByThreadID", reflect.TypeOf((*MockChatMessageWithAgentInteractor)(nil).GetChatMessageWithAgentListByThreadID), input)
}

// SendChatMessageWithAgent mocks base method.
func (m *MockChatMessageWithAgentInteractor) SendChatMessageWithAgent(input interactor.SendChatMessageWithAgentInput) (interactor.SendChatMessageWithAgentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChatMessageWithAgent", input)
	ret0, _ := ret[0].(interactor.SendChatMessageWithAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChatMessageWithAgent indicates an expected call of SendChatMessageWithAgent.
func (mr *MockChatMessageWithAgentInteractorMockRecorder) SendChatMessageWithAgent(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChatMessageWithAgent", reflect.TypeOf((*MockChatMessageWithAgentInteractor)(nil).SendChatMessageWithAgent), input)
}

// UpdateChatMessageWithAgentWatchedAtByThreadID mocks base method.
func (m *MockChatMessageWithAgentInteractor) UpdateChatMessageWithAgentWatchedAtByThreadID(input interactor.UpdateChatMessageWithAgentWatchedAtByThreadIDInput) (interactor.UpdateChatMessageWithAgentWatchedAtByThreadIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChatMessageWithAgentWatchedAtByThreadID", input)
	ret0, _ := ret[0].(interactor.UpdateChatMessageWithAgentWatchedAtByThreadIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChatMessageWithAgentWatchedAtByThreadID indicates an expected call of UpdateChatMessageWithAgentWatchedAtByThreadID.
func (mr *MockChatMessageWithAgentInteractorMockRecorder) UpdateChatMessageWithAgentWatchedAtByThreadID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChatMessageWithAgentWatchedAtByThreadID", reflect.TypeOf((*MockChatMessageWithAgentInteractor)(nil).UpdateChatMessageWithAgentWatchedAtByThreadID), input)
}
