// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/session.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/session.go -destination ./mock/mock_interactor/mock_session.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionInteractor is a mock of SessionInteractor interface.
type MockSessionInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockSessionInteractorMockRecorder
}

// MockSessionInteractorMockRecorder is the mock recorder for MockSessionInteractor.
type MockSessionInteractorMockRecorder struct {
	mock *MockSessionInteractor
}

// NewMockSessionInteractor creates a new mock instance.
func NewMockSessionInteractor(ctrl *gomock.Controller) *MockSessionInteractor {
	mock := &MockSessionInteractor{ctrl: ctrl}
	mock.recorder = &MockSessionInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionInteractor) EXPECT() *MockSessionInteractorMockRecorder {
	return m.recorder
}

// GetSignInUser mocks base method.
func (m *MockSessionInteractor) GetSignInUser(input interactor.GetSignInUserInput) (interactor.GetSignInUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignInUser", input)
	ret0, _ := ret[0].(interactor.GetSignInUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignInUser indicates an expected call of GetSignInUser.
func (mr *MockSessionInteractorMockRecorder) GetSignInUser(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignInUser", reflect.TypeOf((*MockSessionInteractor)(nil).GetSignInUser), input)
}

// LoginGestJobSeekerForLP mocks base method.
func (m *MockSessionInteractor) LoginGestJobSeekerForLP(input interactor.LoginGestJobSeekerForLPInput) (interactor.LoginGestJobSeekerForLPOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginGestJobSeekerForLP", input)
	ret0, _ := ret[0].(interactor.LoginGestJobSeekerForLPOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginGestJobSeekerForLP indicates an expected call of LoginGestJobSeekerForLP.
func (mr *MockSessionInteractorMockRecorder) LoginGestJobSeekerForLP(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginGestJobSeekerForLP", reflect.TypeOf((*MockSessionInteractor)(nil).LoginGestJobSeekerForLP), input)
}

// SignIn mocks base method.
func (m *MockSessionInteractor) SignIn(input interactor.SessionSignInInput) (interactor.SessionSignInOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", input)
	ret0, _ := ret[0].(interactor.SessionSignInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockSessionInteractorMockRecorder) SignIn(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockSessionInteractor)(nil).SignIn), input)
}

// SignInForGestEnterprise mocks base method.
func (m *MockSessionInteractor) SignInForGestEnterprise(input interactor.SessionSignInForGestEnterpriseInput) (interactor.SessionSignInForGestEnterpriseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInForGestEnterprise", input)
	ret0, _ := ret[0].(interactor.SessionSignInForGestEnterpriseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInForGestEnterprise indicates an expected call of SignInForGestEnterprise.
func (mr *MockSessionInteractorMockRecorder) SignInForGestEnterprise(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInForGestEnterprise", reflect.TypeOf((*MockSessionInteractor)(nil).SignInForGestEnterprise), input)
}

// SignInForGestEnterpriseByTaskGroupUUID mocks base method.
func (m *MockSessionInteractor) SignInForGestEnterpriseByTaskGroupUUID(input interactor.SessionSignInForGestEnterpriseByTaskGroupUUIDInput) (interactor.SessionSignInForGestEnterpriseByTaskGroupUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInForGestEnterpriseByTaskGroupUUID", input)
	ret0, _ := ret[0].(interactor.SessionSignInForGestEnterpriseByTaskGroupUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInForGestEnterpriseByTaskGroupUUID indicates an expected call of SignInForGestEnterpriseByTaskGroupUUID.
func (mr *MockSessionInteractorMockRecorder) SignInForGestEnterpriseByTaskGroupUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInForGestEnterpriseByTaskGroupUUID", reflect.TypeOf((*MockSessionInteractor)(nil).SignInForGestEnterpriseByTaskGroupUUID), input)
}

// SignInForGestJobSeeker mocks base method.
func (m *MockSessionInteractor) SignInForGestJobSeeker(input interactor.SessionSignInForGestJobSeekerInput) (interactor.SessionSignInForGestJobSeekerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInForGestJobSeeker", input)
	ret0, _ := ret[0].(interactor.SessionSignInForGestJobSeekerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInForGestJobSeeker indicates an expected call of SignInForGestJobSeeker.
func (mr *MockSessionInteractorMockRecorder) SignInForGestJobSeeker(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInForGestJobSeeker", reflect.TypeOf((*MockSessionInteractor)(nil).SignInForGestJobSeeker), input)
}

// SignInForGestJobSeekerFromLP mocks base method.
func (m *MockSessionInteractor) SignInForGestJobSeekerFromLP(input interactor.SessionSignInForGestJobSeekerFromLPInput) (interactor.SessionSignInForGestJobSeekerFromLPOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInForGestJobSeekerFromLP", input)
	ret0, _ := ret[0].(interactor.SessionSignInForGestJobSeekerFromLPOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInForGestJobSeekerFromLP indicates an expected call of SignInForGestJobSeekerFromLP.
func (mr *MockSessionInteractorMockRecorder) SignInForGestJobSeekerFromLP(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInForGestJobSeekerFromLP", reflect.TypeOf((*MockSessionInteractor)(nil).SignInForGestJobSeekerFromLP), input)
}

// SignInForGestSendingJobSeeker mocks base method.
func (m *MockSessionInteractor) SignInForGestSendingJobSeeker(input interactor.SessionSignInForGestSendingJobSeekerInput) (interactor.SessionSignInForGestSendingJobSeekerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInForGestSendingJobSeeker", input)
	ret0, _ := ret[0].(interactor.SessionSignInForGestSendingJobSeekerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInForGestSendingJobSeeker indicates an expected call of SignInForGestSendingJobSeeker.
func (mr *MockSessionInteractorMockRecorder) SignInForGestSendingJobSeeker(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInForGestSendingJobSeeker", reflect.TypeOf((*MockSessionInteractor)(nil).SignInForGestSendingJobSeeker), input)
}

// SignOut mocks base method.
func (m *MockSessionInteractor) SignOut(input interactor.SessionSignOutInput) (interactor.SessionSignOutOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOut", input)
	ret0, _ := ret[0].(interactor.SessionSignOutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOut indicates an expected call of SignOut.
func (mr *MockSessionInteractorMockRecorder) SignOut(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockSessionInteractor)(nil).SignOut), input)
}
