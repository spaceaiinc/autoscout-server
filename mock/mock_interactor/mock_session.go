// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/session.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/session.go -destination ./mock/mock_interactor/mock_session.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionInteractor is a mock of SessionInteractor interface.
type MockSessionInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockSessionInteractorMockRecorder
}

// MockSessionInteractorMockRecorder is the mock recorder for MockSessionInteractor.
type MockSessionInteractorMockRecorder struct {
	mock *MockSessionInteractor
}

// NewMockSessionInteractor creates a new mock instance.
func NewMockSessionInteractor(ctrl *gomock.Controller) *MockSessionInteractor {
	mock := &MockSessionInteractor{ctrl: ctrl}
	mock.recorder = &MockSessionInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionInteractor) EXPECT() *MockSessionInteractorMockRecorder {
	return m.recorder
}

// GetSignInUser mocks base method.
func (m *MockSessionInteractor) GetSignInUser(input interactor.GetSignInUserInput) (interactor.GetSignInUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignInUser", input)
	ret0, _ := ret[0].(interactor.GetSignInUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignInUser indicates an expected call of GetSignInUser.
func (mr *MockSessionInteractorMockRecorder) GetSignInUser(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignInUser", reflect.TypeOf((*MockSessionInteractor)(nil).GetSignInUser), input)
}

// LoginGuestJobSeekerForLP mocks base method.
func (m *MockSessionInteractor) LoginGuestJobSeekerForLP(input interactor.LoginGuestJobSeekerForLPInput) (interactor.LoginGuestJobSeekerForLPOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginGuestJobSeekerForLP", input)
	ret0, _ := ret[0].(interactor.LoginGuestJobSeekerForLPOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginGuestJobSeekerForLP indicates an expected call of LoginGuestJobSeekerForLP.
func (mr *MockSessionInteractorMockRecorder) LoginGuestJobSeekerForLP(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginGuestJobSeekerForLP", reflect.TypeOf((*MockSessionInteractor)(nil).LoginGuestJobSeekerForLP), input)
}

// SignIn mocks base method.
func (m *MockSessionInteractor) SignIn(input interactor.SessionSignInInput) (interactor.SessionSignInOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", input)
	ret0, _ := ret[0].(interactor.SessionSignInOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockSessionInteractorMockRecorder) SignIn(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockSessionInteractor)(nil).SignIn), input)
}

// SignInForGuestEnterprise mocks base method.
func (m *MockSessionInteractor) SignInForGuestEnterprise(input interactor.SessionSignInForGuestEnterpriseInput) (interactor.SessionSignInForGuestEnterpriseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInForGuestEnterprise", input)
	ret0, _ := ret[0].(interactor.SessionSignInForGuestEnterpriseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInForGuestEnterprise indicates an expected call of SignInForGuestEnterprise.
func (mr *MockSessionInteractorMockRecorder) SignInForGuestEnterprise(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInForGuestEnterprise", reflect.TypeOf((*MockSessionInteractor)(nil).SignInForGuestEnterprise), input)
}

// SignInForGuestEnterpriseByTaskGroupUUID mocks base method.
func (m *MockSessionInteractor) SignInForGuestEnterpriseByTaskGroupUUID(input interactor.SessionSignInForGuestEnterpriseByTaskGroupUUIDInput) (interactor.SessionSignInForGuestEnterpriseByTaskGroupUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInForGuestEnterpriseByTaskGroupUUID", input)
	ret0, _ := ret[0].(interactor.SessionSignInForGuestEnterpriseByTaskGroupUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInForGuestEnterpriseByTaskGroupUUID indicates an expected call of SignInForGuestEnterpriseByTaskGroupUUID.
func (mr *MockSessionInteractorMockRecorder) SignInForGuestEnterpriseByTaskGroupUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInForGuestEnterpriseByTaskGroupUUID", reflect.TypeOf((*MockSessionInteractor)(nil).SignInForGuestEnterpriseByTaskGroupUUID), input)
}

// SignInForGuestJobSeeker mocks base method.
func (m *MockSessionInteractor) SignInForGuestJobSeeker(input interactor.SessionSignInForGuestJobSeekerInput) (interactor.SessionSignInForGuestJobSeekerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInForGuestJobSeeker", input)
	ret0, _ := ret[0].(interactor.SessionSignInForGuestJobSeekerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInForGuestJobSeeker indicates an expected call of SignInForGuestJobSeeker.
func (mr *MockSessionInteractorMockRecorder) SignInForGuestJobSeeker(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInForGuestJobSeeker", reflect.TypeOf((*MockSessionInteractor)(nil).SignInForGuestJobSeeker), input)
}

// SignInForGuestJobSeekerFromLP mocks base method.
func (m *MockSessionInteractor) SignInForGuestJobSeekerFromLP(input interactor.SessionSignInForGuestJobSeekerFromLPInput) (interactor.SessionSignInForGuestJobSeekerFromLPOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInForGuestJobSeekerFromLP", input)
	ret0, _ := ret[0].(interactor.SessionSignInForGuestJobSeekerFromLPOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInForGuestJobSeekerFromLP indicates an expected call of SignInForGuestJobSeekerFromLP.
func (mr *MockSessionInteractorMockRecorder) SignInForGuestJobSeekerFromLP(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInForGuestJobSeekerFromLP", reflect.TypeOf((*MockSessionInteractor)(nil).SignInForGuestJobSeekerFromLP), input)
}

// SignOut mocks base method.
func (m *MockSessionInteractor) SignOut(input interactor.SessionSignOutInput) (interactor.SessionSignOutOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignOut", input)
	ret0, _ := ret[0].(interactor.SessionSignOutOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignOut indicates an expected call of SignOut.
func (mr *MockSessionInteractorMockRecorder) SignOut(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockSessionInteractor)(nil).SignOut), input)
}
