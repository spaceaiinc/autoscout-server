// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/chat_message_with_job_seeker.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/chat_message_with_job_seeker.go -destination ./mock/mock_interactor/mock_chat_message_with_job_seeker.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockChatMessageWithJobSeekerInteractor is a mock of ChatMessageWithJobSeekerInteractor interface.
type MockChatMessageWithJobSeekerInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockChatMessageWithJobSeekerInteractorMockRecorder
}

// MockChatMessageWithJobSeekerInteractorMockRecorder is the mock recorder for MockChatMessageWithJobSeekerInteractor.
type MockChatMessageWithJobSeekerInteractorMockRecorder struct {
	mock *MockChatMessageWithJobSeekerInteractor
}

// NewMockChatMessageWithJobSeekerInteractor creates a new mock instance.
func NewMockChatMessageWithJobSeekerInteractor(ctrl *gomock.Controller) *MockChatMessageWithJobSeekerInteractor {
	mock := &MockChatMessageWithJobSeekerInteractor{ctrl: ctrl}
	mock.recorder = &MockChatMessageWithJobSeekerInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatMessageWithJobSeekerInteractor) EXPECT() *MockChatMessageWithJobSeekerInteractorMockRecorder {
	return m.recorder
}

// GetChatMessageWithJobSeekerListByGroupID mocks base method.
func (m *MockChatMessageWithJobSeekerInteractor) GetChatMessageWithJobSeekerListByGroupID(input interactor.GetChatMessageWithJobSeekerListByGroupIDInput) (interactor.GetChatMessageWithJobSeekerListByGroupIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessageWithJobSeekerListByGroupID", input)
	ret0, _ := ret[0].(interactor.GetChatMessageWithJobSeekerListByGroupIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessageWithJobSeekerListByGroupID indicates an expected call of GetChatMessageWithJobSeekerListByGroupID.
func (mr *MockChatMessageWithJobSeekerInteractorMockRecorder) GetChatMessageWithJobSeekerListByGroupID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessageWithJobSeekerListByGroupID", reflect.TypeOf((*MockChatMessageWithJobSeekerInteractor)(nil).GetChatMessageWithJobSeekerListByGroupID), input)
}

// LineWebHook mocks base method.
func (m *MockChatMessageWithJobSeekerInteractor) LineWebHook(input interactor.LineWebHookInput) (interactor.LineWebHookOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LineWebHook", input)
	ret0, _ := ret[0].(interactor.LineWebHookOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LineWebHook indicates an expected call of LineWebHook.
func (mr *MockChatMessageWithJobSeekerInteractorMockRecorder) LineWebHook(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LineWebHook", reflect.TypeOf((*MockChatMessageWithJobSeekerInteractor)(nil).LineWebHook), input)
}

// SendChatMessageWithJobSeekerLineImage mocks base method.
func (m *MockChatMessageWithJobSeekerInteractor) SendChatMessageWithJobSeekerLineImage(input interactor.SendChatMessageWithJobSeekerLineImageInput) (interactor.SendChatMessageWithJobSeekerLineImageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChatMessageWithJobSeekerLineImage", input)
	ret0, _ := ret[0].(interactor.SendChatMessageWithJobSeekerLineImageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChatMessageWithJobSeekerLineImage indicates an expected call of SendChatMessageWithJobSeekerLineImage.
func (mr *MockChatMessageWithJobSeekerInteractorMockRecorder) SendChatMessageWithJobSeekerLineImage(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChatMessageWithJobSeekerLineImage", reflect.TypeOf((*MockChatMessageWithJobSeekerInteractor)(nil).SendChatMessageWithJobSeekerLineImage), input)
}

// SendChatMessageWithJobSeekerLineMessage mocks base method.
func (m *MockChatMessageWithJobSeekerInteractor) SendChatMessageWithJobSeekerLineMessage(input interactor.SendChatMessageWithJobSeekerLineMessageInput) (interactor.SendChatMessageWithJobSeekerLineMessageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChatMessageWithJobSeekerLineMessage", input)
	ret0, _ := ret[0].(interactor.SendChatMessageWithJobSeekerLineMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChatMessageWithJobSeekerLineMessage indicates an expected call of SendChatMessageWithJobSeekerLineMessage.
func (mr *MockChatMessageWithJobSeekerInteractorMockRecorder) SendChatMessageWithJobSeekerLineMessage(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChatMessageWithJobSeekerLineMessage", reflect.TypeOf((*MockChatMessageWithJobSeekerInteractor)(nil).SendChatMessageWithJobSeekerLineMessage), input)
}
