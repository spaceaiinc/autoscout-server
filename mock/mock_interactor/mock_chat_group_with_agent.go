// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/chat_group_with_agent.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/chat_group_with_agent.go -destination ./mock/mock_interactor/mock_chat_group_with_agent.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockChatGroupWithAgentInteractor is a mock of ChatGroupWithAgentInteractor interface.
type MockChatGroupWithAgentInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockChatGroupWithAgentInteractorMockRecorder
}

// MockChatGroupWithAgentInteractorMockRecorder is the mock recorder for MockChatGroupWithAgentInteractor.
type MockChatGroupWithAgentInteractorMockRecorder struct {
	mock *MockChatGroupWithAgentInteractor
}

// NewMockChatGroupWithAgentInteractor creates a new mock instance.
func NewMockChatGroupWithAgentInteractor(ctrl *gomock.Controller) *MockChatGroupWithAgentInteractor {
	mock := &MockChatGroupWithAgentInteractor{ctrl: ctrl}
	mock.recorder = &MockChatGroupWithAgentInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatGroupWithAgentInteractor) EXPECT() *MockChatGroupWithAgentInteractorMockRecorder {
	return m.recorder
}

// CheckAnyChatGroupWithoutGroup mocks base method.
func (m *MockChatGroupWithAgentInteractor) CheckAnyChatGroupWithoutGroup(input interactor.CheckAnyChatGroupWithoutGroupInput) (interactor.CheckAnyChatGroupWithoutGroupOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAnyChatGroupWithoutGroup", input)
	ret0, _ := ret[0].(interactor.CheckAnyChatGroupWithoutGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAnyChatGroupWithoutGroup indicates an expected call of CheckAnyChatGroupWithoutGroup.
func (mr *MockChatGroupWithAgentInteractorMockRecorder) CheckAnyChatGroupWithoutGroup(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAnyChatGroupWithoutGroup", reflect.TypeOf((*MockChatGroupWithAgentInteractor)(nil).CheckAnyChatGroupWithoutGroup), input)
}

// CreateChatGroupWithAgent mocks base method.
func (m *MockChatGroupWithAgentInteractor) CreateChatGroupWithAgent(inpdut interactor.CreateChatGroupWithAgentInput) (interactor.CreateChatGroupWithAgentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatGroupWithAgent", inpdut)
	ret0, _ := ret[0].(interactor.CreateChatGroupWithAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatGroupWithAgent indicates an expected call of CreateChatGroupWithAgent.
func (mr *MockChatGroupWithAgentInteractorMockRecorder) CreateChatGroupWithAgent(inpdut any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatGroupWithAgent", reflect.TypeOf((*MockChatGroupWithAgentInteractor)(nil).CreateChatGroupWithAgent), inpdut)
}

// CreateChatGroupWithAgentList mocks base method.
func (m *MockChatGroupWithAgentInteractor) CreateChatGroupWithAgentList(input interactor.CreateChatGroupWithAgentListInput) (interactor.CreateChatGroupWithAgentListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatGroupWithAgentList", input)
	ret0, _ := ret[0].(interactor.CreateChatGroupWithAgentListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatGroupWithAgentList indicates an expected call of CreateChatGroupWithAgentList.
func (mr *MockChatGroupWithAgentInteractorMockRecorder) CreateChatGroupWithAgentList(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatGroupWithAgentList", reflect.TypeOf((*MockChatGroupWithAgentInteractor)(nil).CreateChatGroupWithAgentList), input)
}

// GetChatGroupAndThreadWithAgentByChatGroupID mocks base method.
func (m *MockChatGroupWithAgentInteractor) GetChatGroupAndThreadWithAgentByChatGroupID(input interactor.GetChatGroupAndThreadWithAgentByChatGroupIDInput) (interactor.GetChatGroupAndThreadWithAgentByChatGroupIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatGroupAndThreadWithAgentByChatGroupID", input)
	ret0, _ := ret[0].(interactor.GetChatGroupAndThreadWithAgentByChatGroupIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatGroupAndThreadWithAgentByChatGroupID indicates an expected call of GetChatGroupAndThreadWithAgentByChatGroupID.
func (mr *MockChatGroupWithAgentInteractorMockRecorder) GetChatGroupAndThreadWithAgentByChatGroupID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatGroupAndThreadWithAgentByChatGroupID", reflect.TypeOf((*MockChatGroupWithAgentInteractor)(nil).GetChatGroupAndThreadWithAgentByChatGroupID), input)
}

// GetChatGroupWithAgentByAgentIDAndOtherAgentID mocks base method.
func (m *MockChatGroupWithAgentInteractor) GetChatGroupWithAgentByAgentIDAndOtherAgentID(input interactor.GetChatGroupWithAgentByAgentIDAndOtherAgentIDInput) (interactor.GetChatGroupWithAgentByAgentIDAndOtherAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatGroupWithAgentByAgentIDAndOtherAgentID", input)
	ret0, _ := ret[0].(interactor.GetChatGroupWithAgentByAgentIDAndOtherAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatGroupWithAgentByAgentIDAndOtherAgentID indicates an expected call of GetChatGroupWithAgentByAgentIDAndOtherAgentID.
func (mr *MockChatGroupWithAgentInteractorMockRecorder) GetChatGroupWithAgentByAgentIDAndOtherAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatGroupWithAgentByAgentIDAndOtherAgentID", reflect.TypeOf((*MockChatGroupWithAgentInteractor)(nil).GetChatGroupWithAgentByAgentIDAndOtherAgentID), input)
}

// GetChatGroupWithAgentByID mocks base method.
func (m *MockChatGroupWithAgentInteractor) GetChatGroupWithAgentByID(input interactor.GetChatGroupWithAgentByIDInput) (interactor.GetChatGroupWithAgentByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatGroupWithAgentByID", input)
	ret0, _ := ret[0].(interactor.GetChatGroupWithAgentByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatGroupWithAgentByID indicates an expected call of GetChatGroupWithAgentByID.
func (mr *MockChatGroupWithAgentInteractorMockRecorder) GetChatGroupWithAgentByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatGroupWithAgentByID", reflect.TypeOf((*MockChatGroupWithAgentInteractor)(nil).GetChatGroupWithAgentByID), input)
}

// GetChatGroupWithAgentListByAgentID mocks base method.
func (m *MockChatGroupWithAgentInteractor) GetChatGroupWithAgentListByAgentID(input interactor.GetChatGroupWithAgentListByAgentIDInput) (interactor.GetChatGroupWithAgentListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatGroupWithAgentListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetChatGroupWithAgentListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatGroupWithAgentListByAgentID indicates an expected call of GetChatGroupWithAgentListByAgentID.
func (mr *MockChatGroupWithAgentInteractorMockRecorder) GetChatGroupWithAgentListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatGroupWithAgentListByAgentID", reflect.TypeOf((*MockChatGroupWithAgentInteractor)(nil).GetChatGroupWithAgentListByAgentID), input)
}

// GetChatGroupWithAgentListByAgentIDAndAgentStaffID mocks base method.
func (m *MockChatGroupWithAgentInteractor) GetChatGroupWithAgentListByAgentIDAndAgentStaffID(input interactor.GetChatGroupWithAgentListByAgentIDAndAgentStaffIDInput) (interactor.GetChatGroupWithAgentListByAgentIDAndAgentStaffIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatGroupWithAgentListByAgentIDAndAgentStaffID", input)
	ret0, _ := ret[0].(interactor.GetChatGroupWithAgentListByAgentIDAndAgentStaffIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatGroupWithAgentListByAgentIDAndAgentStaffID indicates an expected call of GetChatGroupWithAgentListByAgentIDAndAgentStaffID.
func (mr *MockChatGroupWithAgentInteractorMockRecorder) GetChatGroupWithAgentListByAgentIDAndAgentStaffID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatGroupWithAgentListByAgentIDAndAgentStaffID", reflect.TypeOf((*MockChatGroupWithAgentInteractor)(nil).GetChatGroupWithAgentListByAgentIDAndAgentStaffID), input)
}

// UpdateAgentLastWatched mocks base method.
func (m *MockChatGroupWithAgentInteractor) UpdateAgentLastWatched(input interactor.UpdateAgentLastWatchedForAgentChatInput) (interactor.UpdateAgentLastWatchedForAgentChatOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentLastWatched", input)
	ret0, _ := ret[0].(interactor.UpdateAgentLastWatchedForAgentChatOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentLastWatched indicates an expected call of UpdateAgentLastWatched.
func (mr *MockChatGroupWithAgentInteractorMockRecorder) UpdateAgentLastWatched(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentLastWatched", reflect.TypeOf((*MockChatGroupWithAgentInteractor)(nil).UpdateAgentLastWatched), input)
}
