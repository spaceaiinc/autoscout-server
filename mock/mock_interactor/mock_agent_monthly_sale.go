// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/agent_monthly_sale.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/agent_monthly_sale.go -destination ./mock/mock_interactor/mock_agent_monthly_sale.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentMonthlySaleInteractor is a mock of AgentMonthlySaleInteractor interface.
type MockAgentMonthlySaleInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockAgentMonthlySaleInteractorMockRecorder
}

// MockAgentMonthlySaleInteractorMockRecorder is the mock recorder for MockAgentMonthlySaleInteractor.
type MockAgentMonthlySaleInteractorMockRecorder struct {
	mock *MockAgentMonthlySaleInteractor
}

// NewMockAgentMonthlySaleInteractor creates a new mock instance.
func NewMockAgentMonthlySaleInteractor(ctrl *gomock.Controller) *MockAgentMonthlySaleInteractor {
	mock := &MockAgentMonthlySaleInteractor{ctrl: ctrl}
	mock.recorder = &MockAgentMonthlySaleInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentMonthlySaleInteractor) EXPECT() *MockAgentMonthlySaleInteractorMockRecorder {
	return m.recorder
}

// CreateAgentMonthlySale mocks base method.
func (m *MockAgentMonthlySaleInteractor) CreateAgentMonthlySale(input interactor.CreateAgentMonthlySaleInput) (interactor.CreateAgentMonthlySaleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentMonthlySale", input)
	ret0, _ := ret[0].(interactor.CreateAgentMonthlySaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgentMonthlySale indicates an expected call of CreateAgentMonthlySale.
func (mr *MockAgentMonthlySaleInteractorMockRecorder) CreateAgentMonthlySale(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentMonthlySale", reflect.TypeOf((*MockAgentMonthlySaleInteractor)(nil).CreateAgentMonthlySale), input)
}

// GetAgentMonthlySaleList mocks base method.
func (m *MockAgentMonthlySaleInteractor) GetAgentMonthlySaleList(input interactor.GetAgentMonthlySaleListInput) (interactor.GetAgentMonthlySaleListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentMonthlySaleList", input)
	ret0, _ := ret[0].(interactor.GetAgentMonthlySaleListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentMonthlySaleList indicates an expected call of GetAgentMonthlySaleList.
func (mr *MockAgentMonthlySaleInteractorMockRecorder) GetAgentMonthlySaleList(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentMonthlySaleList", reflect.TypeOf((*MockAgentMonthlySaleInteractor)(nil).GetAgentMonthlySaleList), input)
}

// GetDefaultPreviewAgentMonthlySaleListByAgentID mocks base method.
func (m *MockAgentMonthlySaleInteractor) GetDefaultPreviewAgentMonthlySaleListByAgentID(input interactor.GetDefaultPreviewAgentMonthlySaleListByAgentIDInput) (interactor.GetDefaultPreviewAgentMonthlySaleListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultPreviewAgentMonthlySaleListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetDefaultPreviewAgentMonthlySaleListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultPreviewAgentMonthlySaleListByAgentID indicates an expected call of GetDefaultPreviewAgentMonthlySaleListByAgentID.
func (mr *MockAgentMonthlySaleInteractorMockRecorder) GetDefaultPreviewAgentMonthlySaleListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultPreviewAgentMonthlySaleListByAgentID", reflect.TypeOf((*MockAgentMonthlySaleInteractor)(nil).GetDefaultPreviewAgentMonthlySaleListByAgentID), input)
}

// GetSaleManagementAndAgentMonthlyByID mocks base method.
func (m *MockAgentMonthlySaleInteractor) GetSaleManagementAndAgentMonthlyByID(input interactor.GetSaleManagementAndAgentMonthlyByIDInput) (interactor.GetSaleManagementAndAgentMonthlyByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSaleManagementAndAgentMonthlyByID", input)
	ret0, _ := ret[0].(interactor.GetSaleManagementAndAgentMonthlyByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSaleManagementAndAgentMonthlyByID indicates an expected call of GetSaleManagementAndAgentMonthlyByID.
func (mr *MockAgentMonthlySaleInteractorMockRecorder) GetSaleManagementAndAgentMonthlyByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSaleManagementAndAgentMonthlyByID", reflect.TypeOf((*MockAgentMonthlySaleInteractor)(nil).GetSaleManagementAndAgentMonthlyByID), input)
}

// GetSaleManagementByID mocks base method.
func (m *MockAgentMonthlySaleInteractor) GetSaleManagementByID(input interactor.GetSaleManagementByIDInput) (interactor.GetSaleManagementByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSaleManagementByID", input)
	ret0, _ := ret[0].(interactor.GetSaleManagementByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSaleManagementByID indicates an expected call of GetSaleManagementByID.
func (mr *MockAgentMonthlySaleInteractorMockRecorder) GetSaleManagementByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSaleManagementByID", reflect.TypeOf((*MockAgentMonthlySaleInteractor)(nil).GetSaleManagementByID), input)
}

// GetSaleManagementListAndStaffManagementByAgentID mocks base method.
func (m *MockAgentMonthlySaleInteractor) GetSaleManagementListAndStaffManagementByAgentID(input interactor.GetSaleManagementListAndStaffManagementByAgentIDInput) (interactor.GetSaleManagementListAndStaffManagementByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSaleManagementListAndStaffManagementByAgentID", input)
	ret0, _ := ret[0].(interactor.GetSaleManagementListAndStaffManagementByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSaleManagementListAndStaffManagementByAgentID indicates an expected call of GetSaleManagementListAndStaffManagementByAgentID.
func (mr *MockAgentMonthlySaleInteractorMockRecorder) GetSaleManagementListAndStaffManagementByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSaleManagementListAndStaffManagementByAgentID", reflect.TypeOf((*MockAgentMonthlySaleInteractor)(nil).GetSaleManagementListAndStaffManagementByAgentID), input)
}

// GetSaleManagementListByAgentID mocks base method.
func (m *MockAgentMonthlySaleInteractor) GetSaleManagementListByAgentID(input interactor.GetSaleManagementListByAgentIDInput) (interactor.GetSaleManagementListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSaleManagementListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetSaleManagementListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSaleManagementListByAgentID indicates an expected call of GetSaleManagementListByAgentID.
func (mr *MockAgentMonthlySaleInteractorMockRecorder) GetSaleManagementListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSaleManagementListByAgentID", reflect.TypeOf((*MockAgentMonthlySaleInteractor)(nil).GetSaleManagementListByAgentID), input)
}

// GetSumOfStaffMonthlyByManagementID mocks base method.
func (m *MockAgentMonthlySaleInteractor) GetSumOfStaffMonthlyByManagementID(input interactor.GetSumOfStaffMonthlyByManagementIDInput) (interactor.GetSumOfStaffMonthlyByManagementIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSumOfStaffMonthlyByManagementID", input)
	ret0, _ := ret[0].(interactor.GetSumOfStaffMonthlyByManagementIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSumOfStaffMonthlyByManagementID indicates an expected call of GetSumOfStaffMonthlyByManagementID.
func (mr *MockAgentMonthlySaleInteractorMockRecorder) GetSumOfStaffMonthlyByManagementID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSumOfStaffMonthlyByManagementID", reflect.TypeOf((*MockAgentMonthlySaleInteractor)(nil).GetSumOfStaffMonthlyByManagementID), input)
}

// UpdateAgentMonthlySale mocks base method.
func (m *MockAgentMonthlySaleInteractor) UpdateAgentMonthlySale(input interactor.UpdateAgentMonthlySaleInput) (interactor.UpdateAgentMonthlySaleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentMonthlySale", input)
	ret0, _ := ret[0].(interactor.UpdateAgentMonthlySaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentMonthlySale indicates an expected call of UpdateAgentMonthlySale.
func (mr *MockAgentMonthlySaleInteractorMockRecorder) UpdateAgentMonthlySale(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentMonthlySale", reflect.TypeOf((*MockAgentMonthlySaleInteractor)(nil).UpdateAgentMonthlySale), input)
}
