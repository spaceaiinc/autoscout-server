// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/notification_for_user.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/notification_for_user.go -destination ./mock/mock_interactor/mock_notification_for_user.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationForUserInteractor is a mock of NotificationForUserInteractor interface.
type MockNotificationForUserInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationForUserInteractorMockRecorder
}

// MockNotificationForUserInteractorMockRecorder is the mock recorder for MockNotificationForUserInteractor.
type MockNotificationForUserInteractorMockRecorder struct {
	mock *MockNotificationForUserInteractor
}

// NewMockNotificationForUserInteractor creates a new mock instance.
func NewMockNotificationForUserInteractor(ctrl *gomock.Controller) *MockNotificationForUserInteractor {
	mock := &MockNotificationForUserInteractor{ctrl: ctrl}
	mock.recorder = &MockNotificationForUserInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationForUserInteractor) EXPECT() *MockNotificationForUserInteractorMockRecorder {
	return m.recorder
}

// CreateNotificationForUser mocks base method.
func (m *MockNotificationForUserInteractor) CreateNotificationForUser(input interactor.CreateNotificationForUserInput) (interactor.CreateNotificationForUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotificationForUser", input)
	ret0, _ := ret[0].(interactor.CreateNotificationForUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotificationForUser indicates an expected call of CreateNotificationForUser.
func (mr *MockNotificationForUserInteractorMockRecorder) CreateNotificationForUser(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotificationForUser", reflect.TypeOf((*MockNotificationForUserInteractor)(nil).CreateNotificationForUser), input)
}

// CreateUserNotificationView mocks base method.
func (m *MockNotificationForUserInteractor) CreateUserNotificationView(input interactor.CreateUserNotificationViewInput) (interactor.CreateUserNotificationViewOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserNotificationView", input)
	ret0, _ := ret[0].(interactor.CreateUserNotificationViewOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserNotificationView indicates an expected call of CreateUserNotificationView.
func (mr *MockNotificationForUserInteractorMockRecorder) CreateUserNotificationView(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserNotificationView", reflect.TypeOf((*MockNotificationForUserInteractor)(nil).CreateUserNotificationView), input)
}

// GetNotificationForUserListByPageAndTargetList mocks base method.
func (m *MockNotificationForUserInteractor) GetNotificationForUserListByPageAndTargetList(input interactor.GetNotificationForUserListByPageAndTargetListInput) (interactor.GetNotificationForUserListByPageAndTargetListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationForUserListByPageAndTargetList", input)
	ret0, _ := ret[0].(interactor.GetNotificationForUserListByPageAndTargetListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationForUserListByPageAndTargetList indicates an expected call of GetNotificationForUserListByPageAndTargetList.
func (mr *MockNotificationForUserInteractorMockRecorder) GetNotificationForUserListByPageAndTargetList(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationForUserListByPageAndTargetList", reflect.TypeOf((*MockNotificationForUserInteractor)(nil).GetNotificationForUserListByPageAndTargetList), input)
}

// GetUnwatchedNotificationForUserCountByAgentStaffID mocks base method.
func (m *MockNotificationForUserInteractor) GetUnwatchedNotificationForUserCountByAgentStaffID(input interactor.GetUnwatchedNotificationForUserCountByAgentStaffIDInput) (interactor.GetUnwatchedNotificationForUserCountByAgentStaffIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnwatchedNotificationForUserCountByAgentStaffID", input)
	ret0, _ := ret[0].(interactor.GetUnwatchedNotificationForUserCountByAgentStaffIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnwatchedNotificationForUserCountByAgentStaffID indicates an expected call of GetUnwatchedNotificationForUserCountByAgentStaffID.
func (mr *MockNotificationForUserInteractorMockRecorder) GetUnwatchedNotificationForUserCountByAgentStaffID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnwatchedNotificationForUserCountByAgentStaffID", reflect.TypeOf((*MockNotificationForUserInteractor)(nil).GetUnwatchedNotificationForUserCountByAgentStaffID), input)
}
