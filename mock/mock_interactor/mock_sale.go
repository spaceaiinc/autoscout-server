// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/sale.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/sale.go -destination ./mock/mock_interactor/mock_sale.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockSaleInteractor is a mock of SaleInteractor interface.
type MockSaleInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockSaleInteractorMockRecorder
}

// MockSaleInteractorMockRecorder is the mock recorder for MockSaleInteractor.
type MockSaleInteractorMockRecorder struct {
	mock *MockSaleInteractor
}

// NewMockSaleInteractor creates a new mock instance.
func NewMockSaleInteractor(ctrl *gomock.Controller) *MockSaleInteractor {
	mock := &MockSaleInteractor{ctrl: ctrl}
	mock.recorder = &MockSaleInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaleInteractor) EXPECT() *MockSaleInteractorMockRecorder {
	return m.recorder
}

// CreateSale mocks base method.
func (m *MockSaleInteractor) CreateSale(input interactor.CreateSaleInput) (interactor.CreateSaleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSale", input)
	ret0, _ := ret[0].(interactor.CreateSaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSale indicates an expected call of CreateSale.
func (mr *MockSaleInteractorMockRecorder) CreateSale(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSale", reflect.TypeOf((*MockSaleInteractor)(nil).CreateSale), input)
}

// GetAccuracySearchList mocks base method.
func (m *MockSaleInteractor) GetAccuracySearchList(input interactor.GetAccuracySearchListInput) (interactor.GetAccuracySearchListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccuracySearchList", input)
	ret0, _ := ret[0].(interactor.GetAccuracySearchListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccuracySearchList indicates an expected call of GetAccuracySearchList.
func (mr *MockSaleInteractorMockRecorder) GetAccuracySearchList(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccuracySearchList", reflect.TypeOf((*MockSaleInteractor)(nil).GetAccuracySearchList), input)
}

// GetSaleByID mocks base method.
func (m *MockSaleInteractor) GetSaleByID(input interactor.GetSaleByIDInput) (interactor.GetSaleByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSaleByID", input)
	ret0, _ := ret[0].(interactor.GetSaleByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSaleByID indicates an expected call of GetSaleByID.
func (mr *MockSaleInteractorMockRecorder) GetSaleByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSaleByID", reflect.TypeOf((*MockSaleInteractor)(nil).GetSaleByID), input)
}

// GetSaleByJobSeekerID mocks base method.
func (m *MockSaleInteractor) GetSaleByJobSeekerID(input interactor.GetSaleByJobSeekerIDInput) (interactor.GetSaleByJobSeekerIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSaleByJobSeekerID", input)
	ret0, _ := ret[0].(interactor.GetSaleByJobSeekerIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSaleByJobSeekerID indicates an expected call of GetSaleByJobSeekerID.
func (mr *MockSaleInteractorMockRecorder) GetSaleByJobSeekerID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSaleByJobSeekerID", reflect.TypeOf((*MockSaleInteractor)(nil).GetSaleByJobSeekerID), input)
}

// GetSaleListByIDList mocks base method.
func (m *MockSaleInteractor) GetSaleListByIDList(input interactor.GetSaleListByIDListInput) (interactor.GetSaleListByIDListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSaleListByIDList", input)
	ret0, _ := ret[0].(interactor.GetSaleListByIDListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSaleListByIDList indicates an expected call of GetSaleListByIDList.
func (mr *MockSaleInteractorMockRecorder) GetSaleListByIDList(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSaleListByIDList", reflect.TypeOf((*MockSaleInteractor)(nil).GetSaleListByIDList), input)
}

// UpdateSale mocks base method.
func (m *MockSaleInteractor) UpdateSale(input interactor.UpdateSaleInput) (interactor.UpdateSaleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSale", input)
	ret0, _ := ret[0].(interactor.UpdateSaleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSale indicates an expected call of UpdateSale.
func (mr *MockSaleInteractorMockRecorder) UpdateSale(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSale", reflect.TypeOf((*MockSaleInteractor)(nil).UpdateSale), input)
}
