// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/initial_enterprise_importer.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/initial_enterprise_importer.go -destination ./mock/mock_interactor/mock_initial_enterprise_importer.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockInitialEnterpriseImporterInteractor is a mock of InitialEnterpriseImporterInteractor interface.
type MockInitialEnterpriseImporterInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockInitialEnterpriseImporterInteractorMockRecorder
}

// MockInitialEnterpriseImporterInteractorMockRecorder is the mock recorder for MockInitialEnterpriseImporterInteractor.
type MockInitialEnterpriseImporterInteractorMockRecorder struct {
	mock *MockInitialEnterpriseImporterInteractor
}

// NewMockInitialEnterpriseImporterInteractor creates a new mock instance.
func NewMockInitialEnterpriseImporterInteractor(ctrl *gomock.Controller) *MockInitialEnterpriseImporterInteractor {
	mock := &MockInitialEnterpriseImporterInteractor{ctrl: ctrl}
	mock.recorder = &MockInitialEnterpriseImporterInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitialEnterpriseImporterInteractor) EXPECT() *MockInitialEnterpriseImporterInteractorMockRecorder {
	return m.recorder
}

// BatchInitialEnterpriseImporter mocks base method.
func (m *MockInitialEnterpriseImporterInteractor) BatchInitialEnterpriseImporter(input interactor.BatchInitialEnterpriseImporterInput) (interactor.BatchInitialEnterpriseImporterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInitialEnterpriseImporter", input)
	ret0, _ := ret[0].(interactor.BatchInitialEnterpriseImporterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchInitialEnterpriseImporter indicates an expected call of BatchInitialEnterpriseImporter.
func (mr *MockInitialEnterpriseImporterInteractorMockRecorder) BatchInitialEnterpriseImporter(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInitialEnterpriseImporter", reflect.TypeOf((*MockInitialEnterpriseImporterInteractor)(nil).BatchInitialEnterpriseImporter), input)
}

// BatchUpdateEnterpriseForAgentBank mocks base method.
func (m *MockInitialEnterpriseImporterInteractor) BatchUpdateEnterpriseForAgentBank(input interactor.BatchUpdateEnterpriseForAgentBankInput) (interactor.BatchUpdateEnterpriseForAgentBankOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateEnterpriseForAgentBank", input)
	ret0, _ := ret[0].(interactor.BatchUpdateEnterpriseForAgentBankOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateEnterpriseForAgentBank indicates an expected call of BatchUpdateEnterpriseForAgentBank.
func (mr *MockInitialEnterpriseImporterInteractorMockRecorder) BatchUpdateEnterpriseForAgentBank(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateEnterpriseForAgentBank", reflect.TypeOf((*MockInitialEnterpriseImporterInteractor)(nil).BatchUpdateEnterpriseForAgentBank), input)
}

// CreateInitialEnterpriseImporter mocks base method.
func (m *MockInitialEnterpriseImporterInteractor) CreateInitialEnterpriseImporter(input interactor.CreateInitialEnterpriseImporterInput) (interactor.CreateInitialEnterpriseImporterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInitialEnterpriseImporter", input)
	ret0, _ := ret[0].(interactor.CreateInitialEnterpriseImporterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInitialEnterpriseImporter indicates an expected call of CreateInitialEnterpriseImporter.
func (mr *MockInitialEnterpriseImporterInteractorMockRecorder) CreateInitialEnterpriseImporter(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInitialEnterpriseImporter", reflect.TypeOf((*MockInitialEnterpriseImporterInteractor)(nil).CreateInitialEnterpriseImporter), input)
}

// DeleteInitialEnterpriseImporter mocks base method.
func (m *MockInitialEnterpriseImporterInteractor) DeleteInitialEnterpriseImporter(input interactor.DeleteInitialEnterpriseImporterInput) (interactor.DeleteInitialEnterpriseImporterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInitialEnterpriseImporter", input)
	ret0, _ := ret[0].(interactor.DeleteInitialEnterpriseImporterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInitialEnterpriseImporter indicates an expected call of DeleteInitialEnterpriseImporter.
func (mr *MockInitialEnterpriseImporterInteractorMockRecorder) DeleteInitialEnterpriseImporter(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInitialEnterpriseImporter", reflect.TypeOf((*MockInitialEnterpriseImporterInteractor)(nil).DeleteInitialEnterpriseImporter), input)
}

// GetInitialEnterpriseImporterListByAgentID mocks base method.
func (m *MockInitialEnterpriseImporterInteractor) GetInitialEnterpriseImporterListByAgentID(input interactor.GetInitialEnterpriseImporterListByAgentIDInput) (interactor.GetInitialEnterpriseImporterListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitialEnterpriseImporterListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetInitialEnterpriseImporterListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitialEnterpriseImporterListByAgentID indicates an expected call of GetInitialEnterpriseImporterListByAgentID.
func (mr *MockInitialEnterpriseImporterInteractorMockRecorder) GetInitialEnterpriseImporterListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitialEnterpriseImporterListByAgentID", reflect.TypeOf((*MockInitialEnterpriseImporterInteractor)(nil).GetInitialEnterpriseImporterListByAgentID), input)
}

// GetInitialEnterpriseImporterListByWeek mocks base method.
func (m *MockInitialEnterpriseImporterInteractor) GetInitialEnterpriseImporterListByWeek() (interactor.GetInitialEnterpriseImporterListByWeekOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitialEnterpriseImporterListByWeek")
	ret0, _ := ret[0].(interactor.GetInitialEnterpriseImporterListByWeekOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitialEnterpriseImporterListByWeek indicates an expected call of GetInitialEnterpriseImporterListByWeek.
func (mr *MockInitialEnterpriseImporterInteractorMockRecorder) GetInitialEnterpriseImporterListByWeek() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitialEnterpriseImporterListByWeek", reflect.TypeOf((*MockInitialEnterpriseImporterInteractor)(nil).GetInitialEnterpriseImporterListByWeek))
}

// ImportEnterpriseFromAgentBank mocks base method.
func (m *MockInitialEnterpriseImporterInteractor) ImportEnterpriseFromAgentBank(input interactor.ImportEnterpriseFromAgentBankInput) (interactor.ImportEnterpriseFromAgentBankOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportEnterpriseFromAgentBank", input)
	ret0, _ := ret[0].(interactor.ImportEnterpriseFromAgentBankOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportEnterpriseFromAgentBank indicates an expected call of ImportEnterpriseFromAgentBank.
func (mr *MockInitialEnterpriseImporterInteractorMockRecorder) ImportEnterpriseFromAgentBank(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportEnterpriseFromAgentBank", reflect.TypeOf((*MockInitialEnterpriseImporterInteractor)(nil).ImportEnterpriseFromAgentBank), input)
}

// ImportEnterpriseFromCircus mocks base method.
func (m *MockInitialEnterpriseImporterInteractor) ImportEnterpriseFromCircus(input interactor.ImportEnterpriseFromCircusInput) (interactor.ImportEnterpriseFromCircusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportEnterpriseFromCircus", input)
	ret0, _ := ret[0].(interactor.ImportEnterpriseFromCircusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportEnterpriseFromCircus indicates an expected call of ImportEnterpriseFromCircus.
func (mr *MockInitialEnterpriseImporterInteractorMockRecorder) ImportEnterpriseFromCircus(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportEnterpriseFromCircus", reflect.TypeOf((*MockInitialEnterpriseImporterInteractor)(nil).ImportEnterpriseFromCircus), input)
}

// UpdateEnterpriseFromAgentBank mocks base method.
func (m *MockInitialEnterpriseImporterInteractor) UpdateEnterpriseFromAgentBank(input interactor.UpdateEnterpriseFromAgentBankInput) (interactor.UpdateEnterpriseFromAgentBankOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnterpriseFromAgentBank", input)
	ret0, _ := ret[0].(interactor.UpdateEnterpriseFromAgentBankOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnterpriseFromAgentBank indicates an expected call of UpdateEnterpriseFromAgentBank.
func (mr *MockInitialEnterpriseImporterInteractorMockRecorder) UpdateEnterpriseFromAgentBank(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnterpriseFromAgentBank", reflect.TypeOf((*MockInitialEnterpriseImporterInteractor)(nil).UpdateEnterpriseFromAgentBank), input)
}
