// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/task.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/task.go -destination ./mock/mock_interactor/mock_task.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskInteractor is a mock of TaskInteractor interface.
type MockTaskInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockTaskInteractorMockRecorder
}

// MockTaskInteractorMockRecorder is the mock recorder for MockTaskInteractor.
type MockTaskInteractorMockRecorder struct {
	mock *MockTaskInteractor
}

// NewMockTaskInteractor creates a new mock instance.
func NewMockTaskInteractor(ctrl *gomock.Controller) *MockTaskInteractor {
	mock := &MockTaskInteractor{ctrl: ctrl}
	mock.recorder = &MockTaskInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskInteractor) EXPECT() *MockTaskInteractorMockRecorder {
	return m.recorder
}

// BatchNotifyUnwatched mocks base method.
func (m *MockTaskInteractor) BatchNotifyUnwatched(input interactor.BatchNotifyUnwatchedInput) (interactor.BatchNotifyUnwatchedOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchNotifyUnwatched", input)
	ret0, _ := ret[0].(interactor.BatchNotifyUnwatchedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchNotifyUnwatched indicates an expected call of BatchNotifyUnwatched.
func (mr *MockTaskInteractorMockRecorder) BatchNotifyUnwatched(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchNotifyUnwatched", reflect.TypeOf((*MockTaskInteractor)(nil).BatchNotifyUnwatched), input)
}

// CreateEntryTaskFromMatchingJob mocks base method.
func (m *MockTaskInteractor) CreateEntryTaskFromMatchingJob(input interactor.CreateEntryTaskFromMatchingJobInput) (interactor.CreateEntryTaskFromMatchingJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntryTaskFromMatchingJob", input)
	ret0, _ := ret[0].(interactor.CreateEntryTaskFromMatchingJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntryTaskFromMatchingJob indicates an expected call of CreateEntryTaskFromMatchingJob.
func (mr *MockTaskInteractorMockRecorder) CreateEntryTaskFromMatchingJob(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntryTaskFromMatchingJob", reflect.TypeOf((*MockTaskInteractor)(nil).CreateEntryTaskFromMatchingJob), input)
}

// CreateNextSameTaskList mocks base method.
func (m *MockTaskInteractor) CreateNextSameTaskList(input interactor.CreateNextSameTaskListInput) (interactor.CreateNextSameTaskListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNextSameTaskList", input)
	ret0, _ := ret[0].(interactor.CreateNextSameTaskListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNextSameTaskList indicates an expected call of CreateNextSameTaskList.
func (mr *MockTaskInteractorMockRecorder) CreateNextSameTaskList(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNextSameTaskList", reflect.TypeOf((*MockTaskInteractor)(nil).CreateNextSameTaskList), input)
}

// CreateNextTaskAfterAcceptJobOfferPhase mocks base method.
func (m *MockTaskInteractor) CreateNextTaskAfterAcceptJobOfferPhase(input interactor.CreateNextTaskAfterAcceptJobOfferPhaseInput) (interactor.CreateNextTaskAfterAcceptJobOfferPhaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNextTaskAfterAcceptJobOfferPhase", input)
	ret0, _ := ret[0].(interactor.CreateNextTaskAfterAcceptJobOfferPhaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNextTaskAfterAcceptJobOfferPhase indicates an expected call of CreateNextTaskAfterAcceptJobOfferPhase.
func (mr *MockTaskInteractorMockRecorder) CreateNextTaskAfterAcceptJobOfferPhase(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNextTaskAfterAcceptJobOfferPhase", reflect.TypeOf((*MockTaskInteractor)(nil).CreateNextTaskAfterAcceptJobOfferPhase), input)
}

// CreateNextTaskAfterDeclinePhase mocks base method.
func (m *MockTaskInteractor) CreateNextTaskAfterDeclinePhase(input interactor.CreateNextTaskAfterDeclinePhaseInput) (interactor.CreateNextTaskAfterDeclinePhaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNextTaskAfterDeclinePhase", input)
	ret0, _ := ret[0].(interactor.CreateNextTaskAfterDeclinePhaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNextTaskAfterDeclinePhase indicates an expected call of CreateNextTaskAfterDeclinePhase.
func (mr *MockTaskInteractorMockRecorder) CreateNextTaskAfterDeclinePhase(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNextTaskAfterDeclinePhase", reflect.TypeOf((*MockTaskInteractor)(nil).CreateNextTaskAfterDeclinePhase), input)
}

// CreateNextTaskAfterDocumentSelectionPhase mocks base method.
func (m *MockTaskInteractor) CreateNextTaskAfterDocumentSelectionPhase(input interactor.CreateNextTaskAfterDocumentSelectionPhaseInput) (interactor.CreateNextTaskAfterDocumentSelectionPhaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNextTaskAfterDocumentSelectionPhase", input)
	ret0, _ := ret[0].(interactor.CreateNextTaskAfterDocumentSelectionPhaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNextTaskAfterDocumentSelectionPhase indicates an expected call of CreateNextTaskAfterDocumentSelectionPhase.
func (mr *MockTaskInteractorMockRecorder) CreateNextTaskAfterDocumentSelectionPhase(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNextTaskAfterDocumentSelectionPhase", reflect.TypeOf((*MockTaskInteractor)(nil).CreateNextTaskAfterDocumentSelectionPhase), input)
}

// CreateNextTaskAfterEntryPhase mocks base method.
func (m *MockTaskInteractor) CreateNextTaskAfterEntryPhase(input interactor.CreateNextTaskAfterEntryPhaseInput) (interactor.CreateNextTaskAfterEntryPhaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNextTaskAfterEntryPhase", input)
	ret0, _ := ret[0].(interactor.CreateNextTaskAfterEntryPhaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNextTaskAfterEntryPhase indicates an expected call of CreateNextTaskAfterEntryPhase.
func (mr *MockTaskInteractorMockRecorder) CreateNextTaskAfterEntryPhase(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNextTaskAfterEntryPhase", reflect.TypeOf((*MockTaskInteractor)(nil).CreateNextTaskAfterEntryPhase), input)
}

// CreateNextTaskAfterHoldJobOfferPhase mocks base method.
func (m *MockTaskInteractor) CreateNextTaskAfterHoldJobOfferPhase(input interactor.CreateNextTaskAfterHoldJobOfferPhaseInput) (interactor.CreateNextTaskAfterHoldJobOfferPhaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNextTaskAfterHoldJobOfferPhase", input)
	ret0, _ := ret[0].(interactor.CreateNextTaskAfterHoldJobOfferPhaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNextTaskAfterHoldJobOfferPhase indicates an expected call of CreateNextTaskAfterHoldJobOfferPhase.
func (mr *MockTaskInteractorMockRecorder) CreateNextTaskAfterHoldJobOfferPhase(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNextTaskAfterHoldJobOfferPhase", reflect.TypeOf((*MockTaskInteractor)(nil).CreateNextTaskAfterHoldJobOfferPhase), input)
}

// CreateNextTaskAfterSelectionPhase mocks base method.
func (m *MockTaskInteractor) CreateNextTaskAfterSelectionPhase(input interactor.CreateNextTaskAfterSelectionPhaseInput) (interactor.CreateNextTaskAfterSelectionPhaseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNextTaskAfterSelectionPhase", input)
	ret0, _ := ret[0].(interactor.CreateNextTaskAfterSelectionPhaseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNextTaskAfterSelectionPhase indicates an expected call of CreateNextTaskAfterSelectionPhase.
func (mr *MockTaskInteractorMockRecorder) CreateNextTaskAfterSelectionPhase(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNextTaskAfterSelectionPhase", reflect.TypeOf((*MockTaskInteractor)(nil).CreateNextTaskAfterSelectionPhase), input)
}

// CreateTaskInBatchProcessing mocks base method.
func (m *MockTaskInteractor) CreateTaskInBatchProcessing(input interactor.CreateTaskInBatchProcessingInput) (interactor.CreateTaskInBatchProcessingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTaskInBatchProcessing", input)
	ret0, _ := ret[0].(interactor.CreateTaskInBatchProcessingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTaskInBatchProcessing indicates an expected call of CreateTaskInBatchProcessing.
func (mr *MockTaskInteractorMockRecorder) CreateTaskInBatchProcessing(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTaskInBatchProcessing", reflect.TypeOf((*MockTaskInteractor)(nil).CreateTaskInBatchProcessing), input)
}

// DeleteTask mocks base method.
func (m *MockTaskInteractor) DeleteTask(input interactor.DeleteTaskInput) (interactor.DeleteTaskOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", input)
	ret0, _ := ret[0].(interactor.DeleteTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskInteractorMockRecorder) DeleteTask(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskInteractor)(nil).DeleteTask), input)
}

// GetActiveTaskCountByBillingAddressID mocks base method.
func (m *MockTaskInteractor) GetActiveTaskCountByBillingAddressID(input interactor.GetActiveTaskCountByBillingAddressIDInput) (interactor.GetActiveTaskCountByBillingAddressIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveTaskCountByBillingAddressID", input)
	ret0, _ := ret[0].(interactor.GetActiveTaskCountByBillingAddressIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveTaskCountByBillingAddressID indicates an expected call of GetActiveTaskCountByBillingAddressID.
func (mr *MockTaskInteractorMockRecorder) GetActiveTaskCountByBillingAddressID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveTaskCountByBillingAddressID", reflect.TypeOf((*MockTaskInteractor)(nil).GetActiveTaskCountByBillingAddressID), input)
}

// GetActiveTaskCountByJobInformationID mocks base method.
func (m *MockTaskInteractor) GetActiveTaskCountByJobInformationID(input interactor.GetActiveTaskCountByJobInformationIDInput) (interactor.GetActiveTaskCountByJobInformationIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveTaskCountByJobInformationID", input)
	ret0, _ := ret[0].(interactor.GetActiveTaskCountByJobInformationIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveTaskCountByJobInformationID indicates an expected call of GetActiveTaskCountByJobInformationID.
func (mr *MockTaskInteractorMockRecorder) GetActiveTaskCountByJobInformationID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveTaskCountByJobInformationID", reflect.TypeOf((*MockTaskInteractor)(nil).GetActiveTaskCountByJobInformationID), input)
}

// GetActiveTaskCountBySelectionID mocks base method.
func (m *MockTaskInteractor) GetActiveTaskCountBySelectionID(input interactor.GetActiveTaskCountBySelectionIDInput) (interactor.GetActiveTaskCountBySelectionIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveTaskCountBySelectionID", input)
	ret0, _ := ret[0].(interactor.GetActiveTaskCountBySelectionIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveTaskCountBySelectionID indicates an expected call of GetActiveTaskCountBySelectionID.
func (mr *MockTaskInteractorMockRecorder) GetActiveTaskCountBySelectionID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveTaskCountBySelectionID", reflect.TypeOf((*MockTaskInteractor)(nil).GetActiveTaskCountBySelectionID), input)
}

// GetJobSeekerTaskListByAgentStaffID mocks base method.
func (m *MockTaskInteractor) GetJobSeekerTaskListByAgentStaffID(input interactor.GetJobSeekerTaskListByAgentStaffIDInput) (interactor.GetJobSeekerTaskListByAgentStaffIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSeekerTaskListByAgentStaffID", input)
	ret0, _ := ret[0].(interactor.GetJobSeekerTaskListByAgentStaffIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSeekerTaskListByAgentStaffID indicates an expected call of GetJobSeekerTaskListByAgentStaffID.
func (mr *MockTaskInteractorMockRecorder) GetJobSeekerTaskListByAgentStaffID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSeekerTaskListByAgentStaffID", reflect.TypeOf((*MockTaskInteractor)(nil).GetJobSeekerTaskListByAgentStaffID), input)
}

// GetLatestSameTaskListByJobSeekerID mocks base method.
func (m *MockTaskInteractor) GetLatestSameTaskListByJobSeekerID(input interactor.GetLatestSameTaskListByJobSeekerIDInput) (interactor.GetLatestSameTaskListByJobSeekerIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSameTaskListByJobSeekerID", input)
	ret0, _ := ret[0].(interactor.GetLatestSameTaskListByJobSeekerIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSameTaskListByJobSeekerID indicates an expected call of GetLatestSameTaskListByJobSeekerID.
func (mr *MockTaskInteractorMockRecorder) GetLatestSameTaskListByJobSeekerID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSameTaskListByJobSeekerID", reflect.TypeOf((*MockTaskInteractor)(nil).GetLatestSameTaskListByJobSeekerID), input)
}

// GetLatestTaskByJobSeekerIDAndJobInformationID mocks base method.
func (m *MockTaskInteractor) GetLatestTaskByJobSeekerIDAndJobInformationID(input interactor.GetLatestTaskByJobSeekerIDAndJobInformationIDInput) (interactor.GetLatestTaskByJobSeekerIDAndJobInformationIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestTaskByJobSeekerIDAndJobInformationID", input)
	ret0, _ := ret[0].(interactor.GetLatestTaskByJobSeekerIDAndJobInformationIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestTaskByJobSeekerIDAndJobInformationID indicates an expected call of GetLatestTaskByJobSeekerIDAndJobInformationID.
func (mr *MockTaskInteractorMockRecorder) GetLatestTaskByJobSeekerIDAndJobInformationID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTaskByJobSeekerIDAndJobInformationID", reflect.TypeOf((*MockTaskInteractor)(nil).GetLatestTaskByJobSeekerIDAndJobInformationID), input)
}

// GetLatestTaskListByAgentStaffID mocks base method.
func (m *MockTaskInteractor) GetLatestTaskListByAgentStaffID(input interactor.GetLatestTaskListByAgentStaffIDInput) (interactor.GetLatestTaskListByAgentStaffIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestTaskListByAgentStaffID", input)
	ret0, _ := ret[0].(interactor.GetLatestTaskListByAgentStaffIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestTaskListByAgentStaffID indicates an expected call of GetLatestTaskListByAgentStaffID.
func (mr *MockTaskInteractorMockRecorder) GetLatestTaskListByAgentStaffID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTaskListByAgentStaffID", reflect.TypeOf((*MockTaskInteractor)(nil).GetLatestTaskListByAgentStaffID), input)
}

// GetSearchTaskListByAgentIDAndPage mocks base method.
func (m *MockTaskInteractor) GetSearchTaskListByAgentIDAndPage(input interactor.GetSearchTaskListByAgentIDAndPageInput) (interactor.GetSearchTaskListByAgentIDAndPageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchTaskListByAgentIDAndPage", input)
	ret0, _ := ret[0].(interactor.GetSearchTaskListByAgentIDAndPageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchTaskListByAgentIDAndPage indicates an expected call of GetSearchTaskListByAgentIDAndPage.
func (mr *MockTaskInteractorMockRecorder) GetSearchTaskListByAgentIDAndPage(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchTaskListByAgentIDAndPage", reflect.TypeOf((*MockTaskInteractor)(nil).GetSearchTaskListByAgentIDAndPage), input)
}

// GetSoundOutGroupList mocks base method.
func (m *MockTaskInteractor) GetSoundOutGroupList(input interactor.GetSoundOutGroupListInput) (interactor.GetSoundOutGroupListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSoundOutGroupList", input)
	ret0, _ := ret[0].(interactor.GetSoundOutGroupListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSoundOutGroupList indicates an expected call of GetSoundOutGroupList.
func (mr *MockTaskInteractorMockRecorder) GetSoundOutGroupList(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoundOutGroupList", reflect.TypeOf((*MockTaskInteractor)(nil).GetSoundOutGroupList), input)
}

// GetTaskByID mocks base method.
func (m *MockTaskInteractor) GetTaskByID(input interactor.GetTaskByIDInput) (interactor.GetTaskByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", input)
	ret0, _ := ret[0].(interactor.GetTaskByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockTaskInteractorMockRecorder) GetTaskByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockTaskInteractor)(nil).GetTaskByID), input)
}

// GetTaskGroupByID mocks base method.
func (m *MockTaskInteractor) GetTaskGroupByID(input interactor.GetTaskGroupByIDInput) (interactor.GetTaskGroupByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskGroupByID", input)
	ret0, _ := ret[0].(interactor.GetTaskGroupByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskGroupByID indicates an expected call of GetTaskGroupByID.
func (mr *MockTaskInteractorMockRecorder) GetTaskGroupByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskGroupByID", reflect.TypeOf((*MockTaskInteractor)(nil).GetTaskGroupByID), input)
}

// GetTaskListAfterEntryByJobSeekerID mocks base method.
func (m *MockTaskInteractor) GetTaskListAfterEntryByJobSeekerID(input interactor.GetTaskListAfterEntryByJobSeekerIDInput) (interactor.GetTaskListAfterEntryByJobSeekerIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskListAfterEntryByJobSeekerID", input)
	ret0, _ := ret[0].(interactor.GetTaskListAfterEntryByJobSeekerIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskListAfterEntryByJobSeekerID indicates an expected call of GetTaskListAfterEntryByJobSeekerID.
func (mr *MockTaskInteractorMockRecorder) GetTaskListAfterEntryByJobSeekerID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskListAfterEntryByJobSeekerID", reflect.TypeOf((*MockTaskInteractor)(nil).GetTaskListAfterEntryByJobSeekerID), input)
}

// GetTaskListByAgentIDAndPage mocks base method.
func (m *MockTaskInteractor) GetTaskListByAgentIDAndPage(input interactor.GetTaskListByAgentIDAndPageInput) (interactor.GetTaskListByAgentIDAndPageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskListByAgentIDAndPage", input)
	ret0, _ := ret[0].(interactor.GetTaskListByAgentIDAndPageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskListByAgentIDAndPage indicates an expected call of GetTaskListByAgentIDAndPage.
func (mr *MockTaskInteractorMockRecorder) GetTaskListByAgentIDAndPage(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskListByAgentIDAndPage", reflect.TypeOf((*MockTaskInteractor)(nil).GetTaskListByAgentIDAndPage), input)
}

// SoundOutForJobInformation mocks base method.
func (m *MockTaskInteractor) SoundOutForJobInformation(input interactor.SoundOutForJobInformationInput) (interactor.SoundOutForJobInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoundOutForJobInformation", input)
	ret0, _ := ret[0].(interactor.SoundOutForJobInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoundOutForJobInformation indicates an expected call of SoundOutForJobInformation.
func (mr *MockTaskInteractorMockRecorder) SoundOutForJobInformation(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoundOutForJobInformation", reflect.TypeOf((*MockTaskInteractor)(nil).SoundOutForJobInformation), input)
}

// SoundOutForMaskResume mocks base method.
func (m *MockTaskInteractor) SoundOutForMaskResume(input interactor.SoundOutForMaskResumeInput) (interactor.SoundOutForMaskResumeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoundOutForMaskResume", input)
	ret0, _ := ret[0].(interactor.SoundOutForMaskResumeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoundOutForMaskResume indicates an expected call of SoundOutForMaskResume.
func (mr *MockTaskInteractorMockRecorder) SoundOutForMaskResume(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoundOutForMaskResume", reflect.TypeOf((*MockTaskInteractor)(nil).SoundOutForMaskResume), input)
}

// SoundOutForRequestShareJobInformation mocks base method.
func (m *MockTaskInteractor) SoundOutForRequestShareJobInformation(input interactor.SoundOutForRequestShareJobInformationInput) (interactor.SoundOutForRequestShareJobInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoundOutForRequestShareJobInformation", input)
	ret0, _ := ret[0].(interactor.SoundOutForRequestShareJobInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoundOutForRequestShareJobInformation indicates an expected call of SoundOutForRequestShareJobInformation.
func (mr *MockTaskInteractorMockRecorder) SoundOutForRequestShareJobInformation(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoundOutForRequestShareJobInformation", reflect.TypeOf((*MockTaskInteractor)(nil).SoundOutForRequestShareJobInformation), input)
}

// SoundOutForRequestShareJobSeeker mocks base method.
func (m *MockTaskInteractor) SoundOutForRequestShareJobSeeker(input interactor.SoundOutForRequestShareJobSeekerInput) (interactor.SoundOutForRequestShareJobSeekerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoundOutForRequestShareJobSeeker", input)
	ret0, _ := ret[0].(interactor.SoundOutForRequestShareJobSeekerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoundOutForRequestShareJobSeeker indicates an expected call of SoundOutForRequestShareJobSeeker.
func (mr *MockTaskInteractorMockRecorder) SoundOutForRequestShareJobSeeker(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoundOutForRequestShareJobSeeker", reflect.TypeOf((*MockTaskInteractor)(nil).SoundOutForRequestShareJobSeeker), input)
}

// SoundOutForSendJobListing mocks base method.
func (m *MockTaskInteractor) SoundOutForSendJobListing(input interactor.SoundOutForSendJobListingInput) (interactor.SoundOutForSendJobListingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoundOutForSendJobListing", input)
	ret0, _ := ret[0].(interactor.SoundOutForSendJobListingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoundOutForSendJobListing indicates an expected call of SoundOutForSendJobListing.
func (mr *MockTaskInteractorMockRecorder) SoundOutForSendJobListing(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoundOutForSendJobListing", reflect.TypeOf((*MockTaskInteractor)(nil).SoundOutForSendJobListing), input)
}

// SoundOutGroupForJobInformation mocks base method.
func (m *MockTaskInteractor) SoundOutGroupForJobInformation(input interactor.SoundOutGroupForJobInformationInput) (interactor.SoundOutGroupForJobInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoundOutGroupForJobInformation", input)
	ret0, _ := ret[0].(interactor.SoundOutGroupForJobInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoundOutGroupForJobInformation indicates an expected call of SoundOutGroupForJobInformation.
func (mr *MockTaskInteractorMockRecorder) SoundOutGroupForJobInformation(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoundOutGroupForJobInformation", reflect.TypeOf((*MockTaskInteractor)(nil).SoundOutGroupForJobInformation), input)
}

// SoundOutGroupForSendJobListing mocks base method.
func (m *MockTaskInteractor) SoundOutGroupForSendJobListing(input interactor.SoundOutGroupForSendJobListingInput) (interactor.SoundOutGroupForSendJobListingOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoundOutGroupForSendJobListing", input)
	ret0, _ := ret[0].(interactor.SoundOutGroupForSendJobListingOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SoundOutGroupForSendJobListing indicates an expected call of SoundOutGroupForSendJobListing.
func (mr *MockTaskInteractorMockRecorder) SoundOutGroupForSendJobListing(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoundOutGroupForSendJobListing", reflect.TypeOf((*MockTaskInteractor)(nil).SoundOutGroupForSendJobListing), input)
}

// UpdateCALastRequest mocks base method.
func (m *MockTaskInteractor) UpdateCALastRequest(input interactor.UpdateCALastRequestInput) (interactor.UpdateCALastRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCALastRequest", input)
	ret0, _ := ret[0].(interactor.UpdateCALastRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCALastRequest indicates an expected call of UpdateCALastRequest.
func (mr *MockTaskInteractorMockRecorder) UpdateCALastRequest(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCALastRequest", reflect.TypeOf((*MockTaskInteractor)(nil).UpdateCALastRequest), input)
}

// UpdateCALastWatched mocks base method.
func (m *MockTaskInteractor) UpdateCALastWatched(input interactor.UpdateCALastWatchedInput) (interactor.UpdateCALastWatchedOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCALastWatched", input)
	ret0, _ := ret[0].(interactor.UpdateCALastWatchedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCALastWatched indicates an expected call of UpdateCALastWatched.
func (mr *MockTaskInteractorMockRecorder) UpdateCALastWatched(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCALastWatched", reflect.TypeOf((*MockTaskInteractor)(nil).UpdateCALastWatched), input)
}

// UpdateExternalJob mocks base method.
func (m *MockTaskInteractor) UpdateExternalJob(input interactor.UpdateExternalJobInput) (interactor.UpdateExternalJobOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExternalJob", input)
	ret0, _ := ret[0].(interactor.UpdateExternalJobOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExternalJob indicates an expected call of UpdateExternalJob.
func (mr *MockTaskInteractorMockRecorder) UpdateExternalJob(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExternalJob", reflect.TypeOf((*MockTaskInteractor)(nil).UpdateExternalJob), input)
}

// UpdateLastRequest mocks base method.
func (m *MockTaskInteractor) UpdateLastRequest(input interactor.UpdateLastRequestInput) (interactor.UpdateLastRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastRequest", input)
	ret0, _ := ret[0].(interactor.UpdateLastRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLastRequest indicates an expected call of UpdateLastRequest.
func (mr *MockTaskInteractorMockRecorder) UpdateLastRequest(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastRequest", reflect.TypeOf((*MockTaskInteractor)(nil).UpdateLastRequest), input)
}

// UpdateRALastRequest mocks base method.
func (m *MockTaskInteractor) UpdateRALastRequest(input interactor.UpdateRALastRequestInput) (interactor.UpdateRALastRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRALastRequest", input)
	ret0, _ := ret[0].(interactor.UpdateRALastRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRALastRequest indicates an expected call of UpdateRALastRequest.
func (mr *MockTaskInteractorMockRecorder) UpdateRALastRequest(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRALastRequest", reflect.TypeOf((*MockTaskInteractor)(nil).UpdateRALastRequest), input)
}

// UpdateRALastWatched mocks base method.
func (m *MockTaskInteractor) UpdateRALastWatched(input interactor.UpdateRALastWatchedInput) (interactor.UpdateRALastWatchedOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRALastWatched", input)
	ret0, _ := ret[0].(interactor.UpdateRALastWatchedOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRALastWatched indicates an expected call of UpdateRALastWatched.
func (mr *MockTaskInteractorMockRecorder) UpdateRALastWatched(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRALastWatched", reflect.TypeOf((*MockTaskInteractor)(nil).UpdateRALastWatched), input)
}

// UpdateTaskGroupDocument mocks base method.
func (m *MockTaskInteractor) UpdateTaskGroupDocument(input interactor.UpdateTaskGroupDocumentInput) (interactor.UpdateTaskGroupDocumentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskGroupDocument", input)
	ret0, _ := ret[0].(interactor.UpdateTaskGroupDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTaskGroupDocument indicates an expected call of UpdateTaskGroupDocument.
func (mr *MockTaskInteractorMockRecorder) UpdateTaskGroupDocument(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskGroupDocument", reflect.TypeOf((*MockTaskInteractor)(nil).UpdateTaskGroupDocument), input)
}
