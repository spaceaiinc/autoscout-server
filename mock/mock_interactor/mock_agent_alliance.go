// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/agent_alliance.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/agent_alliance.go -destination ./mock/mock_interactor/mock_agent_alliance.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentAllianceInteractor is a mock of AgentAllianceInteractor interface.
type MockAgentAllianceInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockAgentAllianceInteractorMockRecorder
}

// MockAgentAllianceInteractorMockRecorder is the mock recorder for MockAgentAllianceInteractor.
type MockAgentAllianceInteractorMockRecorder struct {
	mock *MockAgentAllianceInteractor
}

// NewMockAgentAllianceInteractor creates a new mock instance.
func NewMockAgentAllianceInteractor(ctrl *gomock.Controller) *MockAgentAllianceInteractor {
	mock := &MockAgentAllianceInteractor{ctrl: ctrl}
	mock.recorder = &MockAgentAllianceInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentAllianceInteractor) EXPECT() *MockAgentAllianceInteractorMockRecorder {
	return m.recorder
}

// CheckAnyAllianceWithoutApplication mocks base method.
func (m *MockAgentAllianceInteractor) CheckAnyAllianceWithoutApplication(input interactor.CheckAnyAllianceWithoutApplicationInput) (interactor.CheckAnyAllianceWithoutApplicationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAnyAllianceWithoutApplication", input)
	ret0, _ := ret[0].(interactor.CheckAnyAllianceWithoutApplicationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAnyAllianceWithoutApplication indicates an expected call of CheckAnyAllianceWithoutApplication.
func (mr *MockAgentAllianceInteractorMockRecorder) CheckAnyAllianceWithoutApplication(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAnyAllianceWithoutApplication", reflect.TypeOf((*MockAgentAllianceInteractor)(nil).CheckAnyAllianceWithoutApplication), input)
}

// GetAgentAllianceByID mocks base method.
func (m *MockAgentAllianceInteractor) GetAgentAllianceByID(input interactor.GetAgentAllianceByIDInput) (interactor.GetAgentAllianceByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentAllianceByID", input)
	ret0, _ := ret[0].(interactor.GetAgentAllianceByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentAllianceByID indicates an expected call of GetAgentAllianceByID.
func (mr *MockAgentAllianceInteractorMockRecorder) GetAgentAllianceByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentAllianceByID", reflect.TypeOf((*MockAgentAllianceInteractor)(nil).GetAgentAllianceByID), input)
}

// GetAgentAllianceListByAgentID mocks base method.
func (m *MockAgentAllianceInteractor) GetAgentAllianceListByAgentID(input interactor.GetAgentAllianceListByAgentIDInput) (interactor.GetAgentAllianceListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentAllianceListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetAgentAllianceListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentAllianceListByAgentID indicates an expected call of GetAgentAllianceListByAgentID.
func (mr *MockAgentAllianceInteractorMockRecorder) GetAgentAllianceListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentAllianceListByAgentID", reflect.TypeOf((*MockAgentAllianceInteractor)(nil).GetAgentAllianceListByAgentID), input)
}

// RequestAlliance mocks base method.
func (m *MockAgentAllianceInteractor) RequestAlliance(input interactor.RequestAllianceInput) (interactor.RequestAllianceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestAlliance", input)
	ret0, _ := ret[0].(interactor.RequestAllianceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestAlliance indicates an expected call of RequestAlliance.
func (mr *MockAgentAllianceInteractorMockRecorder) RequestAlliance(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAlliance", reflect.TypeOf((*MockAgentAllianceInteractor)(nil).RequestAlliance), input)
}

// UpdateAgentAllianceCancelRequest mocks base method.
func (m *MockAgentAllianceInteractor) UpdateAgentAllianceCancelRequest(input interactor.UpdateAgentAllianceCancelRequestInput) (interactor.UpdateAgentAllianceCancelRequestOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentAllianceCancelRequest", input)
	ret0, _ := ret[0].(interactor.UpdateAgentAllianceCancelRequestOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentAllianceCancelRequest indicates an expected call of UpdateAgentAllianceCancelRequest.
func (mr *MockAgentAllianceInteractorMockRecorder) UpdateAgentAllianceCancelRequest(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentAllianceCancelRequest", reflect.TypeOf((*MockAgentAllianceInteractor)(nil).UpdateAgentAllianceCancelRequest), input)
}

// UpdateOrCreateAgentAllianceList mocks base method.
func (m *MockAgentAllianceInteractor) UpdateOrCreateAgentAllianceList(input interactor.UpdateOrCreateAgentAllianceListInput) (interactor.UpdateOrCreateAgentAllianceListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateAgentAllianceList", input)
	ret0, _ := ret[0].(interactor.UpdateOrCreateAgentAllianceListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrCreateAgentAllianceList indicates an expected call of UpdateOrCreateAgentAllianceList.
func (mr *MockAgentAllianceInteractorMockRecorder) UpdateOrCreateAgentAllianceList(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateAgentAllianceList", reflect.TypeOf((*MockAgentAllianceInteractor)(nil).UpdateOrCreateAgentAllianceList), input)
}
