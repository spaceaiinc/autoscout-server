// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/billing_address.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/billing_address.go -destination ./mock/mock_interactor/mock_billing_address.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockBillingAddressInteractor is a mock of BillingAddressInteractor interface.
type MockBillingAddressInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockBillingAddressInteractorMockRecorder
}

// MockBillingAddressInteractorMockRecorder is the mock recorder for MockBillingAddressInteractor.
type MockBillingAddressInteractorMockRecorder struct {
	mock *MockBillingAddressInteractor
}

// NewMockBillingAddressInteractor creates a new mock instance.
func NewMockBillingAddressInteractor(ctrl *gomock.Controller) *MockBillingAddressInteractor {
	mock := &MockBillingAddressInteractor{ctrl: ctrl}
	mock.recorder = &MockBillingAddressInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingAddressInteractor) EXPECT() *MockBillingAddressInteractorMockRecorder {
	return m.recorder
}

// CreateBillingAddress mocks base method.
func (m *MockBillingAddressInteractor) CreateBillingAddress(input interactor.CreateBillingAddressInput) (interactor.CreateBillingAddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBillingAddress", input)
	ret0, _ := ret[0].(interactor.CreateBillingAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBillingAddress indicates an expected call of CreateBillingAddress.
func (mr *MockBillingAddressInteractorMockRecorder) CreateBillingAddress(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBillingAddress", reflect.TypeOf((*MockBillingAddressInteractor)(nil).CreateBillingAddress), input)
}

// DeleteBillingAddress mocks base method.
func (m *MockBillingAddressInteractor) DeleteBillingAddress(input interactor.DeleteBillingAddressInput) (interactor.DeleteBillingAddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBillingAddress", input)
	ret0, _ := ret[0].(interactor.DeleteBillingAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBillingAddress indicates an expected call of DeleteBillingAddress.
func (mr *MockBillingAddressInteractorMockRecorder) DeleteBillingAddress(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBillingAddress", reflect.TypeOf((*MockBillingAddressInteractor)(nil).DeleteBillingAddress), input)
}

// GetAllBillingAddress mocks base method.
func (m *MockBillingAddressInteractor) GetAllBillingAddress() (interactor.GetAllBillingAddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBillingAddress")
	ret0, _ := ret[0].(interactor.GetAllBillingAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBillingAddress indicates an expected call of GetAllBillingAddress.
func (mr *MockBillingAddressInteractorMockRecorder) GetAllBillingAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBillingAddress", reflect.TypeOf((*MockBillingAddressInteractor)(nil).GetAllBillingAddress))
}

// GetBillingAddressByID mocks base method.
func (m *MockBillingAddressInteractor) GetBillingAddressByID(input interactor.GetBillingAddressByIDInput) (interactor.GetBillingAddressByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingAddressByID", input)
	ret0, _ := ret[0].(interactor.GetBillingAddressByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingAddressByID indicates an expected call of GetBillingAddressByID.
func (mr *MockBillingAddressInteractorMockRecorder) GetBillingAddressByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingAddressByID", reflect.TypeOf((*MockBillingAddressInteractor)(nil).GetBillingAddressByID), input)
}

// GetBillingAddressListByEnterpriseID mocks base method.
func (m *MockBillingAddressInteractor) GetBillingAddressListByEnterpriseID(input interactor.GetBillingAddressListByEnterpriseIDInput) (interactor.GetBillingAddressListByEnterpriseIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingAddressListByEnterpriseID", input)
	ret0, _ := ret[0].(interactor.GetBillingAddressListByEnterpriseIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingAddressListByEnterpriseID indicates an expected call of GetBillingAddressListByEnterpriseID.
func (mr *MockBillingAddressInteractorMockRecorder) GetBillingAddressListByEnterpriseID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingAddressListByEnterpriseID", reflect.TypeOf((*MockBillingAddressInteractor)(nil).GetBillingAddressListByEnterpriseID), input)
}

// GetBillingAddressListByPageAndAgentID mocks base method.
func (m *MockBillingAddressInteractor) GetBillingAddressListByPageAndAgentID(input interactor.GetBillingAddressListByPageAndAgentIDInput) (interactor.GetBillingAddressListByPageAndAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillingAddressListByPageAndAgentID", input)
	ret0, _ := ret[0].(interactor.GetBillingAddressListByPageAndAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillingAddressListByPageAndAgentID indicates an expected call of GetBillingAddressListByPageAndAgentID.
func (mr *MockBillingAddressInteractorMockRecorder) GetBillingAddressListByPageAndAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillingAddressListByPageAndAgentID", reflect.TypeOf((*MockBillingAddressInteractor)(nil).GetBillingAddressListByPageAndAgentID), input)
}

// GetSearchBillingAddressListByPageAndAgentID mocks base method.
func (m *MockBillingAddressInteractor) GetSearchBillingAddressListByPageAndAgentID(input interactor.GetSearchBillingAddressListByPageAndAgentIDInput) (interactor.GetSearchBillingAddressListByPageAndAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchBillingAddressListByPageAndAgentID", input)
	ret0, _ := ret[0].(interactor.GetSearchBillingAddressListByPageAndAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchBillingAddressListByPageAndAgentID indicates an expected call of GetSearchBillingAddressListByPageAndAgentID.
func (mr *MockBillingAddressInteractorMockRecorder) GetSearchBillingAddressListByPageAndAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchBillingAddressListByPageAndAgentID", reflect.TypeOf((*MockBillingAddressInteractor)(nil).GetSearchBillingAddressListByPageAndAgentID), input)
}

// UpdateBillingAddress mocks base method.
func (m *MockBillingAddressInteractor) UpdateBillingAddress(input interactor.UpdateBillingAddressInput) (interactor.UpdateBillingAddressOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillingAddress", input)
	ret0, _ := ret[0].(interactor.UpdateBillingAddressOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBillingAddress indicates an expected call of UpdateBillingAddress.
func (mr *MockBillingAddressInteractorMockRecorder) UpdateBillingAddress(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillingAddress", reflect.TypeOf((*MockBillingAddressInteractor)(nil).UpdateBillingAddress), input)
}

// UpdateBillingAddressStaffIDByIDListAtOnce mocks base method.
func (m *MockBillingAddressInteractor) UpdateBillingAddressStaffIDByIDListAtOnce(input interactor.UpdateBillingAddressAgentStaffInput) (interactor.UpdateBillingAddressAgentStaffOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillingAddressStaffIDByIDListAtOnce", input)
	ret0, _ := ret[0].(interactor.UpdateBillingAddressAgentStaffOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBillingAddressStaffIDByIDListAtOnce indicates an expected call of UpdateBillingAddressStaffIDByIDListAtOnce.
func (mr *MockBillingAddressInteractorMockRecorder) UpdateBillingAddressStaffIDByIDListAtOnce(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillingAddressStaffIDByIDListAtOnce", reflect.TypeOf((*MockBillingAddressInteractor)(nil).UpdateBillingAddressStaffIDByIDListAtOnce), input)
}
