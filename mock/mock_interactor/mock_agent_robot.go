// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/agent_robot.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/agent_robot.go -destination ./mock/mock_interactor/mock_agent_robot.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentRobotInteractor is a mock of AgentRobotInteractor interface.
type MockAgentRobotInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockAgentRobotInteractorMockRecorder
}

// MockAgentRobotInteractorMockRecorder is the mock recorder for MockAgentRobotInteractor.
type MockAgentRobotInteractorMockRecorder struct {
	mock *MockAgentRobotInteractor
}

// NewMockAgentRobotInteractor creates a new mock instance.
func NewMockAgentRobotInteractor(ctrl *gomock.Controller) *MockAgentRobotInteractor {
	mock := &MockAgentRobotInteractor{ctrl: ctrl}
	mock.recorder = &MockAgentRobotInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentRobotInteractor) EXPECT() *MockAgentRobotInteractorMockRecorder {
	return m.recorder
}

// CreateAgentRobot mocks base method.
func (m *MockAgentRobotInteractor) CreateAgentRobot(input interactor.CreateAgentRobotInput) (interactor.CreateAgentRobotByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentRobot", input)
	ret0, _ := ret[0].(interactor.CreateAgentRobotByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgentRobot indicates an expected call of CreateAgentRobot.
func (mr *MockAgentRobotInteractorMockRecorder) CreateAgentRobot(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentRobot", reflect.TypeOf((*MockAgentRobotInteractor)(nil).CreateAgentRobot), input)
}

// DeleteAgentRobot mocks base method.
func (m *MockAgentRobotInteractor) DeleteAgentRobot(input interactor.DeleteAgentRobotInput) (interactor.DeleteAgentRobotByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgentRobot", input)
	ret0, _ := ret[0].(interactor.DeleteAgentRobotByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAgentRobot indicates an expected call of DeleteAgentRobot.
func (mr *MockAgentRobotInteractorMockRecorder) DeleteAgentRobot(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentRobot", reflect.TypeOf((*MockAgentRobotInteractor)(nil).DeleteAgentRobot), input)
}

// GetAgentRobotByID mocks base method.
func (m *MockAgentRobotInteractor) GetAgentRobotByID(input interactor.GetAgentRobotByIDInput) (interactor.GetAgentRobotByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentRobotByID", input)
	ret0, _ := ret[0].(interactor.GetAgentRobotByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentRobotByID indicates an expected call of GetAgentRobotByID.
func (mr *MockAgentRobotInteractorMockRecorder) GetAgentRobotByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentRobotByID", reflect.TypeOf((*MockAgentRobotInteractor)(nil).GetAgentRobotByID), input)
}

// GetAgentRobotListByAgentID mocks base method.
func (m *MockAgentRobotInteractor) GetAgentRobotListByAgentID(input interactor.GetAgentRobotListByAgentIDInput) (interactor.GetAgentRobotListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentRobotListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetAgentRobotListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentRobotListByAgentID indicates an expected call of GetAgentRobotListByAgentID.
func (mr *MockAgentRobotInteractorMockRecorder) GetAgentRobotListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentRobotListByAgentID", reflect.TypeOf((*MockAgentRobotInteractor)(nil).GetAgentRobotListByAgentID), input)
}

// UpdateAgentRobot mocks base method.
func (m *MockAgentRobotInteractor) UpdateAgentRobot(input interactor.UpdateAgentRobotInput) (interactor.UpdateAgentRobotByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentRobot", input)
	ret0, _ := ret[0].(interactor.UpdateAgentRobotByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentRobot indicates an expected call of UpdateAgentRobot.
func (mr *MockAgentRobotInteractorMockRecorder) UpdateAgentRobot(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentRobot", reflect.TypeOf((*MockAgentRobotInteractor)(nil).UpdateAgentRobot), input)
}
