// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/enterprise_profile.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/enterprise_profile.go -destination ./mock/mock_interactor/mock_enterprise_profile.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockEnterpriseProfileInteractor is a mock of EnterpriseProfileInteractor interface.
type MockEnterpriseProfileInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockEnterpriseProfileInteractorMockRecorder
}

// MockEnterpriseProfileInteractorMockRecorder is the mock recorder for MockEnterpriseProfileInteractor.
type MockEnterpriseProfileInteractorMockRecorder struct {
	mock *MockEnterpriseProfileInteractor
}

// NewMockEnterpriseProfileInteractor creates a new mock instance.
func NewMockEnterpriseProfileInteractor(ctrl *gomock.Controller) *MockEnterpriseProfileInteractor {
	mock := &MockEnterpriseProfileInteractor{ctrl: ctrl}
	mock.recorder = &MockEnterpriseProfileInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnterpriseProfileInteractor) EXPECT() *MockEnterpriseProfileInteractorMockRecorder {
	return m.recorder
}

// CreateEnterpriseActivity mocks base method.
func (m *MockEnterpriseProfileInteractor) CreateEnterpriseActivity(input interactor.CreateEnterpriseActivityInput) (interactor.CreateEnterpriseActivityOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnterpriseActivity", input)
	ret0, _ := ret[0].(interactor.CreateEnterpriseActivityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnterpriseActivity indicates an expected call of CreateEnterpriseActivity.
func (mr *MockEnterpriseProfileInteractorMockRecorder) CreateEnterpriseActivity(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnterpriseActivity", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).CreateEnterpriseActivity), input)
}

// CreateEnterpriseProfile mocks base method.
func (m *MockEnterpriseProfileInteractor) CreateEnterpriseProfile(input interactor.CreateEnterpriseProfileInput) (interactor.CreateEnterpriseProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnterpriseProfile", input)
	ret0, _ := ret[0].(interactor.CreateEnterpriseProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnterpriseProfile indicates an expected call of CreateEnterpriseProfile.
func (mr *MockEnterpriseProfileInteractorMockRecorder) CreateEnterpriseProfile(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnterpriseProfile", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).CreateEnterpriseProfile), input)
}

// CreateEnterpriseReferenceMaterial mocks base method.
func (m *MockEnterpriseProfileInteractor) CreateEnterpriseReferenceMaterial(input interactor.CreateEnterpriseReferenceMaterialInput) (interactor.CreateEnterpriseReferenceMaterialOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnterpriseReferenceMaterial", input)
	ret0, _ := ret[0].(interactor.CreateEnterpriseReferenceMaterialOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnterpriseReferenceMaterial indicates an expected call of CreateEnterpriseReferenceMaterial.
func (mr *MockEnterpriseProfileInteractorMockRecorder) CreateEnterpriseReferenceMaterial(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnterpriseReferenceMaterial", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).CreateEnterpriseReferenceMaterial), input)
}

// DeleteEnterpriseProfile mocks base method.
func (m *MockEnterpriseProfileInteractor) DeleteEnterpriseProfile(input interactor.DeleteEnterpriseProfileInput) (interactor.DeleteEnterpriseProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnterpriseProfile", input)
	ret0, _ := ret[0].(interactor.DeleteEnterpriseProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnterpriseProfile indicates an expected call of DeleteEnterpriseProfile.
func (mr *MockEnterpriseProfileInteractorMockRecorder) DeleteEnterpriseProfile(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnterpriseProfile", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).DeleteEnterpriseProfile), input)
}

// DeleteEnterpriseReferenceMaterial mocks base method.
func (m *MockEnterpriseProfileInteractor) DeleteEnterpriseReferenceMaterial(input interactor.DeleteEnterpriseReferenceMaterialInput) (interactor.DeleteEnterpriseReferenceMaterialOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnterpriseReferenceMaterial", input)
	ret0, _ := ret[0].(interactor.DeleteEnterpriseReferenceMaterialOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnterpriseReferenceMaterial indicates an expected call of DeleteEnterpriseReferenceMaterial.
func (mr *MockEnterpriseProfileInteractorMockRecorder) DeleteEnterpriseReferenceMaterial(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnterpriseReferenceMaterial", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).DeleteEnterpriseReferenceMaterial), input)
}

// ExportEnterpriseCSV mocks base method.
func (m *MockEnterpriseProfileInteractor) ExportEnterpriseCSV(input interactor.ExportEnterpriseCSVInput) (interactor.ExportEnterpriseCSVOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportEnterpriseCSV", input)
	ret0, _ := ret[0].(interactor.ExportEnterpriseCSVOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportEnterpriseCSV indicates an expected call of ExportEnterpriseCSV.
func (mr *MockEnterpriseProfileInteractorMockRecorder) ExportEnterpriseCSV(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportEnterpriseCSV", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).ExportEnterpriseCSV), input)
}

// GetEnterpriseByID mocks base method.
func (m *MockEnterpriseProfileInteractor) GetEnterpriseByID(input interactor.GetEnterpriseByIDInput) (interactor.GetEnterpriseByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterpriseByID", input)
	ret0, _ := ret[0].(interactor.GetEnterpriseByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnterpriseByID indicates an expected call of GetEnterpriseByID.
func (mr *MockEnterpriseProfileInteractorMockRecorder) GetEnterpriseByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterpriseByID", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).GetEnterpriseByID), input)
}

// GetEnterpriseListByAgentID mocks base method.
func (m *MockEnterpriseProfileInteractor) GetEnterpriseListByAgentID(input interactor.GetEnterpriseListByAgentIDInput) (interactor.GetEnterpriseListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterpriseListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetEnterpriseListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnterpriseListByAgentID indicates an expected call of GetEnterpriseListByAgentID.
func (mr *MockEnterpriseProfileInteractorMockRecorder) GetEnterpriseListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterpriseListByAgentID", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).GetEnterpriseListByAgentID), input)
}

// GetEnterpriseListByAgentIDAndPage mocks base method.
func (m *MockEnterpriseProfileInteractor) GetEnterpriseListByAgentIDAndPage(input interactor.GetEnterpriseListByAgentIDAndPageInput) (interactor.GetEnterpriseListByAgentIDAndPageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterpriseListByAgentIDAndPage", input)
	ret0, _ := ret[0].(interactor.GetEnterpriseListByAgentIDAndPageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnterpriseListByAgentIDAndPage indicates an expected call of GetEnterpriseListByAgentIDAndPage.
func (mr *MockEnterpriseProfileInteractorMockRecorder) GetEnterpriseListByAgentIDAndPage(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterpriseListByAgentIDAndPage", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).GetEnterpriseListByAgentIDAndPage), input)
}

// GetEnterpriseListByAgentStaffID mocks base method.
func (m *MockEnterpriseProfileInteractor) GetEnterpriseListByAgentStaffID(input interactor.GetEnterpriseListByAgentStaffIDInput) (interactor.GetEnterpriseListByAgentStaffIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterpriseListByAgentStaffID", input)
	ret0, _ := ret[0].(interactor.GetEnterpriseListByAgentStaffIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnterpriseListByAgentStaffID indicates an expected call of GetEnterpriseListByAgentStaffID.
func (mr *MockEnterpriseProfileInteractorMockRecorder) GetEnterpriseListByAgentStaffID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterpriseListByAgentStaffID", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).GetEnterpriseListByAgentStaffID), input)
}

// GetEnterpriseReferenceMaterialByEnterpriseID mocks base method.
func (m *MockEnterpriseProfileInteractor) GetEnterpriseReferenceMaterialByEnterpriseID(input interactor.GetEnterpriseReferenceMaterialByEnterpriseIDInput) (interactor.GetEnterpriseReferenceMaterialByEnterpriseIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterpriseReferenceMaterialByEnterpriseID", input)
	ret0, _ := ret[0].(interactor.GetEnterpriseReferenceMaterialByEnterpriseIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnterpriseReferenceMaterialByEnterpriseID indicates an expected call of GetEnterpriseReferenceMaterialByEnterpriseID.
func (mr *MockEnterpriseProfileInteractorMockRecorder) GetEnterpriseReferenceMaterialByEnterpriseID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterpriseReferenceMaterialByEnterpriseID", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).GetEnterpriseReferenceMaterialByEnterpriseID), input)
}

// GetInitialEnterprise mocks base method.
func (m *MockEnterpriseProfileInteractor) GetInitialEnterprise(input interactor.GetInitialEnterpriseInput) (interactor.GetInitialEnterpriseOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitialEnterprise", input)
	ret0, _ := ret[0].(interactor.GetInitialEnterpriseOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInitialEnterprise indicates an expected call of GetInitialEnterprise.
func (mr *MockEnterpriseProfileInteractorMockRecorder) GetInitialEnterprise(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitialEnterprise", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).GetInitialEnterprise), input)
}

// GetSearchEnterpriseListByAgentID mocks base method.
func (m *MockEnterpriseProfileInteractor) GetSearchEnterpriseListByAgentID(input interactor.GetSearchEnterpriseListByAgentIDInput) (interactor.GetSearchEnterpriseListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchEnterpriseListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetSearchEnterpriseListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchEnterpriseListByAgentID indicates an expected call of GetSearchEnterpriseListByAgentID.
func (mr *MockEnterpriseProfileInteractorMockRecorder) GetSearchEnterpriseListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchEnterpriseListByAgentID", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).GetSearchEnterpriseListByAgentID), input)
}

// ImportEnterpriseCSV mocks base method.
func (m *MockEnterpriseProfileInteractor) ImportEnterpriseCSV(input interactor.ImportEnterpriseCSVInput) (interactor.ImportEnterpriseCSVOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportEnterpriseCSV", input)
	ret0, _ := ret[0].(interactor.ImportEnterpriseCSVOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportEnterpriseCSV indicates an expected call of ImportEnterpriseCSV.
func (mr *MockEnterpriseProfileInteractorMockRecorder) ImportEnterpriseCSV(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportEnterpriseCSV", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).ImportEnterpriseCSV), input)
}

// ImportEnterpriseCSVForAgentBank mocks base method.
func (m *MockEnterpriseProfileInteractor) ImportEnterpriseCSVForAgentBank(input interactor.ImportEnterpriseCSVForAgentBankInput) (interactor.ImportEnterpriseCSVForAgentBankOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportEnterpriseCSVForAgentBank", input)
	ret0, _ := ret[0].(interactor.ImportEnterpriseCSVForAgentBankOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportEnterpriseCSVForAgentBank indicates an expected call of ImportEnterpriseCSVForAgentBank.
func (mr *MockEnterpriseProfileInteractorMockRecorder) ImportEnterpriseCSVForAgentBank(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportEnterpriseCSVForAgentBank", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).ImportEnterpriseCSVForAgentBank), input)
}

// ImportEnterpriseCSVForCircus mocks base method.
func (m *MockEnterpriseProfileInteractor) ImportEnterpriseCSVForCircus(input interactor.ImportEnterpriseCSVForCircusInput) (interactor.ImportEnterpriseCSVForCircusOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportEnterpriseCSVForCircus", input)
	ret0, _ := ret[0].(interactor.ImportEnterpriseCSVForCircusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportEnterpriseCSVForCircus indicates an expected call of ImportEnterpriseCSVForCircus.
func (mr *MockEnterpriseProfileInteractorMockRecorder) ImportEnterpriseCSVForCircus(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportEnterpriseCSVForCircus", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).ImportEnterpriseCSVForCircus), input)
}

// ImportEnterpriseJSON mocks base method.
func (m *MockEnterpriseProfileInteractor) ImportEnterpriseJSON(input interactor.ImportEnterpriseJSONInput) (interactor.ImportEnterpriseJSONOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportEnterpriseJSON", input)
	ret0, _ := ret[0].(interactor.ImportEnterpriseJSONOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportEnterpriseJSON indicates an expected call of ImportEnterpriseJSON.
func (mr *MockEnterpriseProfileInteractorMockRecorder) ImportEnterpriseJSON(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportEnterpriseJSON", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).ImportEnterpriseJSON), input)
}

// ImportJobInformationCSV mocks base method.
func (m *MockEnterpriseProfileInteractor) ImportJobInformationCSV(input interactor.ImportJobInformationCSVInput) (interactor.ImportJobInformationCSVOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportJobInformationCSV", input)
	ret0, _ := ret[0].(interactor.ImportJobInformationCSVOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportJobInformationCSV indicates an expected call of ImportJobInformationCSV.
func (mr *MockEnterpriseProfileInteractorMockRecorder) ImportJobInformationCSV(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportJobInformationCSV", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).ImportJobInformationCSV), input)
}

// UpdateEnterpriseProfile mocks base method.
func (m *MockEnterpriseProfileInteractor) UpdateEnterpriseProfile(input interactor.UpdateEnterpriseProfileInput) (interactor.UpdateEnterpriseProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnterpriseProfile", input)
	ret0, _ := ret[0].(interactor.UpdateEnterpriseProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnterpriseProfile indicates an expected call of UpdateEnterpriseProfile.
func (mr *MockEnterpriseProfileInteractorMockRecorder) UpdateEnterpriseProfile(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnterpriseProfile", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).UpdateEnterpriseProfile), input)
}

// UpdateEnterpriseReferenceMaterial mocks base method.
func (m *MockEnterpriseProfileInteractor) UpdateEnterpriseReferenceMaterial(input interactor.UpdateEnterpriseReferenceMaterialInput) (interactor.UpdateEnterpriseReferenceMaterialOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnterpriseReferenceMaterial", input)
	ret0, _ := ret[0].(interactor.UpdateEnterpriseReferenceMaterialOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnterpriseReferenceMaterial indicates an expected call of UpdateEnterpriseReferenceMaterial.
func (mr *MockEnterpriseProfileInteractorMockRecorder) UpdateEnterpriseReferenceMaterial(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnterpriseReferenceMaterial", reflect.TypeOf((*MockEnterpriseProfileInteractor)(nil).UpdateEnterpriseReferenceMaterial), input)
}
