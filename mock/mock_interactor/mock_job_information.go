// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/job_information.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/job_information.go -destination ./mock/mock_interactor/mock_job_information.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockJobInformationInteractor is a mock of JobInformationInteractor interface.
type MockJobInformationInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockJobInformationInteractorMockRecorder
}

// MockJobInformationInteractorMockRecorder is the mock recorder for MockJobInformationInteractor.
type MockJobInformationInteractorMockRecorder struct {
	mock *MockJobInformationInteractor
}

// NewMockJobInformationInteractor creates a new mock instance.
func NewMockJobInformationInteractor(ctrl *gomock.Controller) *MockJobInformationInteractor {
	mock := &MockJobInformationInteractor{ctrl: ctrl}
	mock.recorder = &MockJobInformationInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobInformationInteractor) EXPECT() *MockJobInformationInteractorMockRecorder {
	return m.recorder
}

// CreateJobInformation mocks base method.
func (m *MockJobInformationInteractor) CreateJobInformation(input interactor.CreateJobInformationInput) (interactor.CreateJobInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJobInformation", input)
	ret0, _ := ret[0].(interactor.CreateJobInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobInformation indicates an expected call of CreateJobInformation.
func (mr *MockJobInformationInteractorMockRecorder) CreateJobInformation(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobInformation", reflect.TypeOf((*MockJobInformationInteractor)(nil).CreateJobInformation), input)
}

// CreateSelectionFlowPattern mocks base method.
func (m *MockJobInformationInteractor) CreateSelectionFlowPattern(input interactor.CreateSelectionFlowPatternInput) (interactor.CreateSelectionFlowPatternOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSelectionFlowPattern", input)
	ret0, _ := ret[0].(interactor.CreateSelectionFlowPatternOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSelectionFlowPattern indicates an expected call of CreateSelectionFlowPattern.
func (mr *MockJobInformationInteractorMockRecorder) CreateSelectionFlowPattern(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSelectionFlowPattern", reflect.TypeOf((*MockJobInformationInteractor)(nil).CreateSelectionFlowPattern), input)
}

// DeleteJobInformation mocks base method.
func (m *MockJobInformationInteractor) DeleteJobInformation(input interactor.DeleteJobInformationInput) (interactor.DeleteJobInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJobInformation", input)
	ret0, _ := ret[0].(interactor.DeleteJobInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJobInformation indicates an expected call of DeleteJobInformation.
func (mr *MockJobInformationInteractorMockRecorder) DeleteJobInformation(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJobInformation", reflect.TypeOf((*MockJobInformationInteractor)(nil).DeleteJobInformation), input)
}

// DeltedSelectionFlowPattern mocks base method.
func (m *MockJobInformationInteractor) DeltedSelectionFlowPattern(input interactor.DeltedSelectionFlowPatternInput) (interactor.DeltedSelectionFlowPatternOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeltedSelectionFlowPattern", input)
	ret0, _ := ret[0].(interactor.DeltedSelectionFlowPatternOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeltedSelectionFlowPattern indicates an expected call of DeltedSelectionFlowPattern.
func (mr *MockJobInformationInteractorMockRecorder) DeltedSelectionFlowPattern(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeltedSelectionFlowPattern", reflect.TypeOf((*MockJobInformationInteractor)(nil).DeltedSelectionFlowPattern), input)
}

// GetAllJobInformation mocks base method.
func (m *MockJobInformationInteractor) GetAllJobInformation(input interactor.GetAllJobInformationInput) (interactor.GetAllJobInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobInformation", input)
	ret0, _ := ret[0].(interactor.GetAllJobInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobInformation indicates an expected call of GetAllJobInformation.
func (mr *MockJobInformationInteractorMockRecorder) GetAllJobInformation(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobInformation", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetAllJobInformation), input)
}

// GetJobInformationByID mocks base method.
func (m *MockJobInformationInteractor) GetJobInformationByID(input interactor.GetJobInformationByIDInput) (interactor.GetJobInformationByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobInformationByID", input)
	ret0, _ := ret[0].(interactor.GetJobInformationByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobInformationByID indicates an expected call of GetJobInformationByID.
func (mr *MockJobInformationInteractorMockRecorder) GetJobInformationByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobInformationByID", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetJobInformationByID), input)
}

// GetJobInformationByUUID mocks base method.
func (m *MockJobInformationInteractor) GetJobInformationByUUID(input interactor.GetJobInformationByUUIDInput) (interactor.GetJobInformationByUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobInformationByUUID", input)
	ret0, _ := ret[0].(interactor.GetJobInformationByUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobInformationByUUID indicates an expected call of GetJobInformationByUUID.
func (mr *MockJobInformationInteractorMockRecorder) GetJobInformationByUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobInformationByUUID", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetJobInformationByUUID), input)
}

// GetJobInformationListByAgentID mocks base method.
func (m *MockJobInformationInteractor) GetJobInformationListByAgentID(input interactor.GetJobInformationListByAgentIDInput) (interactor.GetJobInformationListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobInformationListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetJobInformationListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobInformationListByAgentID indicates an expected call of GetJobInformationListByAgentID.
func (mr *MockJobInformationInteractorMockRecorder) GetJobInformationListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobInformationListByAgentID", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetJobInformationListByAgentID), input)
}

// GetJobInformationListByAgentIDAndType mocks base method.
func (m *MockJobInformationInteractor) GetJobInformationListByAgentIDAndType(input interactor.GetJobInformationListByAgentIDAndTypeInput) (interactor.GetJobInformationListByAgentIDAndTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobInformationListByAgentIDAndType", input)
	ret0, _ := ret[0].(interactor.GetJobInformationListByAgentIDAndTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobInformationListByAgentIDAndType indicates an expected call of GetJobInformationListByAgentIDAndType.
func (mr *MockJobInformationInteractorMockRecorder) GetJobInformationListByAgentIDAndType(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobInformationListByAgentIDAndType", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetJobInformationListByAgentIDAndType), input)
}

// GetJobInformationListByBillingAddressID mocks base method.
func (m *MockJobInformationInteractor) GetJobInformationListByBillingAddressID(input interactor.GetJobInformationListByBillingAddressIDInput) (interactor.GetJobInformationListByBillingAddressIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobInformationListByBillingAddressID", input)
	ret0, _ := ret[0].(interactor.GetJobInformationListByBillingAddressIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobInformationListByBillingAddressID indicates an expected call of GetJobInformationListByBillingAddressID.
func (mr *MockJobInformationInteractorMockRecorder) GetJobInformationListByBillingAddressID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobInformationListByBillingAddressID", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetJobInformationListByBillingAddressID), input)
}

// GetJobInformationListByEnterpriseID mocks base method.
func (m *MockJobInformationInteractor) GetJobInformationListByEnterpriseID(input interactor.GetJobInformationListByEnterpriseIDInput) (interactor.GetJobInformationListByEnterpriseIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobInformationListByEnterpriseID", input)
	ret0, _ := ret[0].(interactor.GetJobInformationListByEnterpriseIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobInformationListByEnterpriseID indicates an expected call of GetJobInformationListByEnterpriseID.
func (mr *MockJobInformationInteractorMockRecorder) GetJobInformationListByEnterpriseID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobInformationListByEnterpriseID", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetJobInformationListByEnterpriseID), input)
}

// GetJobInformationListByIDList mocks base method.
func (m *MockJobInformationInteractor) GetJobInformationListByIDList(input interactor.GetJobInformationListByIDListInput) (interactor.GetJobInformationListByIDListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobInformationListByIDList", input)
	ret0, _ := ret[0].(interactor.GetJobInformationListByIDListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobInformationListByIDList indicates an expected call of GetJobInformationListByIDList.
func (mr *MockJobInformationInteractorMockRecorder) GetJobInformationListByIDList(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobInformationListByIDList", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetJobInformationListByIDList), input)
}

// GetJobInformationListForDiagnosis mocks base method.
func (m *MockJobInformationInteractor) GetJobInformationListForDiagnosis() (interactor.GetJobInformationListForDiagnosisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobInformationListForDiagnosis")
	ret0, _ := ret[0].(interactor.GetJobInformationListForDiagnosisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobInformationListForDiagnosis indicates an expected call of GetJobInformationListForDiagnosis.
func (mr *MockJobInformationInteractorMockRecorder) GetJobInformationListForDiagnosis() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobInformationListForDiagnosis", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetJobInformationListForDiagnosis))
}

// GetJobListingByJobInformationUUID mocks base method.
func (m *MockJobInformationInteractor) GetJobListingByJobInformationUUID(input interactor.GetJobListingByJobInformationUUIDInput) (interactor.GetJobListingByJobInformationUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobListingByJobInformationUUID", input)
	ret0, _ := ret[0].(interactor.GetJobListingByJobInformationUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobListingByJobInformationUUID indicates an expected call of GetJobListingByJobInformationUUID.
func (mr *MockJobInformationInteractorMockRecorder) GetJobListingByJobInformationUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobListingByJobInformationUUID", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetJobListingByJobInformationUUID), input)
}

// GetJobListingForJobSeeker mocks base method.
func (m *MockJobInformationInteractor) GetJobListingForJobSeeker(input interactor.GetJobListingForJobSeekerInput) (interactor.GetJobListingForJobSeekerOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobListingForJobSeeker", input)
	ret0, _ := ret[0].(interactor.GetJobListingForJobSeekerOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobListingForJobSeeker indicates an expected call of GetJobListingForJobSeeker.
func (mr *MockJobInformationInteractorMockRecorder) GetJobListingForJobSeeker(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobListingForJobSeeker", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetJobListingForJobSeeker), input)
}

// GetJobListingListAndJobSeekerDesiredForDiagnosis mocks base method.
func (m *MockJobInformationInteractor) GetJobListingListAndJobSeekerDesiredForDiagnosis(input interactor.GetJobListingListAndJobSeekerDesiredForDiagnosisInput) (interactor.GetJobListingListAndJobSeekerDesiredForDiagnosisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobListingListAndJobSeekerDesiredForDiagnosis", input)
	ret0, _ := ret[0].(interactor.GetJobListingListAndJobSeekerDesiredForDiagnosisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobListingListAndJobSeekerDesiredForDiagnosis indicates an expected call of GetJobListingListAndJobSeekerDesiredForDiagnosis.
func (mr *MockJobInformationInteractorMockRecorder) GetJobListingListAndJobSeekerDesiredForDiagnosis(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobListingListAndJobSeekerDesiredForDiagnosis", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetJobListingListAndJobSeekerDesiredForDiagnosis), input)
}

// GetJobListingListByJobSeekerUUID mocks base method.
func (m *MockJobInformationInteractor) GetJobListingListByJobSeekerUUID(input interactor.GetJobListingListByJobSeekerUUIDInput) (interactor.GetJobListingListByJobSeekerUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobListingListByJobSeekerUUID", input)
	ret0, _ := ret[0].(interactor.GetJobListingListByJobSeekerUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobListingListByJobSeekerUUID indicates an expected call of GetJobListingListByJobSeekerUUID.
func (mr *MockJobInformationInteractorMockRecorder) GetJobListingListByJobSeekerUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobListingListByJobSeekerUUID", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetJobListingListByJobSeekerUUID), input)
}

// GetJobListingListByJobSeekerUUIDAndInterestedType mocks base method.
func (m *MockJobInformationInteractor) GetJobListingListByJobSeekerUUIDAndInterestedType(input interactor.GetJobListingListByJobSeekerUUIDAndInterestedTypeInput) (interactor.GetJobListingListByJobSeekerUUIDAndInterestedTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobListingListByJobSeekerUUIDAndInterestedType", input)
	ret0, _ := ret[0].(interactor.GetJobListingListByJobSeekerUUIDAndInterestedTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobListingListByJobSeekerUUIDAndInterestedType indicates an expected call of GetJobListingListByJobSeekerUUIDAndInterestedType.
func (mr *MockJobInformationInteractorMockRecorder) GetJobListingListByJobSeekerUUIDAndInterestedType(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobListingListByJobSeekerUUIDAndInterestedType", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetJobListingListByJobSeekerUUIDAndInterestedType), input)
}

// GetOpenSelectionFlowPatternListByJobInformationID mocks base method.
func (m *MockJobInformationInteractor) GetOpenSelectionFlowPatternListByJobInformationID(input interactor.GetOpenSelectionFlowPatternListByJobInformationIDInput) (interactor.GetOpenSelectionFlowPatternListByJobInformationIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenSelectionFlowPatternListByJobInformationID", input)
	ret0, _ := ret[0].(interactor.GetOpenSelectionFlowPatternListByJobInformationIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenSelectionFlowPatternListByJobInformationID indicates an expected call of GetOpenSelectionFlowPatternListByJobInformationID.
func (mr *MockJobInformationInteractorMockRecorder) GetOpenSelectionFlowPatternListByJobInformationID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenSelectionFlowPatternListByJobInformationID", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetOpenSelectionFlowPatternListByJobInformationID), input)
}

// GetSearchActiveJobInformationListByAgentID mocks base method.
func (m *MockJobInformationInteractor) GetSearchActiveJobInformationListByAgentID(input interactor.GetSearchActiveJobInformationListByAgentIDInput) (interactor.GetSearchActiveJobInformationListByAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchActiveJobInformationListByAgentID", input)
	ret0, _ := ret[0].(interactor.GetSearchActiveJobInformationListByAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchActiveJobInformationListByAgentID indicates an expected call of GetSearchActiveJobInformationListByAgentID.
func (mr *MockJobInformationInteractorMockRecorder) GetSearchActiveJobInformationListByAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchActiveJobInformationListByAgentID", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetSearchActiveJobInformationListByAgentID), input)
}

// GetSearchJobInformationCountByLPDiagnosis mocks base method.
func (m *MockJobInformationInteractor) GetSearchJobInformationCountByLPDiagnosis(input interactor.GetSearchJobInformationCountByLPDiagnosisInput) (interactor.GetSearchJobInformationCountByLPDiagnosisOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchJobInformationCountByLPDiagnosis", input)
	ret0, _ := ret[0].(interactor.GetSearchJobInformationCountByLPDiagnosisOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchJobInformationCountByLPDiagnosis indicates an expected call of GetSearchJobInformationCountByLPDiagnosis.
func (mr *MockJobInformationInteractorMockRecorder) GetSearchJobInformationCountByLPDiagnosis(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchJobInformationCountByLPDiagnosis", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetSearchJobInformationCountByLPDiagnosis), input)
}

// GetSearchJobInformationListByAgentIDAndType mocks base method.
func (m *MockJobInformationInteractor) GetSearchJobInformationListByAgentIDAndType(input interactor.GetSearchJobInformationListByAgentIDAndTypeInput) (interactor.GetSearchJobInformationListByAgentIDAndTypeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchJobInformationListByAgentIDAndType", input)
	ret0, _ := ret[0].(interactor.GetSearchJobInformationListByAgentIDAndTypeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchJobInformationListByAgentIDAndType indicates an expected call of GetSearchJobInformationListByAgentIDAndType.
func (mr *MockJobInformationInteractorMockRecorder) GetSearchJobInformationListByAgentIDAndType(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchJobInformationListByAgentIDAndType", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetSearchJobInformationListByAgentIDAndType), input)
}

// GetSearchJobInformationListByOtherAgentID mocks base method.
func (m *MockJobInformationInteractor) GetSearchJobInformationListByOtherAgentID(input interactor.GetSearchJobInformationListByOtherAgentIDInput) (interactor.GetSearchJobInformationListByOtherAgentIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchJobInformationListByOtherAgentID", input)
	ret0, _ := ret[0].(interactor.GetSearchJobInformationListByOtherAgentIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchJobInformationListByOtherAgentID indicates an expected call of GetSearchJobInformationListByOtherAgentID.
func (mr *MockJobInformationInteractorMockRecorder) GetSearchJobInformationListByOtherAgentID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchJobInformationListByOtherAgentID", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetSearchJobInformationListByOtherAgentID), input)
}

// GetSearchJobListingListByJobSeekerUUID mocks base method.
func (m *MockJobInformationInteractor) GetSearchJobListingListByJobSeekerUUID(input interactor.GetSearchJobListingListByJobSeekerUUIDInput) (interactor.GetSearchJobListingListByJobSeekerUUIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchJobListingListByJobSeekerUUID", input)
	ret0, _ := ret[0].(interactor.GetSearchJobListingListByJobSeekerUUIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchJobListingListByJobSeekerUUID indicates an expected call of GetSearchJobListingListByJobSeekerUUID.
func (mr *MockJobInformationInteractorMockRecorder) GetSearchJobListingListByJobSeekerUUID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchJobListingListByJobSeekerUUID", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetSearchJobListingListByJobSeekerUUID), input)
}

// GetSearchPublicJobInformationListByAgentIDAndPage mocks base method.
func (m *MockJobInformationInteractor) GetSearchPublicJobInformationListByAgentIDAndPage(input interactor.GetSearchPublicJobInformationListByAgentIDAndPageInput) (interactor.GetSearchPublicJobInformationListByAgentIDAndPageOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchPublicJobInformationListByAgentIDAndPage", input)
	ret0, _ := ret[0].(interactor.GetSearchPublicJobInformationListByAgentIDAndPageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchPublicJobInformationListByAgentIDAndPage indicates an expected call of GetSearchPublicJobInformationListByAgentIDAndPage.
func (mr *MockJobInformationInteractorMockRecorder) GetSearchPublicJobInformationListByAgentIDAndPage(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchPublicJobInformationListByAgentIDAndPage", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetSearchPublicJobInformationListByAgentIDAndPage), input)
}

// GetSelectionFlowPatternByID mocks base method.
func (m *MockJobInformationInteractor) GetSelectionFlowPatternByID(input interactor.GetSelectionFlowPatternByIDInput) (interactor.GetSelectionFlowPatternByIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectionFlowPatternByID", input)
	ret0, _ := ret[0].(interactor.GetSelectionFlowPatternByIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelectionFlowPatternByID indicates an expected call of GetSelectionFlowPatternByID.
func (mr *MockJobInformationInteractorMockRecorder) GetSelectionFlowPatternByID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectionFlowPatternByID", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetSelectionFlowPatternByID), input)
}

// GetSelectionFlowPatternListByJobInformationID mocks base method.
func (m *MockJobInformationInteractor) GetSelectionFlowPatternListByJobInformationID(input interactor.GetSelectionFlowPatternListByJobInformationIDInput) (interactor.GetSelectionFlowPatternListByJobInformationIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectionFlowPatternListByJobInformationID", input)
	ret0, _ := ret[0].(interactor.GetSelectionFlowPatternListByJobInformationIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelectionFlowPatternListByJobInformationID indicates an expected call of GetSelectionFlowPatternListByJobInformationID.
func (mr *MockJobInformationInteractorMockRecorder) GetSelectionFlowPatternListByJobInformationID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectionFlowPatternListByJobInformationID", reflect.TypeOf((*MockJobInformationInteractor)(nil).GetSelectionFlowPatternListByJobInformationID), input)
}

// UpdateJobInformation mocks base method.
func (m *MockJobInformationInteractor) UpdateJobInformation(input interactor.UpdateJobInformationInput) (interactor.UpdateJobInformationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobInformation", input)
	ret0, _ := ret[0].(interactor.UpdateJobInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJobInformation indicates an expected call of UpdateJobInformation.
func (mr *MockJobInformationInteractorMockRecorder) UpdateJobInformation(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobInformation", reflect.TypeOf((*MockJobInformationInteractor)(nil).UpdateJobInformation), input)
}

// UpdateSelectionFlowPattern mocks base method.
func (m *MockJobInformationInteractor) UpdateSelectionFlowPattern(input interactor.UpdateSelectionFlowPatternInput) (interactor.UpdateSelectionFlowPatternOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSelectionFlowPattern", input)
	ret0, _ := ret[0].(interactor.UpdateSelectionFlowPatternOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSelectionFlowPattern indicates an expected call of UpdateSelectionFlowPattern.
func (mr *MockJobInformationInteractorMockRecorder) UpdateSelectionFlowPattern(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSelectionFlowPattern", reflect.TypeOf((*MockJobInformationInteractor)(nil).UpdateSelectionFlowPattern), input)
}
