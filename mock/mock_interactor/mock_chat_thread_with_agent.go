// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/interactor/chat_thread_with_agent.go
//
// Generated by this command:
//
//	mockgen -source ./usecase/interactor/chat_thread_with_agent.go -destination ./mock/mock_interactor/mock_chat_thread_with_agent.go
//

// Package mock_interactor is a generated GoMock package.
package mock_interactor

import (
	reflect "reflect"

	interactor "github.com/spaceaiinc/autoscout-server/usecase/interactor"
	gomock "go.uber.org/mock/gomock"
)

// MockChatThreadWithAgentInteractor is a mock of ChatThreadWithAgentInteractor interface.
type MockChatThreadWithAgentInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockChatThreadWithAgentInteractorMockRecorder
}

// MockChatThreadWithAgentInteractorMockRecorder is the mock recorder for MockChatThreadWithAgentInteractor.
type MockChatThreadWithAgentInteractorMockRecorder struct {
	mock *MockChatThreadWithAgentInteractor
}

// NewMockChatThreadWithAgentInteractor creates a new mock instance.
func NewMockChatThreadWithAgentInteractor(ctrl *gomock.Controller) *MockChatThreadWithAgentInteractor {
	mock := &MockChatThreadWithAgentInteractor{ctrl: ctrl}
	mock.recorder = &MockChatThreadWithAgentInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatThreadWithAgentInteractor) EXPECT() *MockChatThreadWithAgentInteractorMockRecorder {
	return m.recorder
}

// CreateChatThreadWithAgent mocks base method.
func (m *MockChatThreadWithAgentInteractor) CreateChatThreadWithAgent(input interactor.CreateChatThreadWithAgentInput) (interactor.CreateChatThreadWithAgentOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatThreadWithAgent", input)
	ret0, _ := ret[0].(interactor.CreateChatThreadWithAgentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatThreadWithAgent indicates an expected call of CreateChatThreadWithAgent.
func (mr *MockChatThreadWithAgentInteractorMockRecorder) CreateChatThreadWithAgent(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatThreadWithAgent", reflect.TypeOf((*MockChatThreadWithAgentInteractor)(nil).CreateChatThreadWithAgent), input)
}

// GetChatThreadAndMessageWithAgentByChatThreadID mocks base method.
func (m *MockChatThreadWithAgentInteractor) GetChatThreadAndMessageWithAgentByChatThreadID(input interactor.GetChatThreadAndMessageWithAgentByChatThreadIDInput) (interactor.GetChatThreadAndMessageWithAgentByChatThreadIDOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatThreadAndMessageWithAgentByChatThreadID", input)
	ret0, _ := ret[0].(interactor.GetChatThreadAndMessageWithAgentByChatThreadIDOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatThreadAndMessageWithAgentByChatThreadID indicates an expected call of GetChatThreadAndMessageWithAgentByChatThreadID.
func (mr *MockChatThreadWithAgentInteractorMockRecorder) GetChatThreadAndMessageWithAgentByChatThreadID(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatThreadAndMessageWithAgentByChatThreadID", reflect.TypeOf((*MockChatThreadWithAgentInteractor)(nil).GetChatThreadAndMessageWithAgentByChatThreadID), input)
}
