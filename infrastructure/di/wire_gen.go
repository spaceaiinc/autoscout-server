// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/spaceaiinc/autoscout-server/domain/config"
	"github.com/spaceaiinc/autoscout-server/interfaces"
	"github.com/spaceaiinc/autoscout-server/interfaces/handler"
	"github.com/spaceaiinc/autoscout-server/interfaces/repository"
	"github.com/spaceaiinc/autoscout-server/usecase"
	"github.com/spaceaiinc/autoscout-server/usecase/interactor"
)

// Injectors from wire.go:

// Seesion
func InitializeSessionHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.SessionHandler {
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	enterpriseProfileRepository := repository.NewEnterpriseProfileRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobSeekerLPLoginTokenRepository := repository.NewJobSeekerLPLoginTokenRepositoryImpl(db)
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	sessionInteractor := interactor.NewSessionInteractorImpl(fb, sendgrid, agentRepository, agentStaffRepository, enterpriseProfileRepository, jobInformationRepository, jobSeekerRepository, jobSeekerLPLoginTokenRepository, agentAllianceRepository, sendingJobSeekerRepository)
	sessionHandler := handler.NewSessionHandlerImpl(sessionInteractor)
	return sessionHandler
}

// Admin
func InitializeAdminHandler(db interfaces.SQLExecuter, appConfig config.App) handler.AdminHandler {
	adminInteractor := interactor.NewAdminInteractorImpl(appConfig)
	adminHandler := handler.NewAdminHandlerImpl(adminInteractor)
	return adminHandler
}

// Agent
func InitializeAgentHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.AgentHandler {
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	chatMessageWithJobSeekerRepository := repository.NewChatMessageWithJobSeekerRepositoryImpl(db)
	chatGroupWithAgentRepository := repository.NewChatGroupWithAgentRepositoryImpl(db)
	notificationForUserRepository := repository.NewNotificationForUserRepositoryImpl(db)
	userNotificationViewRepository := repository.NewUserNotificationViewRepositoryImpl(db)
	agentInteractor := interactor.NewAgentInteractorImpl(fb, sendgrid, agentRepository, agentAllianceRepository, agentStaffRepository, jobSeekerRepository, chatGroupWithJobSeekerRepository, chatMessageWithJobSeekerRepository, chatGroupWithAgentRepository, notificationForUserRepository, userNotificationViewRepository)
	agentHandler := handler.NewAgentHandlerImpl(agentInteractor)
	return agentHandler
}

// AgentStaff
func InitializeAgentStaffHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.AgentStaffHandler {
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	enterpriseProfileRepository := repository.NewEnterpriseProfileRepositoryImpl(db)
	billingAddressRepository := repository.NewBillingAddressRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	notificationForUserRepository := repository.NewNotificationForUserRepositoryImpl(db)
	userNotificationViewRepository := repository.NewUserNotificationViewRepositoryImpl(db)
	agentStaffInteractor := interactor.NewAgentStaffInteractorImpl(fb, sendgrid, agentStaffRepository, agentRepository, enterpriseProfileRepository, billingAddressRepository, jobSeekerRepository, notificationForUserRepository, userNotificationViewRepository)
	agentStaffHandler := handler.NewAgentStaffHandlerImpl(agentStaffInteractor)
	return agentStaffHandler
}

// AgentAlliance
func InitializeAgentAllianceHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.AgentAllianceHandler {
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	chatGroupWithAgentRepository := repository.NewChatGroupWithAgentRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	agentAllianceInteractor := interactor.NewAgentAllianceInteractorImpl(fb, sendgrid, agentAllianceRepository, agentRepository, chatGroupWithAgentRepository, taskRepository)
	agentAllianceHandler := handler.NewAgentAllianceHandlerImpl(agentAllianceInteractor)
	return agentAllianceHandler
}

// AgentRobot
func InitializeAgentRobotHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.AgentRobotHandler {
	agentRobotRepository := repository.NewAgentRobotRepositoryImpl(db)
	scoutServiceRepository := repository.NewScoutServiceRepositoryImpl(db)
	scoutServiceGetEntryTimeRepository := repository.NewScoutServiceGetEntryTimeRepositoryImpl(db)
	scoutServiceTemplateRepository := repository.NewScoutServiceTemplateRepositoryImpl(db)
	agentRobotInteractor := interactor.NewAgentRobotInteractorImpl(fb, sendgrid, oneSignal, agentRobotRepository, scoutServiceRepository, scoutServiceGetEntryTimeRepository, scoutServiceTemplateRepository)
	agentRobotHandler := handler.NewAgentRobotHandlerImpl(agentRobotInteractor)
	return agentRobotHandler
}

// EnterpriseProfile
func InitializeEnterpriseProfileHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.EnterpriseProfileHandler {
	enterpriseProfileRepository := repository.NewEnterpriseProfileRepositoryImpl(db)
	enterpriseIndustryRepository := repository.NewEnterpriseIndustryRepositoryImpl(db)
	enterpriseReferenceMaterialRepository := repository.NewEnterpriseReferenceMaterialRepositoryImpl(db)
	enterpriseActivityRepository := repository.NewEnterpriseActivityRepositoryImpl(db)
	billingAddressRepository := repository.NewBillingAddressRepositoryImpl(db)
	billingAddressHRStaffRepository := repository.NewBillingAddressHRStaffRepositoryImpl(db)
	billingAddressRAStaffRepository := repository.NewBillingAddressRAStaffRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	jobInformationTargetRepository := repository.NewJobInformationTargetRepositoryImpl(db)
	jobInformationFeatureRepository := repository.NewJobInformationFeatureRepositoryImpl(db)
	jobInformationPrefectureRepository := repository.NewJobInformationPrefectureRepositoryImpl(db)
	jobInformationWorkCharmPointRepository := repository.NewJobInformationWorkCharmPointRepositoryImpl(db)
	jobInformationEmploymentStatusRepository := repository.NewJobInformationEmploymentStatusRepositoryImpl(db)
	jobInformationRequiredConditionRepository := repository.NewJobInformationRequiredConditionRepositoryImpl(db)
	jobInformationRequiredLicenseRepository := repository.NewJobInformationRequiredLicenseRepositoryImpl(db)
	jobInformationRequiredPCToolRepository := repository.NewJobInformationRequiredPCToolRepositoryImpl(db)
	jobInformationRequiredLanguageRepository := repository.NewJobInformationRequiredLanguageRepositoryImpl(db)
	jobInformationRequiredLanguageTypeRepository := repository.NewJobInformationRequiredLanguageTypeRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentRepository := repository.NewJobInformationRequiredExperienceDevelopmentRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentTypeRepository := repository.NewJobInformationRequiredExperienceDevelopmentTypeRepositoryImpl(db)
	jobInformationRequiredExperienceJobRepository := repository.NewJobInformationRequiredExperienceJobRepositoryImpl(db)
	jobInformationRequiredExperienceIndustryRepository := repository.NewJobInformationRequiredExperienceIndustryRepositoryImpl(db)
	jobInformationRequiredExperienceOccupationRepository := repository.NewJobInformationRequiredExperienceOccupationRepositoryImpl(db)
	jobInformationRequiredSocialExperienceRepository := repository.NewJobInformationRequiredSocialExperienceRepositoryImpl(db)
	jobInformationSelectionFlowPatternRepository := repository.NewJobInformationSelectionFlowPatternRepositoryImpl(db)
	jobInformationSelectionInformationRepository := repository.NewJobInformationSelectionInformationRepositoryImpl(db)
	jobInformationOccupationRepository := repository.NewJobInformationOccupationRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	jobInformationHideToAgentRepository := repository.NewJobInformationHideToAgentRepositoryImpl(db)
	jobInformationExternalIDRepository := repository.NewJobInformationExternalIDRepositoryImpl(db)
	enterpriseProfileInteractor := interactor.NewEnterpriseProfileInteractorImpl(fb, sendgrid, enterpriseProfileRepository, enterpriseIndustryRepository, enterpriseReferenceMaterialRepository, enterpriseActivityRepository, billingAddressRepository, billingAddressHRStaffRepository, billingAddressRAStaffRepository, jobInformationRepository, jobInformationTargetRepository, jobInformationFeatureRepository, jobInformationPrefectureRepository, jobInformationWorkCharmPointRepository, jobInformationEmploymentStatusRepository, jobInformationRequiredConditionRepository, jobInformationRequiredLicenseRepository, jobInformationRequiredPCToolRepository, jobInformationRequiredLanguageRepository, jobInformationRequiredLanguageTypeRepository, jobInformationRequiredExperienceDevelopmentRepository, jobInformationRequiredExperienceDevelopmentTypeRepository, jobInformationRequiredExperienceJobRepository, jobInformationRequiredExperienceIndustryRepository, jobInformationRequiredExperienceOccupationRepository, jobInformationRequiredSocialExperienceRepository, jobInformationSelectionFlowPatternRepository, jobInformationSelectionInformationRepository, jobInformationOccupationRepository, agentRepository, agentStaffRepository, jobInformationHideToAgentRepository, jobInformationExternalIDRepository)
	enterpriseProfileHandler := handler.NewEnterpriseProfileHandlerImpl(enterpriseProfileInteractor)
	return enterpriseProfileHandler
}

// BillingAddress
func InitializeBillingAddressHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.BillingAddressHandler {
	billingAddressRepository := repository.NewBillingAddressRepositoryImpl(db)
	billingAddressHRStaffRepository := repository.NewBillingAddressHRStaffRepositoryImpl(db)
	billingAddressRAStaffRepository := repository.NewBillingAddressRAStaffRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	taskGroupRepository := repository.NewTaskGroupRepositoryImpl(db)
	billingAddressInteractor := interactor.NewBillingAddressInteractorImpl(fb, sendgrid, billingAddressRepository, billingAddressHRStaffRepository, billingAddressRAStaffRepository, jobInformationRepository, agentRepository, agentStaffRepository, taskGroupRepository)
	billingAddressHandler := handler.NewBillingAddressHandlerImpl(billingAddressInteractor)
	return billingAddressHandler
}

// JobInformation
func InitializeJobInformationHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.JobInformationHandler {
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	jobInformationTargetRepository := repository.NewJobInformationTargetRepositoryImpl(db)
	jobInformationFeatureRepository := repository.NewJobInformationFeatureRepositoryImpl(db)
	jobInformationPrefectureRepository := repository.NewJobInformationPrefectureRepositoryImpl(db)
	jobInformationWorkCharmPointRepository := repository.NewJobInformationWorkCharmPointRepositoryImpl(db)
	jobInformationEmploymentStatusRepository := repository.NewJobInformationEmploymentStatusRepositoryImpl(db)
	jobInformationRequiredLicenseRepository := repository.NewJobInformationRequiredLicenseRepositoryImpl(db)
	jobInformationRequiredPCToolRepository := repository.NewJobInformationRequiredPCToolRepositoryImpl(db)
	jobInformationRequiredLanguageRepository := repository.NewJobInformationRequiredLanguageRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentRepository := repository.NewJobInformationRequiredExperienceDevelopmentRepositoryImpl(db)
	jobInformationRequiredExperienceJobRepository := repository.NewJobInformationRequiredExperienceJobRepositoryImpl(db)
	jobInformationRequiredExperienceIndustryRepository := repository.NewJobInformationRequiredExperienceIndustryRepositoryImpl(db)
	jobInformationRequiredExperienceOccupationRepository := repository.NewJobInformationRequiredExperienceOccupationRepositoryImpl(db)
	jobInformationRequiredSocialExperienceRepository := repository.NewJobInformationRequiredSocialExperienceRepositoryImpl(db)
	jobInformationSelectionFlowPatternRepository := repository.NewJobInformationSelectionFlowPatternRepositoryImpl(db)
	jobInformationSelectionInformationRepository := repository.NewJobInformationSelectionInformationRepositoryImpl(db)
	jobInformationHideToAgentRepository := repository.NewJobInformationHideToAgentRepositoryImpl(db)
	jobInformationOccupationRepository := repository.NewJobInformationOccupationRepositoryImpl(db)
	jobInformationRequiredConditionRepository := repository.NewJobInformationRequiredConditionRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentTypeRepository := repository.NewJobInformationRequiredExperienceDevelopmentTypeRepositoryImpl(db)
	jobInformationRequiredLanguageTypeRepository := repository.NewJobInformationRequiredLanguageTypeRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobSeekerStudentHistoryRepository := repository.NewJobSeekerStudentHistoryRepositoryImpl(db)
	jobSeekerWorkHistoryRepository := repository.NewJobSeekerWorkHistoryRepositoryImpl(db)
	jobSeekerExperienceIndustryRepository := repository.NewJobSeekerExperienceIndustryRepositoryImpl(db)
	jobSeekerExperienceOccupationRepository := repository.NewJobSeekerExperienceOccupationRepositoryImpl(db)
	jobSeekerExperienceJobRepository := repository.NewJobSeekerExperienceJobRepositoryImpl(db)
	jobSeekerLicenseRepository := repository.NewJobSeekerLicenseRepositoryImpl(db)
	jobSeekerSelfPromotionRepository := repository.NewJobSeekerSelfPromotionRepositoryImpl(db)
	jobSeekerDocumentRepository := repository.NewJobSeekerDocumentRepositoryImpl(db)
	jobSeekerDesiredIndustryRepository := repository.NewJobSeekerDesiredIndustryRepositoryImpl(db)
	jobSeekerDesiredOccupationRepository := repository.NewJobSeekerDesiredOccupationRepositoryImpl(db)
	jobSeekerDesiredWorkLocationRepository := repository.NewJobSeekerDesiredWorkLocationRepositoryImpl(db)
	jobSeekerDesiredHolidayTypeRepository := repository.NewJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	jobSeekerDevelopmentSkillRepository := repository.NewJobSeekerDevelopmentSkillRepositoryImpl(db)
	jobSeekerLanguageSkillRepository := repository.NewJobSeekerLanguageSkillRepositoryImpl(db)
	jobSeekerPCToolRepository := repository.NewJobSeekerPCToolRepositoryImpl(db)
	jobSeekerDepartmentHistoryRepository := repository.NewJobSeekerDepartmentHistoryRepositoryImpl(db)
	jobSeekerDesiredCompanyScaleRepository := repository.NewJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	enterpriseProfileRepository := repository.NewEnterpriseProfileRepositoryImpl(db)
	enterpriseIndustryRepository := repository.NewEnterpriseIndustryRepositoryImpl(db)
	enterpriseReferenceMaterialRepository := repository.NewEnterpriseReferenceMaterialRepositoryImpl(db)
	taskGroupRepository := repository.NewTaskGroupRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	selectionQuestionnaireRepository := repository.NewSelectionQuestionnaireRepositoryImpl(db)
	evaluationPointRepository := repository.NewEvaluationPointRepositoryImpl(db)
	billingAddressRepository := repository.NewBillingAddressRepositoryImpl(db)
	jobSeekerInterestedJobListingRepository := repository.NewJobSeekerInterestedJobListingRepositoryImpl(db)
	jobInformationInteractor := interactor.NewJobInformationInteractorImpl(fb, sendgrid, jobInformationRepository, jobInformationTargetRepository, jobInformationFeatureRepository, jobInformationPrefectureRepository, jobInformationWorkCharmPointRepository, jobInformationEmploymentStatusRepository, jobInformationRequiredLicenseRepository, jobInformationRequiredPCToolRepository, jobInformationRequiredLanguageRepository, jobInformationRequiredExperienceDevelopmentRepository, jobInformationRequiredExperienceJobRepository, jobInformationRequiredExperienceIndustryRepository, jobInformationRequiredExperienceOccupationRepository, jobInformationRequiredSocialExperienceRepository, jobInformationSelectionFlowPatternRepository, jobInformationSelectionInformationRepository, jobInformationHideToAgentRepository, jobInformationOccupationRepository, jobInformationRequiredConditionRepository, jobInformationRequiredExperienceDevelopmentTypeRepository, jobInformationRequiredLanguageTypeRepository, jobSeekerRepository, jobSeekerStudentHistoryRepository, jobSeekerWorkHistoryRepository, jobSeekerExperienceIndustryRepository, jobSeekerExperienceOccupationRepository, jobSeekerExperienceJobRepository, jobSeekerLicenseRepository, jobSeekerSelfPromotionRepository, jobSeekerDocumentRepository, jobSeekerDesiredIndustryRepository, jobSeekerDesiredOccupationRepository, jobSeekerDesiredWorkLocationRepository, jobSeekerDesiredHolidayTypeRepository, jobSeekerDevelopmentSkillRepository, jobSeekerLanguageSkillRepository, jobSeekerPCToolRepository, jobSeekerDepartmentHistoryRepository, jobSeekerDesiredCompanyScaleRepository, agentRepository, agentStaffRepository, agentAllianceRepository, enterpriseProfileRepository, enterpriseIndustryRepository, enterpriseReferenceMaterialRepository, taskGroupRepository, taskRepository, selectionQuestionnaireRepository, evaluationPointRepository, billingAddressRepository, jobSeekerInterestedJobListingRepository)
	jobInformationHandler := handler.NewJobInformationHandlerImpl(jobInformationInteractor)
	return jobInformationHandler
}

// JobSeeker
func InitializeJobSeekerHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal, slack config.Slack) handler.JobSeekerHandler {
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobSeekerStudentHistoryRepository := repository.NewJobSeekerStudentHistoryRepositoryImpl(db)
	jobSeekerWorkHistoryRepository := repository.NewJobSeekerWorkHistoryRepositoryImpl(db)
	jobSeekerExperienceIndustryRepository := repository.NewJobSeekerExperienceIndustryRepositoryImpl(db)
	jobSeekerExperienceOccupationRepository := repository.NewJobSeekerExperienceOccupationRepositoryImpl(db)
	jobSeekerLicenseRepository := repository.NewJobSeekerLicenseRepositoryImpl(db)
	jobSeekerSelfPromotionRepository := repository.NewJobSeekerSelfPromotionRepositoryImpl(db)
	jobSeekerDocumentRepository := repository.NewJobSeekerDocumentRepositoryImpl(db)
	jobSeekerDesiredIndustryRepository := repository.NewJobSeekerDesiredIndustryRepositoryImpl(db)
	jobSeekerDesiredOccupationRepository := repository.NewJobSeekerDesiredOccupationRepositoryImpl(db)
	jobSeekerDesiredWorkLocationRepository := repository.NewJobSeekerDesiredWorkLocationRepositoryImpl(db)
	jobSeekerDesiredHolidayTypeRepository := repository.NewJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	jobSeekerDevelopmentSkillRepository := repository.NewJobSeekerDevelopmentSkillRepositoryImpl(db)
	jobSeekerLanguageSkillRepository := repository.NewJobSeekerLanguageSkillRepositoryImpl(db)
	jobSeekerPCToolRepository := repository.NewJobSeekerPCToolRepositoryImpl(db)
	jobSeekerHideToAgentRepository := repository.NewJobSeekerHideToAgentRepositoryImpl(db)
	jobSeekerDepartmentHistoryRepository := repository.NewJobSeekerDepartmentHistoryRepositoryImpl(db)
	jobSeekerDesiredCompanyScaleRepository := repository.NewJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	jobSeekerExperienceJobRepository := repository.NewJobSeekerExperienceJobRepositoryImpl(db)
	jobSeekerLPLoginTokenRepository := repository.NewJobSeekerLPLoginTokenRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	jobInformationTargetRepository := repository.NewJobInformationTargetRepositoryImpl(db)
	jobInformationFeatureRepository := repository.NewJobInformationFeatureRepositoryImpl(db)
	jobInformationPrefectureRepository := repository.NewJobInformationPrefectureRepositoryImpl(db)
	jobInformationWorkCharmPointRepository := repository.NewJobInformationWorkCharmPointRepositoryImpl(db)
	jobInformationEmploymentStatusRepository := repository.NewJobInformationEmploymentStatusRepositoryImpl(db)
	jobInformationRequiredLicenseRepository := repository.NewJobInformationRequiredLicenseRepositoryImpl(db)
	jobInformationRequiredPCToolRepository := repository.NewJobInformationRequiredPCToolRepositoryImpl(db)
	jobInformationRequiredLanguageRepository := repository.NewJobInformationRequiredLanguageRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentRepository := repository.NewJobInformationRequiredExperienceDevelopmentRepositoryImpl(db)
	jobInformationRequiredExperienceJobRepository := repository.NewJobInformationRequiredExperienceJobRepositoryImpl(db)
	jobInformationRequiredExperienceIndustryRepository := repository.NewJobInformationRequiredExperienceIndustryRepositoryImpl(db)
	jobInformationRequiredExperienceOccupationRepository := repository.NewJobInformationRequiredExperienceOccupationRepositoryImpl(db)
	jobInformationRequiredSocialExperienceRepository := repository.NewJobInformationRequiredSocialExperienceRepositoryImpl(db)
	jobInformationSelectionFlowPatternRepository := repository.NewJobInformationSelectionFlowPatternRepositoryImpl(db)
	jobInformationSelectionInformationRepository := repository.NewJobInformationSelectionInformationRepositoryImpl(db)
	jobInformationOccupationRepository := repository.NewJobInformationOccupationRepositoryImpl(db)
	jobInformationRequiredConditionRepository := repository.NewJobInformationRequiredConditionRepositoryImpl(db)
	jobInformationRequiredLanguageTypeRepository := repository.NewJobInformationRequiredLanguageTypeRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentTypeRepository := repository.NewJobInformationRequiredExperienceDevelopmentTypeRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	agentInflowChannelOptionRepository := repository.NewAgentInflowChannelOptionRepositoryImpl(db)
	enterpriseProfileRepository := repository.NewEnterpriseProfileRepositoryImpl(db)
	enterpriseIndustryRepository := repository.NewEnterpriseIndustryRepositoryImpl(db)
	enterpriseReferenceMaterialRepository := repository.NewEnterpriseReferenceMaterialRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	chatMessageWithJobSeekerRepository := repository.NewChatMessageWithJobSeekerRepositoryImpl(db)
	initialQuestionnaireRepository := repository.NewInitialQuestionnaireRepositoryImpl(db)
	initialQuestionnaireDesiredIndustryRepository := repository.NewInitialQuestionnaireDesiredIndustryRepositoryImpl(db)
	initialQuestionnaireDesiredOccupationRepository := repository.NewInitialQuestionnaireDesiredOccupationRepositoryImpl(db)
	initialQuestionnaireDesiredWorkLocationRepository := repository.NewInitialQuestionnaireDesiredWorkLocationRepositoryImpl(db)
	taskGroupRepository := repository.NewTaskGroupRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	sendingJobSeekerStudentHistoryRepository := repository.NewSendingJobSeekerStudentHistoryRepositoryImpl(db)
	sendingJobSeekerWorkHistoryRepository := repository.NewSendingJobSeekerWorkHistoryRepositoryImpl(db)
	sendingJobSeekerExperienceIndustryRepository := repository.NewSendingJobSeekerExperienceIndustryRepositoryImpl(db)
	sendingJobSeekerExperienceOccupationRepository := repository.NewSendingJobSeekerExperienceOccupationRepositoryImpl(db)
	sendingJobSeekerLicenseRepository := repository.NewSendingJobSeekerLicenseRepositoryImpl(db)
	sendingJobSeekerSelfPromotionRepository := repository.NewSendingJobSeekerSelfPromotionRepositoryImpl(db)
	sendingJobSeekerDocumentRepository := repository.NewSendingJobSeekerDocumentRepositoryImpl(db)
	sendingJobSeekerDesiredIndustryRepository := repository.NewSendingJobSeekerDesiredIndustryRepositoryImpl(db)
	sendingJobSeekerDesiredOccupationRepository := repository.NewSendingJobSeekerDesiredOccupationRepositoryImpl(db)
	sendingJobSeekerDesiredWorkLocationRepository := repository.NewSendingJobSeekerDesiredWorkLocationRepositoryImpl(db)
	sendingJobSeekerDesiredHolidayTypeRepository := repository.NewSendingJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	sendingJobSeekerDevelopmentSkillRepository := repository.NewSendingJobSeekerDevelopmentSkillRepositoryImpl(db)
	sendingJobSeekerLanguageSkillRepository := repository.NewSendingJobSeekerLanguageSkillRepositoryImpl(db)
	sendingJobSeekerPCToolRepository := repository.NewSendingJobSeekerPCToolRepositoryImpl(db)
	sendingJobSeekerDepartmentHistoryRepository := repository.NewSendingJobSeekerDepartmentHistoryRepositoryImpl(db)
	sendingJobSeekerDesiredCompanyScaleRepository := repository.NewSendingJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	chatGroupWithSendingJobSeekerRepository := repository.NewChatGroupWithSendingJobSeekerRepositoryImpl(db)
	chatMessageWithSendingJobSeekerRepository := repository.NewChatMessageWithSendingJobSeekerRepositoryImpl(db)
	jobSeekerInteractor := interactor.NewJobSeekerInteractorImpl(fb, sendgrid, oneSignal, slack, jobSeekerRepository, jobSeekerStudentHistoryRepository, jobSeekerWorkHistoryRepository, jobSeekerExperienceIndustryRepository, jobSeekerExperienceOccupationRepository, jobSeekerLicenseRepository, jobSeekerSelfPromotionRepository, jobSeekerDocumentRepository, jobSeekerDesiredIndustryRepository, jobSeekerDesiredOccupationRepository, jobSeekerDesiredWorkLocationRepository, jobSeekerDesiredHolidayTypeRepository, jobSeekerDevelopmentSkillRepository, jobSeekerLanguageSkillRepository, jobSeekerPCToolRepository, jobSeekerHideToAgentRepository, jobSeekerDepartmentHistoryRepository, jobSeekerDesiredCompanyScaleRepository, jobSeekerExperienceJobRepository, jobSeekerLPLoginTokenRepository, jobInformationRepository, jobInformationTargetRepository, jobInformationFeatureRepository, jobInformationPrefectureRepository, jobInformationWorkCharmPointRepository, jobInformationEmploymentStatusRepository, jobInformationRequiredLicenseRepository, jobInformationRequiredPCToolRepository, jobInformationRequiredLanguageRepository, jobInformationRequiredExperienceDevelopmentRepository, jobInformationRequiredExperienceJobRepository, jobInformationRequiredExperienceIndustryRepository, jobInformationRequiredExperienceOccupationRepository, jobInformationRequiredSocialExperienceRepository, jobInformationSelectionFlowPatternRepository, jobInformationSelectionInformationRepository, jobInformationOccupationRepository, jobInformationRequiredConditionRepository, jobInformationRequiredLanguageTypeRepository, jobInformationRequiredExperienceDevelopmentTypeRepository, agentRepository, agentStaffRepository, agentAllianceRepository, agentInflowChannelOptionRepository, enterpriseProfileRepository, enterpriseIndustryRepository, enterpriseReferenceMaterialRepository, chatGroupWithJobSeekerRepository, chatMessageWithJobSeekerRepository, initialQuestionnaireRepository, initialQuestionnaireDesiredIndustryRepository, initialQuestionnaireDesiredOccupationRepository, initialQuestionnaireDesiredWorkLocationRepository, taskGroupRepository, taskRepository, interviewTaskRepository, interviewTaskGroupRepository, sendingJobSeekerRepository, sendingJobSeekerStudentHistoryRepository, sendingJobSeekerWorkHistoryRepository, sendingJobSeekerExperienceIndustryRepository, sendingJobSeekerExperienceOccupationRepository, sendingJobSeekerLicenseRepository, sendingJobSeekerSelfPromotionRepository, sendingJobSeekerDocumentRepository, sendingJobSeekerDesiredIndustryRepository, sendingJobSeekerDesiredOccupationRepository, sendingJobSeekerDesiredWorkLocationRepository, sendingJobSeekerDesiredHolidayTypeRepository, sendingJobSeekerDevelopmentSkillRepository, sendingJobSeekerLanguageSkillRepository, sendingJobSeekerPCToolRepository, sendingJobSeekerDepartmentHistoryRepository, sendingJobSeekerDesiredCompanyScaleRepository, chatGroupWithSendingJobSeekerRepository, chatMessageWithSendingJobSeekerRepository)
	jobSeekerHandler := handler.NewJobSeekerHandlerImpl(jobSeekerInteractor)
	return jobSeekerHandler
}

// Task
func InitializeTaskHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.TaskHandler {
	taskRepository := repository.NewTaskRepositoryImpl(db)
	taskGroupRepository := repository.NewTaskGroupRepositoryImpl(db)
	taskGroupDocumentRepository := repository.NewTaskGroupDocumentRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobSeekerStudentHistoryRepository := repository.NewJobSeekerStudentHistoryRepositoryImpl(db)
	jobSeekerWorkHistoryRepository := repository.NewJobSeekerWorkHistoryRepositoryImpl(db)
	jobSeekerExperienceIndustryRepository := repository.NewJobSeekerExperienceIndustryRepositoryImpl(db)
	jobSeekerExperienceOccupationRepository := repository.NewJobSeekerExperienceOccupationRepositoryImpl(db)
	jobSeekerLicenseRepository := repository.NewJobSeekerLicenseRepositoryImpl(db)
	jobSeekerSelfPromotionRepository := repository.NewJobSeekerSelfPromotionRepositoryImpl(db)
	jobSeekerDocumentRepository := repository.NewJobSeekerDocumentRepositoryImpl(db)
	jobSeekerDesiredIndustryRepository := repository.NewJobSeekerDesiredIndustryRepositoryImpl(db)
	jobSeekerDesiredOccupationRepository := repository.NewJobSeekerDesiredOccupationRepositoryImpl(db)
	jobSeekerDesiredWorkLocationRepository := repository.NewJobSeekerDesiredWorkLocationRepositoryImpl(db)
	jobSeekerDesiredHolidayTypeRepository := repository.NewJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	jobSeekerDevelopmentSkillRepository := repository.NewJobSeekerDevelopmentSkillRepositoryImpl(db)
	jobSeekerLanguageSkillRepository := repository.NewJobSeekerLanguageSkillRepositoryImpl(db)
	jobSeekerPCToolRepository := repository.NewJobSeekerPCToolRepositoryImpl(db)
	jobSeekerHideToAgentRepository := repository.NewJobSeekerHideToAgentRepositoryImpl(db)
	jobSeekerDepartmentHistoryRepository := repository.NewJobSeekerDepartmentHistoryRepositoryImpl(db)
	jobSeekerDesiredCompanyScaleRepository := repository.NewJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	evaluationPointRepository := repository.NewEvaluationPointRepositoryImpl(db)
	chatMessageWithJobSeekerRepository := repository.NewChatMessageWithJobSeekerRepositoryImpl(db)
	selectionQuestionnaireRepository := repository.NewSelectionQuestionnaireRepositoryImpl(db)
	selectionQuestionnaireMyRankingRepository := repository.NewSelectionQuestionnaireMyRankingRepositoryImpl(db)
	jobInformationSelectionFlowPatternRepository := repository.NewJobInformationSelectionFlowPatternRepositoryImpl(db)
	jobInformationSelectionInformationRepository := repository.NewJobInformationSelectionInformationRepositoryImpl(db)
	saleRepository := repository.NewSaleRepositoryImpl(db)
	taskIsRecommendDocumentRepository := repository.NewTaskIsRecommendDocumentRepositoryImpl(db)
	jobSeekerScheduleRepository := repository.NewJobSeekerScheduleRepositoryImpl(db)
	jobSeekerRescheduleRepository := repository.NewJobSeekerRescheduleRepositoryImpl(db)
	chatGroupWithAgentRepository := repository.NewChatGroupWithAgentRepositoryImpl(db)
	chatThreadWithAgentRepository := repository.NewChatThreadWithAgentRepositoryImpl(db)
	chatMessageWithAgentRepository := repository.NewChatMessageWithAgentRepositoryImpl(db)
	chatMessageToUserWithAgentRepository := repository.NewChatMessageToUserWithAgentRepositoryImpl(db)
	emailWithJobSeekerRepository := repository.NewEmailWithJobSeekerRepositoryImpl(db)
	jobSeekerInterestedJobListingRepository := repository.NewJobSeekerInterestedJobListingRepositoryImpl(db)
	taskInteractor := interactor.NewTaskInteractorImpl(fb, sendgrid, oneSignal, taskRepository, taskGroupRepository, taskGroupDocumentRepository, agentRepository, agentStaffRepository, jobInformationRepository, jobSeekerRepository, jobSeekerStudentHistoryRepository, jobSeekerWorkHistoryRepository, jobSeekerExperienceIndustryRepository, jobSeekerExperienceOccupationRepository, jobSeekerLicenseRepository, jobSeekerSelfPromotionRepository, jobSeekerDocumentRepository, jobSeekerDesiredIndustryRepository, jobSeekerDesiredOccupationRepository, jobSeekerDesiredWorkLocationRepository, jobSeekerDesiredHolidayTypeRepository, jobSeekerDevelopmentSkillRepository, jobSeekerLanguageSkillRepository, jobSeekerPCToolRepository, jobSeekerHideToAgentRepository, jobSeekerDepartmentHistoryRepository, jobSeekerDesiredCompanyScaleRepository, chatGroupWithJobSeekerRepository, evaluationPointRepository, chatMessageWithJobSeekerRepository, selectionQuestionnaireRepository, selectionQuestionnaireMyRankingRepository, jobInformationSelectionFlowPatternRepository, jobInformationSelectionInformationRepository, saleRepository, taskIsRecommendDocumentRepository, jobSeekerScheduleRepository, jobSeekerRescheduleRepository, chatGroupWithAgentRepository, chatThreadWithAgentRepository, chatMessageWithAgentRepository, chatMessageToUserWithAgentRepository, emailWithJobSeekerRepository, jobSeekerInterestedJobListingRepository)
	taskHandler := handler.NewTaskHandlerImpl(taskInteractor)
	return taskHandler
}

// MessageTemplate
func InitializeMessageTemplateHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.MessageTemplateHandler {
	messageTemplateRepository := repository.NewMessageTemplateRepositoryImpl(db)
	messageTemplateInteractor := interactor.NewMessageTemplateInteractorImpl(fb, sendgrid, messageTemplateRepository)
	messageTemplateHandler := handler.NewMessageTemplateHandlerImpl(messageTemplateInteractor)
	return messageTemplateHandler
}

// SelectionQuestionnaire
func InitializeSelectionQuestionnaireHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.SelectionQuestionnaireHandler {
	selectionQuestionnaireRepository := repository.NewSelectionQuestionnaireRepositoryImpl(db)
	selectionQuestionnaireMyRankingRepository := repository.NewSelectionQuestionnaireMyRankingRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	selectionQuestionnaireInteractor := interactor.NewSelectionQuestionnaireInteractorImpl(fb, sendgrid, selectionQuestionnaireRepository, selectionQuestionnaireMyRankingRepository, jobSeekerRepository, jobInformationRepository, agentStaffRepository)
	selectionQuestionnaireHandler := handler.NewSelectionQuestionnaireHandlerImpl(selectionQuestionnaireInteractor)
	return selectionQuestionnaireHandler
}

// ChatGroupWithJobSeeker
func InitializeChatGroupWithJobSeekerHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.ChatGroupWithJobSeekerHandler {
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	chatGroupWithJobSeekerInteractor := interactor.NewChatGroupWithJobSeekerInteractorImpl(fb, sendgrid, chatGroupWithJobSeekerRepository)
	chatGroupWithJobSeekerHandler := handler.NewChatGroupWithJobSeekerHandlerImpl(chatGroupWithJobSeekerInteractor)
	return chatGroupWithJobSeekerHandler
}

// ChatMessageWithJobSeeker
func InitializeChatMessageWithJobSeekerHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.ChatMessageWithJobSeekerHandler {
	chatMessageWithJobSeekerRepository := repository.NewChatMessageWithJobSeekerRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	chatMessageWithSendingJobSeekerRepository := repository.NewChatMessageWithSendingJobSeekerRepositoryImpl(db)
	chatGroupWithSendingJobSeekerRepository := repository.NewChatGroupWithSendingJobSeekerRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	chatMessageWithJobSeekerInteractor := interactor.NewChatMessageWithJobSeekerInteractorImpl(fb, sendgrid, oneSignal, chatMessageWithJobSeekerRepository, chatGroupWithJobSeekerRepository, jobSeekerRepository, agentRepository, agentStaffRepository, chatMessageWithSendingJobSeekerRepository, chatGroupWithSendingJobSeekerRepository, sendingJobSeekerRepository)
	chatMessageWithJobSeekerHandler := handler.NewChatMessageWithJobSeekerHandlerImpl(chatMessageWithJobSeekerInteractor)
	return chatMessageWithJobSeekerHandler
}

// ChatGroupWithAgent
func InitializeChatGroupWithAgentHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.ChatGroupWithAgentHandler {
	chatGroupWithAgentRepository := repository.NewChatGroupWithAgentRepositoryImpl(db)
	chatThreadWithAgentRepository := repository.NewChatThreadWithAgentRepositoryImpl(db)
	chatMessageToUserWithAgentRepository := repository.NewChatMessageToUserWithAgentRepositoryImpl(db)
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	chatGroupWithAgentInteractor := interactor.NewChatGroupWithAgentInteractorImpl(fb, sendgrid, oneSignal, chatGroupWithAgentRepository, chatThreadWithAgentRepository, chatMessageToUserWithAgentRepository, agentAllianceRepository)
	chatGroupWithAgentHandler := handler.NewChatGroupWithAgentHandlerImpl(chatGroupWithAgentInteractor)
	return chatGroupWithAgentHandler
}

// ChatThreadWithAgent
func InitializeChatThreadWithAgentHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.ChatThreadWithAgentHandler {
	chatGroupWithAgentRepository := repository.NewChatGroupWithAgentRepositoryImpl(db)
	chatThreadWithAgentRepository := repository.NewChatThreadWithAgentRepositoryImpl(db)
	chatMessageWithAgentRepository := repository.NewChatMessageWithAgentRepositoryImpl(db)
	chatMessageToUserWithAgentRepository := repository.NewChatMessageToUserWithAgentRepositoryImpl(db)
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	chatThreadWithAgentInteractor := interactor.NewChatThreadWithAgentInteractorImpl(fb, sendgrid, oneSignal, chatGroupWithAgentRepository, chatThreadWithAgentRepository, chatMessageWithAgentRepository, chatMessageToUserWithAgentRepository, agentAllianceRepository)
	chatThreadWithAgentHandler := handler.NewChatThreadWithAgentHandlerImpl(chatThreadWithAgentInteractor)
	return chatThreadWithAgentHandler
}

// ChatMessageWithAgent
func InitializeChatMessageWithAgentHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.ChatMessageWithAgentHandler {
	chatMessageWithAgentRepository := repository.NewChatMessageWithAgentRepositoryImpl(db)
	chatGroupWithAgentRepository := repository.NewChatGroupWithAgentRepositoryImpl(db)
	chatThreadWithAgentRepository := repository.NewChatThreadWithAgentRepositoryImpl(db)
	chatMessageToUserWithAgentRepository := repository.NewChatMessageToUserWithAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	chatMessageWithAgentInteractor := interactor.NewChatMessageWithAgentInteractorImpl(fb, sendgrid, oneSignal, chatMessageWithAgentRepository, chatGroupWithAgentRepository, chatThreadWithAgentRepository, chatMessageToUserWithAgentRepository, agentStaffRepository)
	chatMessageWithAgentHandler := handler.NewChatMessageWithAgentHandlerImpl(chatMessageWithAgentInteractor)
	return chatMessageWithAgentHandler
}

// InterviewTask
func InitializeInterviewTaskHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.InterviewTaskHandler {
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	chatMessageWithJobSeekerRepository := repository.NewChatMessageWithJobSeekerRepositoryImpl(db)
	emailWithJobSeekerRepository := repository.NewEmailWithJobSeekerRepositoryImpl(db)
	interviewTaskInteractor := interactor.NewInterviewTaskInteractorImpl(fb, sendgrid, oneSignal, interviewTaskRepository, interviewTaskGroupRepository, jobSeekerRepository, chatGroupWithJobSeekerRepository, agentStaffRepository, chatMessageWithJobSeekerRepository, emailWithJobSeekerRepository)
	interviewTaskHandler := handler.NewInterviewTaskHandlerImpl(interviewTaskInteractor)
	return interviewTaskHandler
}

// InterviewAdjustmentTemplate
func InitializeInterviewAdjustmentTemplateHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.InterviewAdjustmentTemplateHandler {
	interviewAdjustmentTemplateRepository := repository.NewInterviewAdjustmentTemplateRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	interviewAdjustmentTemplateInteractor := interactor.NewInterviewAdjustmentTemplateInteractorImpl(fb, sendgrid, interviewAdjustmentTemplateRepository, jobSeekerRepository)
	interviewAdjustmentTemplateHandler := handler.NewInterviewAdjustmentTemplateHandlerImpl(interviewAdjustmentTemplateInteractor)
	return interviewAdjustmentTemplateHandler
}

// ScoutService
func InitializeScoutServiceHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal, appVar config.App, googleAPI config.GoogleAPI, slackAPI config.Slack) handler.ScoutServiceHandler {
	scoutServiceRepository := repository.NewScoutServiceRepositoryImpl(db)
	scoutServiceTemplateRepository := repository.NewScoutServiceTemplateRepositoryImpl(db)
	scoutServiceGetEntryTimeRepository := repository.NewScoutServiceGetEntryTimeRepositoryImpl(db)
	agentRobotRepository := repository.NewAgentRobotRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobSeekerStudentHistoryRepository := repository.NewJobSeekerStudentHistoryRepositoryImpl(db)
	jobSeekerWorkHistoryRepository := repository.NewJobSeekerWorkHistoryRepositoryImpl(db)
	jobSeekerExperienceIndustryRepository := repository.NewJobSeekerExperienceIndustryRepositoryImpl(db)
	jobSeekerExperienceOccupationRepository := repository.NewJobSeekerExperienceOccupationRepositoryImpl(db)
	jobSeekerLicenseRepository := repository.NewJobSeekerLicenseRepositoryImpl(db)
	jobSeekerSelfPromotionRepository := repository.NewJobSeekerSelfPromotionRepositoryImpl(db)
	jobSeekerDocumentRepository := repository.NewJobSeekerDocumentRepositoryImpl(db)
	jobSeekerDesiredIndustryRepository := repository.NewJobSeekerDesiredIndustryRepositoryImpl(db)
	jobSeekerDesiredOccupationRepository := repository.NewJobSeekerDesiredOccupationRepositoryImpl(db)
	jobSeekerDesiredWorkLocationRepository := repository.NewJobSeekerDesiredWorkLocationRepositoryImpl(db)
	jobSeekerDesiredHolidayTypeRepository := repository.NewJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	jobSeekerDevelopmentSkillRepository := repository.NewJobSeekerDevelopmentSkillRepositoryImpl(db)
	jobSeekerLanguageSkillRepository := repository.NewJobSeekerLanguageSkillRepositoryImpl(db)
	jobSeekerPCToolRepository := repository.NewJobSeekerPCToolRepositoryImpl(db)
	jobSeekerHideToAgentRepository := repository.NewJobSeekerHideToAgentRepositoryImpl(db)
	jobSeekerDepartmentHistoryRepository := repository.NewJobSeekerDepartmentHistoryRepositoryImpl(db)
	jobSeekerDesiredCompanyScaleRepository := repository.NewJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	interviewAdjustmentTemplateRepository := repository.NewInterviewAdjustmentTemplateRepositoryImpl(db)
	googleAuthenticationRepository := repository.NewGoogleAuthenticationRepositoryImpl(db)
	emailWithJobSeekerRepository := repository.NewEmailWithJobSeekerRepositoryImpl(db)
	userEntryRepository := repository.NewUserEntryRepositoryImpl(db)
	scoutServiceInteractor := interactor.NewScoutServiceInteractorImpl(fb, sendgrid, oneSignal, appVar, googleAPI, slackAPI, scoutServiceRepository, scoutServiceTemplateRepository, scoutServiceGetEntryTimeRepository, agentRobotRepository, agentStaffRepository, agentRepository, jobSeekerRepository, jobSeekerStudentHistoryRepository, jobSeekerWorkHistoryRepository, jobSeekerExperienceIndustryRepository, jobSeekerExperienceOccupationRepository, jobSeekerLicenseRepository, jobSeekerSelfPromotionRepository, jobSeekerDocumentRepository, jobSeekerDesiredIndustryRepository, jobSeekerDesiredOccupationRepository, jobSeekerDesiredWorkLocationRepository, jobSeekerDesiredHolidayTypeRepository, jobSeekerDevelopmentSkillRepository, jobSeekerLanguageSkillRepository, jobSeekerPCToolRepository, jobSeekerHideToAgentRepository, jobSeekerDepartmentHistoryRepository, jobSeekerDesiredCompanyScaleRepository, chatGroupWithJobSeekerRepository, interviewTaskGroupRepository, interviewTaskRepository, interviewAdjustmentTemplateRepository, googleAuthenticationRepository, emailWithJobSeekerRepository, userEntryRepository)
	scoutServiceHandler := handler.NewScoutServiceHandlerImpl(scoutServiceInteractor)
	return scoutServiceHandler
}

// Sale
func InitializeSaleHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.SaleHandler {
	saleRepository := repository.NewSaleRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	chatMessageWithJobSeekerRepository := repository.NewChatMessageWithJobSeekerRepositoryImpl(db)
	saleInteractor := interactor.NewSaleInteractorImpl(fb, sendgrid, oneSignal, saleRepository, jobSeekerRepository, chatGroupWithJobSeekerRepository, agentStaffRepository, chatMessageWithJobSeekerRepository)
	saleHandler := handler.NewSaleHandlerImpl(saleInteractor)
	return saleHandler
}

// AgentMonthlySale
func InitializeAgentMonthlySaleHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.AgentMonthlySaleHandler {
	agentMonthlySaleRepository := repository.NewAgentMonthlySaleRepositoryImpl(db)
	agentStaffMonthlySaleRepository := repository.NewAgentStaffMonthlySaleRepositoryImpl(db)
	agentSaleManagementRepository := repository.NewAgentSaleManagementRepositoryImpl(db)
	agentStaffSaleManagementRepository := repository.NewAgentStaffSaleManagementRepositoryImpl(db)
	saleRepository := repository.NewSaleRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	agentMonthlySaleInteractor := interactor.NewAgentMonthlySaleInteractorImpl(fb, sendgrid, agentMonthlySaleRepository, agentStaffMonthlySaleRepository, agentSaleManagementRepository, agentStaffSaleManagementRepository, saleRepository, taskRepository, interviewTaskRepository, interviewTaskGroupRepository)
	agentMonthlySaleHandler := handler.NewAgentMonthlySaleHandlerImpl(agentMonthlySaleInteractor)
	return agentMonthlySaleHandler
}

// AgentStaffMonthlySale
func InitializeAgentStaffMonthlySaleHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.AgentStaffMonthlySaleHandler {
	agentStaffMonthlySaleRepository := repository.NewAgentStaffMonthlySaleRepositoryImpl(db)
	agentStaffSaleManagementRepository := repository.NewAgentStaffSaleManagementRepositoryImpl(db)
	agentSaleManagementRepository := repository.NewAgentSaleManagementRepositoryImpl(db)
	saleRepository := repository.NewSaleRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	agentStaffMonthlySaleInteractor := interactor.NewAgentStaffMonthlySaleInteractorImpl(fb, sendgrid, agentStaffMonthlySaleRepository, agentStaffSaleManagementRepository, agentSaleManagementRepository, saleRepository, taskRepository, interviewTaskRepository, interviewTaskGroupRepository)
	agentStaffMonthlySaleHandler := handler.NewAgentStaffMonthlySaleHandlerImpl(agentStaffMonthlySaleInteractor)
	return agentStaffMonthlySaleHandler
}

// Schedule
func InitializeScheduleHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.ScheduleHandler {
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	taskGroupRepository := repository.NewTaskGroupRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	jobSeekerScheduleRepository := repository.NewJobSeekerScheduleRepositoryImpl(db)
	scheduleInteractor := interactor.NewScheduleInteractorImpl(fb, sendgrid, oneSignal, agentRepository, agentStaffRepository, interviewTaskGroupRepository, interviewTaskRepository, taskGroupRepository, taskRepository, jobSeekerScheduleRepository)
	scheduleHandler := handler.NewScheduleHandlerImpl(scheduleInteractor)
	return scheduleHandler
}

// Dashboard
func InitializeDashboardHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.DashboardHandler {
	agentMonthlySaleRepository := repository.NewAgentMonthlySaleRepositoryImpl(db)
	agentStaffMonthlySaleRepository := repository.NewAgentStaffMonthlySaleRepositoryImpl(db)
	agentSaleManagementRepository := repository.NewAgentSaleManagementRepositoryImpl(db)
	agentStaffSaleManagementRepository := repository.NewAgentStaffSaleManagementRepositoryImpl(db)
	saleRepository := repository.NewSaleRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobSeekerStudentHistoryRepository := repository.NewJobSeekerStudentHistoryRepositoryImpl(db)
	jobSeekerWorkHistoryRepository := repository.NewJobSeekerWorkHistoryRepositoryImpl(db)
	jobSeekerExperienceIndustryRepository := repository.NewJobSeekerExperienceIndustryRepositoryImpl(db)
	jobSeekerExperienceOccupationRepository := repository.NewJobSeekerExperienceOccupationRepositoryImpl(db)
	jobSeekerLicenseRepository := repository.NewJobSeekerLicenseRepositoryImpl(db)
	jobSeekerSelfPromotionRepository := repository.NewJobSeekerSelfPromotionRepositoryImpl(db)
	jobSeekerDocumentRepository := repository.NewJobSeekerDocumentRepositoryImpl(db)
	jobSeekerDesiredIndustryRepository := repository.NewJobSeekerDesiredIndustryRepositoryImpl(db)
	jobSeekerDesiredOccupationRepository := repository.NewJobSeekerDesiredOccupationRepositoryImpl(db)
	jobSeekerDesiredWorkLocationRepository := repository.NewJobSeekerDesiredWorkLocationRepositoryImpl(db)
	jobSeekerDesiredHolidayTypeRepository := repository.NewJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	jobSeekerDevelopmentSkillRepository := repository.NewJobSeekerDevelopmentSkillRepositoryImpl(db)
	jobSeekerLanguageSkillRepository := repository.NewJobSeekerLanguageSkillRepositoryImpl(db)
	jobSeekerPCToolRepository := repository.NewJobSeekerPCToolRepositoryImpl(db)
	jobSeekerHideToAgentRepository := repository.NewJobSeekerHideToAgentRepositoryImpl(db)
	jobSeekerDepartmentHistoryRepository := repository.NewJobSeekerDepartmentHistoryRepositoryImpl(db)
	jobSeekerDesiredCompanyScaleRepository := repository.NewJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	dashboardInteractor := interactor.NewDashboardInteractorImpl(fb, sendgrid, agentMonthlySaleRepository, agentStaffMonthlySaleRepository, agentSaleManagementRepository, agentStaffSaleManagementRepository, saleRepository, taskRepository, interviewTaskRepository, interviewTaskGroupRepository, jobSeekerRepository, jobSeekerStudentHistoryRepository, jobSeekerWorkHistoryRepository, jobSeekerExperienceIndustryRepository, jobSeekerExperienceOccupationRepository, jobSeekerLicenseRepository, jobSeekerSelfPromotionRepository, jobSeekerDocumentRepository, jobSeekerDesiredIndustryRepository, jobSeekerDesiredOccupationRepository, jobSeekerDesiredWorkLocationRepository, jobSeekerDesiredHolidayTypeRepository, jobSeekerDevelopmentSkillRepository, jobSeekerLanguageSkillRepository, jobSeekerPCToolRepository, jobSeekerHideToAgentRepository, jobSeekerDepartmentHistoryRepository, jobSeekerDesiredCompanyScaleRepository)
	dashboardHandler := handler.NewDashboardHandlerImpl(dashboardInteractor)
	return dashboardHandler
}

// JobSeekerSchedule
func InitializeJobSeekerScheduleHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.JobSeekerScheduleHandler {
	jobSeekerScheduleRepository := repository.NewJobSeekerScheduleRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	jobSeekerScheduleInteractor := interactor.NewJobSeekerScheduleInteractorImpl(fb, sendgrid, jobSeekerScheduleRepository, jobSeekerRepository, agentStaffRepository)
	jobSeekerScheduleHandler := handler.NewJobSeekerScheduleHandlerImpl(jobSeekerScheduleInteractor)
	return jobSeekerScheduleHandler
}

// InitialEnterpriseImporter
func InitializeInitialEnterpriseImporterHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.InitialEnterpriseImporterHandler {
	initialEnterpriseImporterRepository := repository.NewInitialEnterpriseImporterRepositoryImpl(db)
	enterpriseProfileRepository := repository.NewEnterpriseProfileRepositoryImpl(db)
	enterpriseIndustryRepository := repository.NewEnterpriseIndustryRepositoryImpl(db)
	enterpriseReferenceMaterialRepository := repository.NewEnterpriseReferenceMaterialRepositoryImpl(db)
	billingAddressRepository := repository.NewBillingAddressRepositoryImpl(db)
	billingAddressHRStaffRepository := repository.NewBillingAddressHRStaffRepositoryImpl(db)
	billingAddressRAStaffRepository := repository.NewBillingAddressRAStaffRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	jobInformationTargetRepository := repository.NewJobInformationTargetRepositoryImpl(db)
	jobInformationFeatureRepository := repository.NewJobInformationFeatureRepositoryImpl(db)
	jobInformationPrefectureRepository := repository.NewJobInformationPrefectureRepositoryImpl(db)
	jobInformationWorkCharmPointRepository := repository.NewJobInformationWorkCharmPointRepositoryImpl(db)
	jobInformationEmploymentStatusRepository := repository.NewJobInformationEmploymentStatusRepositoryImpl(db)
	jobInformationRequiredConditionRepository := repository.NewJobInformationRequiredConditionRepositoryImpl(db)
	jobInformationRequiredLicenseRepository := repository.NewJobInformationRequiredLicenseRepositoryImpl(db)
	jobInformationRequiredPCToolRepository := repository.NewJobInformationRequiredPCToolRepositoryImpl(db)
	jobInformationRequiredLanguageRepository := repository.NewJobInformationRequiredLanguageRepositoryImpl(db)
	jobInformationRequiredLanguageTypeRepository := repository.NewJobInformationRequiredLanguageTypeRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentRepository := repository.NewJobInformationRequiredExperienceDevelopmentRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentTypeRepository := repository.NewJobInformationRequiredExperienceDevelopmentTypeRepositoryImpl(db)
	jobInformationRequiredExperienceJobRepository := repository.NewJobInformationRequiredExperienceJobRepositoryImpl(db)
	jobInformationRequiredExperienceIndustryRepository := repository.NewJobInformationRequiredExperienceIndustryRepositoryImpl(db)
	jobInformationRequiredExperienceOccupationRepository := repository.NewJobInformationRequiredExperienceOccupationRepositoryImpl(db)
	jobInformationRequiredSocialExperienceRepository := repository.NewJobInformationRequiredSocialExperienceRepositoryImpl(db)
	jobInformationSelectionFlowPatternRepository := repository.NewJobInformationSelectionFlowPatternRepositoryImpl(db)
	jobInformationSelectionInformationRepository := repository.NewJobInformationSelectionInformationRepositoryImpl(db)
	jobInformationOccupationRepository := repository.NewJobInformationOccupationRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	initialEnterpriseImporterInteractor := interactor.NewInitialEnterpriseImporterInteractorImpl(fb, sendgrid, oneSignal, initialEnterpriseImporterRepository, enterpriseProfileRepository, enterpriseIndustryRepository, enterpriseReferenceMaterialRepository, billingAddressRepository, billingAddressHRStaffRepository, billingAddressRAStaffRepository, jobInformationRepository, jobInformationTargetRepository, jobInformationFeatureRepository, jobInformationPrefectureRepository, jobInformationWorkCharmPointRepository, jobInformationEmploymentStatusRepository, jobInformationRequiredConditionRepository, jobInformationRequiredLicenseRepository, jobInformationRequiredPCToolRepository, jobInformationRequiredLanguageRepository, jobInformationRequiredLanguageTypeRepository, jobInformationRequiredExperienceDevelopmentRepository, jobInformationRequiredExperienceDevelopmentTypeRepository, jobInformationRequiredExperienceJobRepository, jobInformationRequiredExperienceIndustryRepository, jobInformationRequiredExperienceOccupationRepository, jobInformationRequiredSocialExperienceRepository, jobInformationSelectionFlowPatternRepository, jobInformationSelectionInformationRepository, jobInformationOccupationRepository, agentRepository, agentStaffRepository)
	initialEnterpriseImporterHandler := handler.NewInitialEnterpriseImporterHandlerImpl(initialEnterpriseImporterInteractor)
	return initialEnterpriseImporterHandler
}

// NotificationForUser
func InitializeNotificationForUserHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.NotificationForUserHandler {
	notificationForUserRepository := repository.NewNotificationForUserRepositoryImpl(db)
	userNotificationViewRepository := repository.NewUserNotificationViewRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	notificationForUserInteractor := interactor.NewNotificationForUserInteractorImpl(fb, sendgrid, oneSignal, notificationForUserRepository, userNotificationViewRepository, agentRepository)
	notificationForUserHandler := handler.NewNotificationForUserHandlerImpl(notificationForUserInteractor)
	return notificationForUserHandler
}

// EmailWithJobSeeker
func InitializeEmailWithJobSeekerHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.EmailWithJobSeekerHandler {
	emailWithJobSeekerRepository := repository.NewEmailWithJobSeekerRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	emailWithJobSeekerInteractor := interactor.NewEmailWithJobSeekerInteractorImpl(fb, sendgrid, oneSignal, emailWithJobSeekerRepository, chatGroupWithJobSeekerRepository, agentStaffRepository)
	emailWithJobSeekerHandler := handler.NewEmailWithJobSeekerHandlerImpl(emailWithJobSeekerInteractor)
	return emailWithJobSeekerHandler
}

// DeploymentReflection
func InitializeDeploymentReflectionHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.DeploymentReflectionHandler {
	deploymentInformationRepository := repository.NewDeploymentInformationRepositoryImpl(db)
	deploymentReflectionRepository := repository.NewDeploymentReflectionRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	deploymentReflectionInteractor := interactor.NewDeploymentReflectionInteractorImpl(fb, sendgrid, oneSignal, deploymentInformationRepository, deploymentReflectionRepository, agentStaffRepository)
	deploymentReflectionHandler := handler.NewDeploymentReflectionHandlerImpl(deploymentReflectionInteractor)
	return deploymentReflectionHandler
}

// AgentInflowChannelOption
func InitializeAgentInflowChannelOptionHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.AgentInflowChannelOptionHandler {
	agentInflowChannelOptionRepository := repository.NewAgentInflowChannelOptionRepositoryImpl(db)
	agentInflowChannelOptionInteractor := interactor.NewAgentInflowChannelOptionInteractorImpl(fb, sendgrid, oneSignal, agentInflowChannelOptionRepository)
	agentInflowChannelOptionHandler := handler.NewAgentInflowChannelOptionHandlerImpl(agentInflowChannelOptionInteractor)
	return agentInflowChannelOptionHandler
}

// SendingCustomer
func InitializeSendingCustomerHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.SendingCustomerHandler {
	sendingCustomerRepository := repository.NewSendingCustomerRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	sendingCustomerInteractor := interactor.NewSendingCustomerInteractorImpl(fb, sendgrid, oneSignal, sendingCustomerRepository, sendingJobSeekerRepository, agentRepository, agentStaffRepository)
	sendingCustomerHandler := handler.NewSendingCustomerHandlerImpl(sendingCustomerInteractor)
	return sendingCustomerHandler
}

// SendingJobSeeker
func InitializeSendingJobSeekerHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.SendingJobSeekerHandler {
	sendingCustomerRepository := repository.NewSendingCustomerRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	sendingJobSeekerStudentHistoryRepository := repository.NewSendingJobSeekerStudentHistoryRepositoryImpl(db)
	sendingJobSeekerWorkHistoryRepository := repository.NewSendingJobSeekerWorkHistoryRepositoryImpl(db)
	sendingJobSeekerExperienceIndustryRepository := repository.NewSendingJobSeekerExperienceIndustryRepositoryImpl(db)
	sendingJobSeekerExperienceOccupationRepository := repository.NewSendingJobSeekerExperienceOccupationRepositoryImpl(db)
	sendingJobSeekerLicenseRepository := repository.NewSendingJobSeekerLicenseRepositoryImpl(db)
	sendingJobSeekerSelfPromotionRepository := repository.NewSendingJobSeekerSelfPromotionRepositoryImpl(db)
	sendingJobSeekerDocumentRepository := repository.NewSendingJobSeekerDocumentRepositoryImpl(db)
	sendingJobSeekerDesiredIndustryRepository := repository.NewSendingJobSeekerDesiredIndustryRepositoryImpl(db)
	sendingJobSeekerDesiredOccupationRepository := repository.NewSendingJobSeekerDesiredOccupationRepositoryImpl(db)
	sendingJobSeekerDesiredWorkLocationRepository := repository.NewSendingJobSeekerDesiredWorkLocationRepositoryImpl(db)
	sendingJobSeekerDesiredHolidayTypeRepository := repository.NewSendingJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	sendingJobSeekerDevelopmentSkillRepository := repository.NewSendingJobSeekerDevelopmentSkillRepositoryImpl(db)
	sendingJobSeekerLanguageSkillRepository := repository.NewSendingJobSeekerLanguageSkillRepositoryImpl(db)
	sendingJobSeekerPCToolRepository := repository.NewSendingJobSeekerPCToolRepositoryImpl(db)
	sendingJobSeekerDepartmentHistoryRepository := repository.NewSendingJobSeekerDepartmentHistoryRepositoryImpl(db)
	sendingJobSeekerDesiredCompanyScaleRepository := repository.NewSendingJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	chatGroupWithSendingJobSeekerRepository := repository.NewChatGroupWithSendingJobSeekerRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	sendingJobSeekerEndStatusRepository := repository.NewSendingJobSeekerEndStatusRepositoryImpl(db)
	sendingJobSeekerIsViewRepository := repository.NewSendingJobSeekerIsViewRepositoryImpl(db)
	sendingEnterpriseRepository := repository.NewSendingEnterpriseRepositoryImpl(db)
	sendingJobSeekerInteractor := interactor.NewSendingJobSeekerInteractorImpl(fb, sendgrid, oneSignal, sendingCustomerRepository, sendingJobSeekerRepository, sendingJobSeekerStudentHistoryRepository, sendingJobSeekerWorkHistoryRepository, sendingJobSeekerExperienceIndustryRepository, sendingJobSeekerExperienceOccupationRepository, sendingJobSeekerLicenseRepository, sendingJobSeekerSelfPromotionRepository, sendingJobSeekerDocumentRepository, sendingJobSeekerDesiredIndustryRepository, sendingJobSeekerDesiredOccupationRepository, sendingJobSeekerDesiredWorkLocationRepository, sendingJobSeekerDesiredHolidayTypeRepository, sendingJobSeekerDevelopmentSkillRepository, sendingJobSeekerLanguageSkillRepository, sendingJobSeekerPCToolRepository, sendingJobSeekerDepartmentHistoryRepository, sendingJobSeekerDesiredCompanyScaleRepository, agentRepository, agentStaffRepository, chatGroupWithSendingJobSeekerRepository, jobSeekerRepository, sendingJobSeekerEndStatusRepository, sendingJobSeekerIsViewRepository, sendingEnterpriseRepository)
	sendingJobSeekerHandler := handler.NewSendingJobSeekerHandlerImpl(sendingJobSeekerInteractor)
	return sendingJobSeekerHandler
}

// ChatGroupWithSendingJobSeeker
func InitializeChatGroupWithSendingJobSeekerHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.ChatGroupWithSendingJobSeekerHandler {
	chatGroupWithSendingJobSeekerRepository := repository.NewChatGroupWithSendingJobSeekerRepositoryImpl(db)
	chatGroupWithSendingJobSeekerInteractor := interactor.NewChatGroupWithSendingJobSeekerInteractorImpl(fb, sendgrid, chatGroupWithSendingJobSeekerRepository)
	chatGroupWithSendingJobSeekerHandler := handler.NewChatGroupWithSendingJobSeekerHandlerImpl(chatGroupWithSendingJobSeekerInteractor)
	return chatGroupWithSendingJobSeekerHandler
}

// ChatMessageWithSendingJobSeeker
func InitializeChatMessageWithSendingJobSeekerHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.ChatMessageWithSendingJobSeekerHandler {
	chatMessageWithSendingJobSeekerRepository := repository.NewChatMessageWithSendingJobSeekerRepositoryImpl(db)
	chatGroupWithSendingJobSeekerRepository := repository.NewChatGroupWithSendingJobSeekerRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	chatMessageWithSendingJobSeekerInteractor := interactor.NewChatMessageWithSendingJobSeekerInteractorImpl(fb, sendgrid, oneSignal, chatMessageWithSendingJobSeekerRepository, chatGroupWithSendingJobSeekerRepository, sendingJobSeekerRepository, agentRepository, agentStaffRepository)
	chatMessageWithSendingJobSeekerHandler := handler.NewChatMessageWithSendingJobSeekerHandlerImpl(chatMessageWithSendingJobSeekerInteractor)
	return chatMessageWithSendingJobSeekerHandler
}

// EmailWithSendingJobSeeker
func InitializeEmailWithSendingJobSeekerHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) handler.EmailWithSendingJobSeekerHandler {
	emailWithSendingJobSeekerRepository := repository.NewEmailWithSendingJobSeekerRepositoryImpl(db)
	chatGroupWithSendingJobSeekerRepository := repository.NewChatGroupWithSendingJobSeekerRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	emailWithSendingJobSeekerInteractor := interactor.NewEmailWithSendingJobSeekerInteractorImpl(fb, sendgrid, oneSignal, emailWithSendingJobSeekerRepository, chatGroupWithSendingJobSeekerRepository, agentStaffRepository)
	emailWithSendingJobSeekerHandler := handler.NewEmailWithSendingJobSeekerHandlerImpl(emailWithSendingJobSeekerInteractor)
	return emailWithSendingJobSeekerHandler
}

// SendingEnterprise
func InitializeSendingEnterpriseHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.SendingEnterpriseHandler {
	sendingEnterpriseRepository := repository.NewSendingEnterpriseRepositoryImpl(db)
	sendingBillingAddressRepository := repository.NewSendingBillingAddressRepositoryImpl(db)
	sendingJobInformationRepository := repository.NewSendingJobInformationRepositoryImpl(db)
	sendingBillingAddressStaffRepository := repository.NewSendingBillingAddressStaffRepositoryImpl(db)
	sendingEnterpriseReferenceMaterialRepository := repository.NewSendingEnterpriseReferenceMaterialRepositoryImpl(db)
	sendingPhaseRepository := repository.NewSendingPhaseRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	sendingJobSeekerStudentHistoryRepository := repository.NewSendingJobSeekerStudentHistoryRepositoryImpl(db)
	sendingJobSeekerWorkHistoryRepository := repository.NewSendingJobSeekerWorkHistoryRepositoryImpl(db)
	sendingJobSeekerExperienceIndustryRepository := repository.NewSendingJobSeekerExperienceIndustryRepositoryImpl(db)
	sendingJobSeekerExperienceOccupationRepository := repository.NewSendingJobSeekerExperienceOccupationRepositoryImpl(db)
	sendingJobSeekerLicenseRepository := repository.NewSendingJobSeekerLicenseRepositoryImpl(db)
	sendingJobSeekerSelfPromotionRepository := repository.NewSendingJobSeekerSelfPromotionRepositoryImpl(db)
	sendingJobSeekerDocumentRepository := repository.NewSendingJobSeekerDocumentRepositoryImpl(db)
	sendingJobSeekerDesiredIndustryRepository := repository.NewSendingJobSeekerDesiredIndustryRepositoryImpl(db)
	sendingJobSeekerDesiredOccupationRepository := repository.NewSendingJobSeekerDesiredOccupationRepositoryImpl(db)
	sendingJobSeekerDesiredWorkLocationRepository := repository.NewSendingJobSeekerDesiredWorkLocationRepositoryImpl(db)
	sendingJobSeekerDesiredHolidayTypeRepository := repository.NewSendingJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	sendingJobSeekerDevelopmentSkillRepository := repository.NewSendingJobSeekerDevelopmentSkillRepositoryImpl(db)
	sendingJobSeekerLanguageSkillRepository := repository.NewSendingJobSeekerLanguageSkillRepositoryImpl(db)
	sendingJobSeekerPCToolRepository := repository.NewSendingJobSeekerPCToolRepositoryImpl(db)
	sendingJobSeekerDepartmentHistoryRepository := repository.NewSendingJobSeekerDepartmentHistoryRepositoryImpl(db)
	sendingJobSeekerDesiredCompanyScaleRepository := repository.NewSendingJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	sendingCustomerRepository := repository.NewSendingCustomerRepositoryImpl(db)
	sendingJobSeekerDesiredJobInformationRepository := repository.NewSendingJobSeekerDesiredJobInformationRepositoryImpl(db)
	sendingShareDocumentRepository := repository.NewSendingShareDocumentRepositoryImpl(db)
	sendingEnterpriseSpecialityRepository := repository.NewSendingEnterpriseSpecialityRepositoryImpl(db)
	sendingEnterpriseInteractor := interactor.NewSendingEnterpriseInteractorImpl(fb, sendgrid, sendingEnterpriseRepository, sendingBillingAddressRepository, sendingJobInformationRepository, sendingBillingAddressStaffRepository, sendingEnterpriseReferenceMaterialRepository, sendingPhaseRepository, sendingJobSeekerRepository, sendingJobSeekerStudentHistoryRepository, sendingJobSeekerWorkHistoryRepository, sendingJobSeekerExperienceIndustryRepository, sendingJobSeekerExperienceOccupationRepository, sendingJobSeekerLicenseRepository, sendingJobSeekerSelfPromotionRepository, sendingJobSeekerDocumentRepository, sendingJobSeekerDesiredIndustryRepository, sendingJobSeekerDesiredOccupationRepository, sendingJobSeekerDesiredWorkLocationRepository, sendingJobSeekerDesiredHolidayTypeRepository, sendingJobSeekerDevelopmentSkillRepository, sendingJobSeekerLanguageSkillRepository, sendingJobSeekerPCToolRepository, sendingJobSeekerDepartmentHistoryRepository, sendingJobSeekerDesiredCompanyScaleRepository, sendingCustomerRepository, sendingJobSeekerDesiredJobInformationRepository, sendingShareDocumentRepository, sendingEnterpriseSpecialityRepository)
	sendingEnterpriseHandler := handler.NewSendingEnterpriseHandlerImpl(sendingEnterpriseInteractor)
	return sendingEnterpriseHandler
}

// SendingBillingAddress
func InitializeSendingBillingAddressHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.SendingBillingAddressHandler {
	sendingBillingAddressRepository := repository.NewSendingBillingAddressRepositoryImpl(db)
	sendingBillingAddressStaffRepository := repository.NewSendingBillingAddressStaffRepositoryImpl(db)
	sendingJobInformationRepository := repository.NewSendingJobInformationRepositoryImpl(db)
	sendingBillingAddressInteractor := interactor.NewSendingBillingAddressInteractorImpl(fb, sendgrid, sendingBillingAddressRepository, sendingBillingAddressStaffRepository, sendingJobInformationRepository)
	sendingBillingAddressHandler := handler.NewSendingBillingAddressHandlerImpl(sendingBillingAddressInteractor)
	return sendingBillingAddressHandler
}

// SendingJobInformation
func InitializeSendingJobInformationHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.SendingJobInformationHandler {
	sendingJobInformationRepository := repository.NewSendingJobInformationRepositoryImpl(db)
	sendingEnterpriseRepository := repository.NewSendingEnterpriseRepositoryImpl(db)
	sendingJobInformationTargetRepository := repository.NewSendingJobInformationTargetRepositoryImpl(db)
	sendingJobInformationFeatureRepository := repository.NewSendingJobInformationFeatureRepositoryImpl(db)
	sendingJobInformationPrefectureRepository := repository.NewSendingJobInformationPrefectureRepositoryImpl(db)
	sendingJobInformationWorkCharmPointRepository := repository.NewSendingJobInformationWorkCharmPointRepositoryImpl(db)
	sendingJobInformationEmploymentStatusRepository := repository.NewSendingJobInformationEmploymentStatusRepositoryImpl(db)
	sendingJobInformationRequiredLicenseRepository := repository.NewSendingJobInformationRequiredLicenseRepositoryImpl(db)
	sendingJobInformationRequiredPCToolRepository := repository.NewSendingJobInformationRequiredPCToolRepositoryImpl(db)
	sendingJobInformationRequiredLanguageRepository := repository.NewSendingJobInformationRequiredLanguageRepositoryImpl(db)
	sendingJobInformationRequiredExperienceDevelopmentRepository := repository.NewSendingJobInformationRequiredExperienceDevelopmentRepositoryImpl(db)
	sendingJobInformationRequiredExperienceJobRepository := repository.NewSendingJobInformationRequiredExperienceJobRepositoryImpl(db)
	sendingJobInformationRequiredExperienceIndustryRepository := repository.NewSendingJobInformationRequiredExperienceIndustryRepositoryImpl(db)
	sendingJobInformationRequiredExperienceOccupationRepository := repository.NewSendingJobInformationRequiredExperienceOccupationRepositoryImpl(db)
	sendingJobInformationRequiredSocialExperienceRepository := repository.NewSendingJobInformationRequiredSocialExperienceRepositoryImpl(db)
	sendingJobInformationOccupationRepository := repository.NewSendingJobInformationOccupationRepositoryImpl(db)
	sendingJobInformationRequiredConditionRepository := repository.NewSendingJobInformationRequiredConditionRepositoryImpl(db)
	sendingJobInformationRequiredExperienceDevelopmentTypeRepository := repository.NewSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryImpl(db)
	sendingJobInformationRequiredLanguageTypeRepository := repository.NewSendingJobInformationRequiredLanguageTypeRepositoryImpl(db)
	sendingJobInformationIndustryRepository := repository.NewSendingJobInformationIndustryRepositoryImpl(db)
	sendingJobInformationInteractor := interactor.NewSendingJobInformationInteractorImpl(fb, sendgrid, sendingJobInformationRepository, sendingEnterpriseRepository, sendingJobInformationTargetRepository, sendingJobInformationFeatureRepository, sendingJobInformationPrefectureRepository, sendingJobInformationWorkCharmPointRepository, sendingJobInformationEmploymentStatusRepository, sendingJobInformationRequiredLicenseRepository, sendingJobInformationRequiredPCToolRepository, sendingJobInformationRequiredLanguageRepository, sendingJobInformationRequiredExperienceDevelopmentRepository, sendingJobInformationRequiredExperienceJobRepository, sendingJobInformationRequiredExperienceIndustryRepository, sendingJobInformationRequiredExperienceOccupationRepository, sendingJobInformationRequiredSocialExperienceRepository, sendingJobInformationOccupationRepository, sendingJobInformationRequiredConditionRepository, sendingJobInformationRequiredExperienceDevelopmentTypeRepository, sendingJobInformationRequiredLanguageTypeRepository, sendingJobInformationIndustryRepository)
	sendingJobInformationHandler := handler.NewSendingJobInformationHandlerImpl(sendingJobInformationInteractor)
	return sendingJobInformationHandler
}

// SendingPhase
func InitializeSendingPhaseHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.SendingPhaseHandler {
	sendingPhaseRepository := repository.NewSendingPhaseRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	sendingCustomerRepository := repository.NewSendingCustomerRepositoryImpl(db)
	sendingPhaseEndStatusRepository := repository.NewSendingPhaseEndStatusRepositoryImpl(db)
	sendingPhaseInteractor := interactor.NewSendingPhaseInteractorImpl(fb, sendgrid, sendingPhaseRepository, sendingJobSeekerRepository, sendingCustomerRepository, sendingPhaseEndStatusRepository)
	sendingPhaseHandler := handler.NewSendingPhaseHandlerImpl(sendingPhaseInteractor)
	return sendingPhaseHandler
}

// SendingJobSeekerDesiredJobInformation
func InitializeSendingJobSeekerDesiredJobInformationHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.SendingJobSeekerDesiredJobInformationHandler {
	sendingJobSeekerDesiredJobInformationRepository := repository.NewSendingJobSeekerDesiredJobInformationRepositoryImpl(db)
	sendingJobSeekerDesiredJobInformationInteractor := interactor.NewSendingJobSeekerDesiredJobInformationInteractorImpl(fb, sendgrid, sendingJobSeekerDesiredJobInformationRepository)
	sendingJobSeekerDesiredJobInformationHandler := handler.NewSendingJobSeekerDesiredJobInformationHandlerImpl(sendingJobSeekerDesiredJobInformationInteractor)
	return sendingJobSeekerDesiredJobInformationHandler
}

// SendingSale
func InitializeSendingSaleHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) handler.SendingSaleHandler {
	sendingSaleRepository := repository.NewSendingSaleRepositoryImpl(db)
	sendingEnterpriseRepository := repository.NewSendingEnterpriseRepositoryImpl(db)
	sendingPhaseRepository := repository.NewSendingPhaseRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	sendingCustomerRepository := repository.NewSendingCustomerRepositoryImpl(db)
	sendingSaleInteractor := interactor.NewSendingSaleInteractorImpl(fb, sendgrid, sendingSaleRepository, sendingEnterpriseRepository, sendingPhaseRepository, sendingJobSeekerRepository, sendingCustomerRepository)
	sendingSaleHandler := handler.NewSendingSaleHandlerImpl(sendingSaleInteractor)
	return sendingSaleHandler
}

// GoogleAuthentication
func InitializeGoogleAuthenticationHandler(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, googleAPI config.GoogleAPI) handler.GoogleAuthenticationHandler {
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	googleAuthenticationRepository := repository.NewGoogleAuthenticationRepositoryImpl(db)
	googleAuthenticationInteractor := interactor.NewGoogleAuthenticationInteractorImpl(fb, sendgrid, googleAPI, agentRepository, agentStaffRepository, googleAuthenticationRepository)
	googleAuthenticationHandler := handler.NewGoogleAuthenticationHandlerImpl(googleAuthenticationInteractor)
	return googleAuthenticationHandler
}

// Session
func InitializeSessionInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.SessionInteractor {
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	enterpriseProfileRepository := repository.NewEnterpriseProfileRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobSeekerLPLoginTokenRepository := repository.NewJobSeekerLPLoginTokenRepositoryImpl(db)
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	sessionInteractor := interactor.NewSessionInteractorImpl(fb, sendgrid, agentRepository, agentStaffRepository, enterpriseProfileRepository, jobInformationRepository, jobSeekerRepository, jobSeekerLPLoginTokenRepository, agentAllianceRepository, sendingJobSeekerRepository)
	return sessionInteractor
}

// Admin
func InitializeAdminInteractor(db interfaces.SQLExecuter, appConfig config.App) interactor.AdminInteractor {
	adminInteractor := interactor.NewAdminInteractorImpl(appConfig)
	return adminInteractor
}

// Agent
func InitializeAgentInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.AgentInteractor {
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	chatMessageWithJobSeekerRepository := repository.NewChatMessageWithJobSeekerRepositoryImpl(db)
	chatGroupWithAgentRepository := repository.NewChatGroupWithAgentRepositoryImpl(db)
	notificationForUserRepository := repository.NewNotificationForUserRepositoryImpl(db)
	userNotificationViewRepository := repository.NewUserNotificationViewRepositoryImpl(db)
	agentInteractor := interactor.NewAgentInteractorImpl(fb, sendgrid, agentRepository, agentAllianceRepository, agentStaffRepository, jobSeekerRepository, chatGroupWithJobSeekerRepository, chatMessageWithJobSeekerRepository, chatGroupWithAgentRepository, notificationForUserRepository, userNotificationViewRepository)
	return agentInteractor
}

// AgentStaff
func InitializeAgentStaffInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.AgentStaffInteractor {
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	enterpriseProfileRepository := repository.NewEnterpriseProfileRepositoryImpl(db)
	billingAddressRepository := repository.NewBillingAddressRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	notificationForUserRepository := repository.NewNotificationForUserRepositoryImpl(db)
	userNotificationViewRepository := repository.NewUserNotificationViewRepositoryImpl(db)
	agentStaffInteractor := interactor.NewAgentStaffInteractorImpl(fb, sendgrid, agentStaffRepository, agentRepository, enterpriseProfileRepository, billingAddressRepository, jobSeekerRepository, notificationForUserRepository, userNotificationViewRepository)
	return agentStaffInteractor
}

// AgentAlliance
func InitializeAgentAllianceInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.AgentAllianceInteractor {
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	chatGroupWithAgentRepository := repository.NewChatGroupWithAgentRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	agentAllianceInteractor := interactor.NewAgentAllianceInteractorImpl(fb, sendgrid, agentAllianceRepository, agentRepository, chatGroupWithAgentRepository, taskRepository)
	return agentAllianceInteractor
}

// AgentRobot
func InitializeAgentRobotInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.AgentRobotInteractor {
	agentRobotRepository := repository.NewAgentRobotRepositoryImpl(db)
	scoutServiceRepository := repository.NewScoutServiceRepositoryImpl(db)
	scoutServiceGetEntryTimeRepository := repository.NewScoutServiceGetEntryTimeRepositoryImpl(db)
	scoutServiceTemplateRepository := repository.NewScoutServiceTemplateRepositoryImpl(db)
	agentRobotInteractor := interactor.NewAgentRobotInteractorImpl(fb, sendgrid, oneSignal, agentRobotRepository, scoutServiceRepository, scoutServiceGetEntryTimeRepository, scoutServiceTemplateRepository)
	return agentRobotInteractor
}

// EnterpriseProfile
func InitializeEnterpriseProfileInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.EnterpriseProfileInteractor {
	enterpriseProfileRepository := repository.NewEnterpriseProfileRepositoryImpl(db)
	enterpriseIndustryRepository := repository.NewEnterpriseIndustryRepositoryImpl(db)
	enterpriseReferenceMaterialRepository := repository.NewEnterpriseReferenceMaterialRepositoryImpl(db)
	enterpriseActivityRepository := repository.NewEnterpriseActivityRepositoryImpl(db)
	billingAddressRepository := repository.NewBillingAddressRepositoryImpl(db)
	billingAddressHRStaffRepository := repository.NewBillingAddressHRStaffRepositoryImpl(db)
	billingAddressRAStaffRepository := repository.NewBillingAddressRAStaffRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	jobInformationTargetRepository := repository.NewJobInformationTargetRepositoryImpl(db)
	jobInformationFeatureRepository := repository.NewJobInformationFeatureRepositoryImpl(db)
	jobInformationPrefectureRepository := repository.NewJobInformationPrefectureRepositoryImpl(db)
	jobInformationWorkCharmPointRepository := repository.NewJobInformationWorkCharmPointRepositoryImpl(db)
	jobInformationEmploymentStatusRepository := repository.NewJobInformationEmploymentStatusRepositoryImpl(db)
	jobInformationRequiredConditionRepository := repository.NewJobInformationRequiredConditionRepositoryImpl(db)
	jobInformationRequiredLicenseRepository := repository.NewJobInformationRequiredLicenseRepositoryImpl(db)
	jobInformationRequiredPCToolRepository := repository.NewJobInformationRequiredPCToolRepositoryImpl(db)
	jobInformationRequiredLanguageRepository := repository.NewJobInformationRequiredLanguageRepositoryImpl(db)
	jobInformationRequiredLanguageTypeRepository := repository.NewJobInformationRequiredLanguageTypeRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentRepository := repository.NewJobInformationRequiredExperienceDevelopmentRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentTypeRepository := repository.NewJobInformationRequiredExperienceDevelopmentTypeRepositoryImpl(db)
	jobInformationRequiredExperienceJobRepository := repository.NewJobInformationRequiredExperienceJobRepositoryImpl(db)
	jobInformationRequiredExperienceIndustryRepository := repository.NewJobInformationRequiredExperienceIndustryRepositoryImpl(db)
	jobInformationRequiredExperienceOccupationRepository := repository.NewJobInformationRequiredExperienceOccupationRepositoryImpl(db)
	jobInformationRequiredSocialExperienceRepository := repository.NewJobInformationRequiredSocialExperienceRepositoryImpl(db)
	jobInformationSelectionFlowPatternRepository := repository.NewJobInformationSelectionFlowPatternRepositoryImpl(db)
	jobInformationSelectionInformationRepository := repository.NewJobInformationSelectionInformationRepositoryImpl(db)
	jobInformationOccupationRepository := repository.NewJobInformationOccupationRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	jobInformationHideToAgentRepository := repository.NewJobInformationHideToAgentRepositoryImpl(db)
	jobInformationExternalIDRepository := repository.NewJobInformationExternalIDRepositoryImpl(db)
	enterpriseProfileInteractor := interactor.NewEnterpriseProfileInteractorImpl(fb, sendgrid, enterpriseProfileRepository, enterpriseIndustryRepository, enterpriseReferenceMaterialRepository, enterpriseActivityRepository, billingAddressRepository, billingAddressHRStaffRepository, billingAddressRAStaffRepository, jobInformationRepository, jobInformationTargetRepository, jobInformationFeatureRepository, jobInformationPrefectureRepository, jobInformationWorkCharmPointRepository, jobInformationEmploymentStatusRepository, jobInformationRequiredConditionRepository, jobInformationRequiredLicenseRepository, jobInformationRequiredPCToolRepository, jobInformationRequiredLanguageRepository, jobInformationRequiredLanguageTypeRepository, jobInformationRequiredExperienceDevelopmentRepository, jobInformationRequiredExperienceDevelopmentTypeRepository, jobInformationRequiredExperienceJobRepository, jobInformationRequiredExperienceIndustryRepository, jobInformationRequiredExperienceOccupationRepository, jobInformationRequiredSocialExperienceRepository, jobInformationSelectionFlowPatternRepository, jobInformationSelectionInformationRepository, jobInformationOccupationRepository, agentRepository, agentStaffRepository, jobInformationHideToAgentRepository, jobInformationExternalIDRepository)
	return enterpriseProfileInteractor
}

// BillingAddress
func InitializeBillingAddressInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.BillingAddressInteractor {
	billingAddressRepository := repository.NewBillingAddressRepositoryImpl(db)
	billingAddressHRStaffRepository := repository.NewBillingAddressHRStaffRepositoryImpl(db)
	billingAddressRAStaffRepository := repository.NewBillingAddressRAStaffRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	taskGroupRepository := repository.NewTaskGroupRepositoryImpl(db)
	billingAddressInteractor := interactor.NewBillingAddressInteractorImpl(fb, sendgrid, billingAddressRepository, billingAddressHRStaffRepository, billingAddressRAStaffRepository, jobInformationRepository, agentRepository, agentStaffRepository, taskGroupRepository)
	return billingAddressInteractor
}

// JobInformation
func InitializeJobInformationInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.JobInformationInteractor {
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	jobInformationTargetRepository := repository.NewJobInformationTargetRepositoryImpl(db)
	jobInformationFeatureRepository := repository.NewJobInformationFeatureRepositoryImpl(db)
	jobInformationPrefectureRepository := repository.NewJobInformationPrefectureRepositoryImpl(db)
	jobInformationWorkCharmPointRepository := repository.NewJobInformationWorkCharmPointRepositoryImpl(db)
	jobInformationEmploymentStatusRepository := repository.NewJobInformationEmploymentStatusRepositoryImpl(db)
	jobInformationRequiredLicenseRepository := repository.NewJobInformationRequiredLicenseRepositoryImpl(db)
	jobInformationRequiredPCToolRepository := repository.NewJobInformationRequiredPCToolRepositoryImpl(db)
	jobInformationRequiredLanguageRepository := repository.NewJobInformationRequiredLanguageRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentRepository := repository.NewJobInformationRequiredExperienceDevelopmentRepositoryImpl(db)
	jobInformationRequiredExperienceJobRepository := repository.NewJobInformationRequiredExperienceJobRepositoryImpl(db)
	jobInformationRequiredExperienceIndustryRepository := repository.NewJobInformationRequiredExperienceIndustryRepositoryImpl(db)
	jobInformationRequiredExperienceOccupationRepository := repository.NewJobInformationRequiredExperienceOccupationRepositoryImpl(db)
	jobInformationRequiredSocialExperienceRepository := repository.NewJobInformationRequiredSocialExperienceRepositoryImpl(db)
	jobInformationSelectionFlowPatternRepository := repository.NewJobInformationSelectionFlowPatternRepositoryImpl(db)
	jobInformationSelectionInformationRepository := repository.NewJobInformationSelectionInformationRepositoryImpl(db)
	jobInformationHideToAgentRepository := repository.NewJobInformationHideToAgentRepositoryImpl(db)
	jobInformationOccupationRepository := repository.NewJobInformationOccupationRepositoryImpl(db)
	jobInformationRequiredConditionRepository := repository.NewJobInformationRequiredConditionRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentTypeRepository := repository.NewJobInformationRequiredExperienceDevelopmentTypeRepositoryImpl(db)
	jobInformationRequiredLanguageTypeRepository := repository.NewJobInformationRequiredLanguageTypeRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobSeekerStudentHistoryRepository := repository.NewJobSeekerStudentHistoryRepositoryImpl(db)
	jobSeekerWorkHistoryRepository := repository.NewJobSeekerWorkHistoryRepositoryImpl(db)
	jobSeekerExperienceIndustryRepository := repository.NewJobSeekerExperienceIndustryRepositoryImpl(db)
	jobSeekerExperienceOccupationRepository := repository.NewJobSeekerExperienceOccupationRepositoryImpl(db)
	jobSeekerExperienceJobRepository := repository.NewJobSeekerExperienceJobRepositoryImpl(db)
	jobSeekerLicenseRepository := repository.NewJobSeekerLicenseRepositoryImpl(db)
	jobSeekerSelfPromotionRepository := repository.NewJobSeekerSelfPromotionRepositoryImpl(db)
	jobSeekerDocumentRepository := repository.NewJobSeekerDocumentRepositoryImpl(db)
	jobSeekerDesiredIndustryRepository := repository.NewJobSeekerDesiredIndustryRepositoryImpl(db)
	jobSeekerDesiredOccupationRepository := repository.NewJobSeekerDesiredOccupationRepositoryImpl(db)
	jobSeekerDesiredWorkLocationRepository := repository.NewJobSeekerDesiredWorkLocationRepositoryImpl(db)
	jobSeekerDesiredHolidayTypeRepository := repository.NewJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	jobSeekerDevelopmentSkillRepository := repository.NewJobSeekerDevelopmentSkillRepositoryImpl(db)
	jobSeekerLanguageSkillRepository := repository.NewJobSeekerLanguageSkillRepositoryImpl(db)
	jobSeekerPCToolRepository := repository.NewJobSeekerPCToolRepositoryImpl(db)
	jobSeekerDepartmentHistoryRepository := repository.NewJobSeekerDepartmentHistoryRepositoryImpl(db)
	jobSeekerDesiredCompanyScaleRepository := repository.NewJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	enterpriseProfileRepository := repository.NewEnterpriseProfileRepositoryImpl(db)
	enterpriseIndustryRepository := repository.NewEnterpriseIndustryRepositoryImpl(db)
	enterpriseReferenceMaterialRepository := repository.NewEnterpriseReferenceMaterialRepositoryImpl(db)
	taskGroupRepository := repository.NewTaskGroupRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	selectionQuestionnaireRepository := repository.NewSelectionQuestionnaireRepositoryImpl(db)
	evaluationPointRepository := repository.NewEvaluationPointRepositoryImpl(db)
	billingAddressRepository := repository.NewBillingAddressRepositoryImpl(db)
	jobSeekerInterestedJobListingRepository := repository.NewJobSeekerInterestedJobListingRepositoryImpl(db)
	jobInformationInteractor := interactor.NewJobInformationInteractorImpl(fb, sendgrid, jobInformationRepository, jobInformationTargetRepository, jobInformationFeatureRepository, jobInformationPrefectureRepository, jobInformationWorkCharmPointRepository, jobInformationEmploymentStatusRepository, jobInformationRequiredLicenseRepository, jobInformationRequiredPCToolRepository, jobInformationRequiredLanguageRepository, jobInformationRequiredExperienceDevelopmentRepository, jobInformationRequiredExperienceJobRepository, jobInformationRequiredExperienceIndustryRepository, jobInformationRequiredExperienceOccupationRepository, jobInformationRequiredSocialExperienceRepository, jobInformationSelectionFlowPatternRepository, jobInformationSelectionInformationRepository, jobInformationHideToAgentRepository, jobInformationOccupationRepository, jobInformationRequiredConditionRepository, jobInformationRequiredExperienceDevelopmentTypeRepository, jobInformationRequiredLanguageTypeRepository, jobSeekerRepository, jobSeekerStudentHistoryRepository, jobSeekerWorkHistoryRepository, jobSeekerExperienceIndustryRepository, jobSeekerExperienceOccupationRepository, jobSeekerExperienceJobRepository, jobSeekerLicenseRepository, jobSeekerSelfPromotionRepository, jobSeekerDocumentRepository, jobSeekerDesiredIndustryRepository, jobSeekerDesiredOccupationRepository, jobSeekerDesiredWorkLocationRepository, jobSeekerDesiredHolidayTypeRepository, jobSeekerDevelopmentSkillRepository, jobSeekerLanguageSkillRepository, jobSeekerPCToolRepository, jobSeekerDepartmentHistoryRepository, jobSeekerDesiredCompanyScaleRepository, agentRepository, agentStaffRepository, agentAllianceRepository, enterpriseProfileRepository, enterpriseIndustryRepository, enterpriseReferenceMaterialRepository, taskGroupRepository, taskRepository, selectionQuestionnaireRepository, evaluationPointRepository, billingAddressRepository, jobSeekerInterestedJobListingRepository)
	return jobInformationInteractor
}

// JobSeeker
func InitializeJobSeekerInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal, slack config.Slack) interactor.JobSeekerInteractor {
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobSeekerStudentHistoryRepository := repository.NewJobSeekerStudentHistoryRepositoryImpl(db)
	jobSeekerWorkHistoryRepository := repository.NewJobSeekerWorkHistoryRepositoryImpl(db)
	jobSeekerExperienceIndustryRepository := repository.NewJobSeekerExperienceIndustryRepositoryImpl(db)
	jobSeekerExperienceOccupationRepository := repository.NewJobSeekerExperienceOccupationRepositoryImpl(db)
	jobSeekerLicenseRepository := repository.NewJobSeekerLicenseRepositoryImpl(db)
	jobSeekerSelfPromotionRepository := repository.NewJobSeekerSelfPromotionRepositoryImpl(db)
	jobSeekerDocumentRepository := repository.NewJobSeekerDocumentRepositoryImpl(db)
	jobSeekerDesiredIndustryRepository := repository.NewJobSeekerDesiredIndustryRepositoryImpl(db)
	jobSeekerDesiredOccupationRepository := repository.NewJobSeekerDesiredOccupationRepositoryImpl(db)
	jobSeekerDesiredWorkLocationRepository := repository.NewJobSeekerDesiredWorkLocationRepositoryImpl(db)
	jobSeekerDesiredHolidayTypeRepository := repository.NewJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	jobSeekerDevelopmentSkillRepository := repository.NewJobSeekerDevelopmentSkillRepositoryImpl(db)
	jobSeekerLanguageSkillRepository := repository.NewJobSeekerLanguageSkillRepositoryImpl(db)
	jobSeekerPCToolRepository := repository.NewJobSeekerPCToolRepositoryImpl(db)
	jobSeekerHideToAgentRepository := repository.NewJobSeekerHideToAgentRepositoryImpl(db)
	jobSeekerDepartmentHistoryRepository := repository.NewJobSeekerDepartmentHistoryRepositoryImpl(db)
	jobSeekerDesiredCompanyScaleRepository := repository.NewJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	jobSeekerExperienceJobRepository := repository.NewJobSeekerExperienceJobRepositoryImpl(db)
	jobSeekerLPLoginTokenRepository := repository.NewJobSeekerLPLoginTokenRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	jobInformationTargetRepository := repository.NewJobInformationTargetRepositoryImpl(db)
	jobInformationFeatureRepository := repository.NewJobInformationFeatureRepositoryImpl(db)
	jobInformationPrefectureRepository := repository.NewJobInformationPrefectureRepositoryImpl(db)
	jobInformationWorkCharmPointRepository := repository.NewJobInformationWorkCharmPointRepositoryImpl(db)
	jobInformationEmploymentStatusRepository := repository.NewJobInformationEmploymentStatusRepositoryImpl(db)
	jobInformationRequiredLicenseRepository := repository.NewJobInformationRequiredLicenseRepositoryImpl(db)
	jobInformationRequiredPCToolRepository := repository.NewJobInformationRequiredPCToolRepositoryImpl(db)
	jobInformationRequiredLanguageRepository := repository.NewJobInformationRequiredLanguageRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentRepository := repository.NewJobInformationRequiredExperienceDevelopmentRepositoryImpl(db)
	jobInformationRequiredExperienceJobRepository := repository.NewJobInformationRequiredExperienceJobRepositoryImpl(db)
	jobInformationRequiredExperienceIndustryRepository := repository.NewJobInformationRequiredExperienceIndustryRepositoryImpl(db)
	jobInformationRequiredExperienceOccupationRepository := repository.NewJobInformationRequiredExperienceOccupationRepositoryImpl(db)
	jobInformationRequiredSocialExperienceRepository := repository.NewJobInformationRequiredSocialExperienceRepositoryImpl(db)
	jobInformationSelectionFlowPatternRepository := repository.NewJobInformationSelectionFlowPatternRepositoryImpl(db)
	jobInformationSelectionInformationRepository := repository.NewJobInformationSelectionInformationRepositoryImpl(db)
	jobInformationOccupationRepository := repository.NewJobInformationOccupationRepositoryImpl(db)
	jobInformationRequiredConditionRepository := repository.NewJobInformationRequiredConditionRepositoryImpl(db)
	jobInformationRequiredLanguageTypeRepository := repository.NewJobInformationRequiredLanguageTypeRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentTypeRepository := repository.NewJobInformationRequiredExperienceDevelopmentTypeRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	agentInflowChannelOptionRepository := repository.NewAgentInflowChannelOptionRepositoryImpl(db)
	enterpriseProfileRepository := repository.NewEnterpriseProfileRepositoryImpl(db)
	enterpriseIndustryRepository := repository.NewEnterpriseIndustryRepositoryImpl(db)
	enterpriseReferenceMaterialRepository := repository.NewEnterpriseReferenceMaterialRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	chatMessageWithJobSeekerRepository := repository.NewChatMessageWithJobSeekerRepositoryImpl(db)
	initialQuestionnaireRepository := repository.NewInitialQuestionnaireRepositoryImpl(db)
	initialQuestionnaireDesiredIndustryRepository := repository.NewInitialQuestionnaireDesiredIndustryRepositoryImpl(db)
	initialQuestionnaireDesiredOccupationRepository := repository.NewInitialQuestionnaireDesiredOccupationRepositoryImpl(db)
	initialQuestionnaireDesiredWorkLocationRepository := repository.NewInitialQuestionnaireDesiredWorkLocationRepositoryImpl(db)
	taskGroupRepository := repository.NewTaskGroupRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	sendingJobSeekerStudentHistoryRepository := repository.NewSendingJobSeekerStudentHistoryRepositoryImpl(db)
	sendingJobSeekerWorkHistoryRepository := repository.NewSendingJobSeekerWorkHistoryRepositoryImpl(db)
	sendingJobSeekerExperienceIndustryRepository := repository.NewSendingJobSeekerExperienceIndustryRepositoryImpl(db)
	sendingJobSeekerExperienceOccupationRepository := repository.NewSendingJobSeekerExperienceOccupationRepositoryImpl(db)
	sendingJobSeekerLicenseRepository := repository.NewSendingJobSeekerLicenseRepositoryImpl(db)
	sendingJobSeekerSelfPromotionRepository := repository.NewSendingJobSeekerSelfPromotionRepositoryImpl(db)
	sendingJobSeekerDocumentRepository := repository.NewSendingJobSeekerDocumentRepositoryImpl(db)
	sendingJobSeekerDesiredIndustryRepository := repository.NewSendingJobSeekerDesiredIndustryRepositoryImpl(db)
	sendingJobSeekerDesiredOccupationRepository := repository.NewSendingJobSeekerDesiredOccupationRepositoryImpl(db)
	sendingJobSeekerDesiredWorkLocationRepository := repository.NewSendingJobSeekerDesiredWorkLocationRepositoryImpl(db)
	sendingJobSeekerDesiredHolidayTypeRepository := repository.NewSendingJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	sendingJobSeekerDevelopmentSkillRepository := repository.NewSendingJobSeekerDevelopmentSkillRepositoryImpl(db)
	sendingJobSeekerLanguageSkillRepository := repository.NewSendingJobSeekerLanguageSkillRepositoryImpl(db)
	sendingJobSeekerPCToolRepository := repository.NewSendingJobSeekerPCToolRepositoryImpl(db)
	sendingJobSeekerDepartmentHistoryRepository := repository.NewSendingJobSeekerDepartmentHistoryRepositoryImpl(db)
	sendingJobSeekerDesiredCompanyScaleRepository := repository.NewSendingJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	chatGroupWithSendingJobSeekerRepository := repository.NewChatGroupWithSendingJobSeekerRepositoryImpl(db)
	chatMessageWithSendingJobSeekerRepository := repository.NewChatMessageWithSendingJobSeekerRepositoryImpl(db)
	jobSeekerInteractor := interactor.NewJobSeekerInteractorImpl(fb, sendgrid, oneSignal, slack, jobSeekerRepository, jobSeekerStudentHistoryRepository, jobSeekerWorkHistoryRepository, jobSeekerExperienceIndustryRepository, jobSeekerExperienceOccupationRepository, jobSeekerLicenseRepository, jobSeekerSelfPromotionRepository, jobSeekerDocumentRepository, jobSeekerDesiredIndustryRepository, jobSeekerDesiredOccupationRepository, jobSeekerDesiredWorkLocationRepository, jobSeekerDesiredHolidayTypeRepository, jobSeekerDevelopmentSkillRepository, jobSeekerLanguageSkillRepository, jobSeekerPCToolRepository, jobSeekerHideToAgentRepository, jobSeekerDepartmentHistoryRepository, jobSeekerDesiredCompanyScaleRepository, jobSeekerExperienceJobRepository, jobSeekerLPLoginTokenRepository, jobInformationRepository, jobInformationTargetRepository, jobInformationFeatureRepository, jobInformationPrefectureRepository, jobInformationWorkCharmPointRepository, jobInformationEmploymentStatusRepository, jobInformationRequiredLicenseRepository, jobInformationRequiredPCToolRepository, jobInformationRequiredLanguageRepository, jobInformationRequiredExperienceDevelopmentRepository, jobInformationRequiredExperienceJobRepository, jobInformationRequiredExperienceIndustryRepository, jobInformationRequiredExperienceOccupationRepository, jobInformationRequiredSocialExperienceRepository, jobInformationSelectionFlowPatternRepository, jobInformationSelectionInformationRepository, jobInformationOccupationRepository, jobInformationRequiredConditionRepository, jobInformationRequiredLanguageTypeRepository, jobInformationRequiredExperienceDevelopmentTypeRepository, agentRepository, agentStaffRepository, agentAllianceRepository, agentInflowChannelOptionRepository, enterpriseProfileRepository, enterpriseIndustryRepository, enterpriseReferenceMaterialRepository, chatGroupWithJobSeekerRepository, chatMessageWithJobSeekerRepository, initialQuestionnaireRepository, initialQuestionnaireDesiredIndustryRepository, initialQuestionnaireDesiredOccupationRepository, initialQuestionnaireDesiredWorkLocationRepository, taskGroupRepository, taskRepository, interviewTaskRepository, interviewTaskGroupRepository, sendingJobSeekerRepository, sendingJobSeekerStudentHistoryRepository, sendingJobSeekerWorkHistoryRepository, sendingJobSeekerExperienceIndustryRepository, sendingJobSeekerExperienceOccupationRepository, sendingJobSeekerLicenseRepository, sendingJobSeekerSelfPromotionRepository, sendingJobSeekerDocumentRepository, sendingJobSeekerDesiredIndustryRepository, sendingJobSeekerDesiredOccupationRepository, sendingJobSeekerDesiredWorkLocationRepository, sendingJobSeekerDesiredHolidayTypeRepository, sendingJobSeekerDevelopmentSkillRepository, sendingJobSeekerLanguageSkillRepository, sendingJobSeekerPCToolRepository, sendingJobSeekerDepartmentHistoryRepository, sendingJobSeekerDesiredCompanyScaleRepository, chatGroupWithSendingJobSeekerRepository, chatMessageWithSendingJobSeekerRepository)
	return jobSeekerInteractor
}

// Task
func InitializeTaskInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.TaskInteractor {
	taskRepository := repository.NewTaskRepositoryImpl(db)
	taskGroupRepository := repository.NewTaskGroupRepositoryImpl(db)
	taskGroupDocumentRepository := repository.NewTaskGroupDocumentRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobSeekerStudentHistoryRepository := repository.NewJobSeekerStudentHistoryRepositoryImpl(db)
	jobSeekerWorkHistoryRepository := repository.NewJobSeekerWorkHistoryRepositoryImpl(db)
	jobSeekerExperienceIndustryRepository := repository.NewJobSeekerExperienceIndustryRepositoryImpl(db)
	jobSeekerExperienceOccupationRepository := repository.NewJobSeekerExperienceOccupationRepositoryImpl(db)
	jobSeekerLicenseRepository := repository.NewJobSeekerLicenseRepositoryImpl(db)
	jobSeekerSelfPromotionRepository := repository.NewJobSeekerSelfPromotionRepositoryImpl(db)
	jobSeekerDocumentRepository := repository.NewJobSeekerDocumentRepositoryImpl(db)
	jobSeekerDesiredIndustryRepository := repository.NewJobSeekerDesiredIndustryRepositoryImpl(db)
	jobSeekerDesiredOccupationRepository := repository.NewJobSeekerDesiredOccupationRepositoryImpl(db)
	jobSeekerDesiredWorkLocationRepository := repository.NewJobSeekerDesiredWorkLocationRepositoryImpl(db)
	jobSeekerDesiredHolidayTypeRepository := repository.NewJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	jobSeekerDevelopmentSkillRepository := repository.NewJobSeekerDevelopmentSkillRepositoryImpl(db)
	jobSeekerLanguageSkillRepository := repository.NewJobSeekerLanguageSkillRepositoryImpl(db)
	jobSeekerPCToolRepository := repository.NewJobSeekerPCToolRepositoryImpl(db)
	jobSeekerHideToAgentRepository := repository.NewJobSeekerHideToAgentRepositoryImpl(db)
	jobSeekerDepartmentHistoryRepository := repository.NewJobSeekerDepartmentHistoryRepositoryImpl(db)
	jobSeekerDesiredCompanyScaleRepository := repository.NewJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	evaluationPointRepository := repository.NewEvaluationPointRepositoryImpl(db)
	chatMessageWithJobSeekerRepository := repository.NewChatMessageWithJobSeekerRepositoryImpl(db)
	selectionQuestionnaireRepository := repository.NewSelectionQuestionnaireRepositoryImpl(db)
	selectionQuestionnaireMyRankingRepository := repository.NewSelectionQuestionnaireMyRankingRepositoryImpl(db)
	jobInformationSelectionFlowPatternRepository := repository.NewJobInformationSelectionFlowPatternRepositoryImpl(db)
	jobInformationSelectionInformationRepository := repository.NewJobInformationSelectionInformationRepositoryImpl(db)
	saleRepository := repository.NewSaleRepositoryImpl(db)
	taskIsRecommendDocumentRepository := repository.NewTaskIsRecommendDocumentRepositoryImpl(db)
	jobSeekerScheduleRepository := repository.NewJobSeekerScheduleRepositoryImpl(db)
	jobSeekerRescheduleRepository := repository.NewJobSeekerRescheduleRepositoryImpl(db)
	chatGroupWithAgentRepository := repository.NewChatGroupWithAgentRepositoryImpl(db)
	chatThreadWithAgentRepository := repository.NewChatThreadWithAgentRepositoryImpl(db)
	chatMessageWithAgentRepository := repository.NewChatMessageWithAgentRepositoryImpl(db)
	chatMessageToUserWithAgentRepository := repository.NewChatMessageToUserWithAgentRepositoryImpl(db)
	emailWithJobSeekerRepository := repository.NewEmailWithJobSeekerRepositoryImpl(db)
	jobSeekerInterestedJobListingRepository := repository.NewJobSeekerInterestedJobListingRepositoryImpl(db)
	taskInteractor := interactor.NewTaskInteractorImpl(fb, sendgrid, oneSignal, taskRepository, taskGroupRepository, taskGroupDocumentRepository, agentRepository, agentStaffRepository, jobInformationRepository, jobSeekerRepository, jobSeekerStudentHistoryRepository, jobSeekerWorkHistoryRepository, jobSeekerExperienceIndustryRepository, jobSeekerExperienceOccupationRepository, jobSeekerLicenseRepository, jobSeekerSelfPromotionRepository, jobSeekerDocumentRepository, jobSeekerDesiredIndustryRepository, jobSeekerDesiredOccupationRepository, jobSeekerDesiredWorkLocationRepository, jobSeekerDesiredHolidayTypeRepository, jobSeekerDevelopmentSkillRepository, jobSeekerLanguageSkillRepository, jobSeekerPCToolRepository, jobSeekerHideToAgentRepository, jobSeekerDepartmentHistoryRepository, jobSeekerDesiredCompanyScaleRepository, chatGroupWithJobSeekerRepository, evaluationPointRepository, chatMessageWithJobSeekerRepository, selectionQuestionnaireRepository, selectionQuestionnaireMyRankingRepository, jobInformationSelectionFlowPatternRepository, jobInformationSelectionInformationRepository, saleRepository, taskIsRecommendDocumentRepository, jobSeekerScheduleRepository, jobSeekerRescheduleRepository, chatGroupWithAgentRepository, chatThreadWithAgentRepository, chatMessageWithAgentRepository, chatMessageToUserWithAgentRepository, emailWithJobSeekerRepository, jobSeekerInterestedJobListingRepository)
	return taskInteractor
}

// SelectionQuestionnaire
func InitializeSelectionQuestionnaireInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.SelectionQuestionnaireInteractor {
	selectionQuestionnaireRepository := repository.NewSelectionQuestionnaireRepositoryImpl(db)
	selectionQuestionnaireMyRankingRepository := repository.NewSelectionQuestionnaireMyRankingRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	selectionQuestionnaireInteractor := interactor.NewSelectionQuestionnaireInteractorImpl(fb, sendgrid, selectionQuestionnaireRepository, selectionQuestionnaireMyRankingRepository, jobSeekerRepository, jobInformationRepository, agentStaffRepository)
	return selectionQuestionnaireInteractor
}

// ChatGroupWithJobSeeker
func InitializeChatGroupWithJobSeekerInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.ChatGroupWithJobSeekerInteractor {
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	chatGroupWithJobSeekerInteractor := interactor.NewChatGroupWithJobSeekerInteractorImpl(fb, sendgrid, chatGroupWithJobSeekerRepository)
	return chatGroupWithJobSeekerInteractor
}

// ChatMessageWithJobSeeker
func InitializeChatMessageWithJobSeekerInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.ChatMessageWithJobSeekerInteractor {
	chatMessageWithJobSeekerRepository := repository.NewChatMessageWithJobSeekerRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	chatMessageWithSendingJobSeekerRepository := repository.NewChatMessageWithSendingJobSeekerRepositoryImpl(db)
	chatGroupWithSendingJobSeekerRepository := repository.NewChatGroupWithSendingJobSeekerRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	chatMessageWithJobSeekerInteractor := interactor.NewChatMessageWithJobSeekerInteractorImpl(fb, sendgrid, oneSignal, chatMessageWithJobSeekerRepository, chatGroupWithJobSeekerRepository, jobSeekerRepository, agentRepository, agentStaffRepository, chatMessageWithSendingJobSeekerRepository, chatGroupWithSendingJobSeekerRepository, sendingJobSeekerRepository)
	return chatMessageWithJobSeekerInteractor
}

// ChatGroupWithAgent
func InitializeChatGroupWithAgentInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.ChatGroupWithAgentInteractor {
	chatGroupWithAgentRepository := repository.NewChatGroupWithAgentRepositoryImpl(db)
	chatThreadWithAgentRepository := repository.NewChatThreadWithAgentRepositoryImpl(db)
	chatMessageToUserWithAgentRepository := repository.NewChatMessageToUserWithAgentRepositoryImpl(db)
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	chatGroupWithAgentInteractor := interactor.NewChatGroupWithAgentInteractorImpl(fb, sendgrid, oneSignal, chatGroupWithAgentRepository, chatThreadWithAgentRepository, chatMessageToUserWithAgentRepository, agentAllianceRepository)
	return chatGroupWithAgentInteractor
}

// ChatThreadWithAgent
func InitializeChatThreadWithAgentInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.ChatThreadWithAgentInteractor {
	chatGroupWithAgentRepository := repository.NewChatGroupWithAgentRepositoryImpl(db)
	chatThreadWithAgentRepository := repository.NewChatThreadWithAgentRepositoryImpl(db)
	chatMessageWithAgentRepository := repository.NewChatMessageWithAgentRepositoryImpl(db)
	chatMessageToUserWithAgentRepository := repository.NewChatMessageToUserWithAgentRepositoryImpl(db)
	agentAllianceRepository := repository.NewAgentAllianceRepositoryImpl(db)
	chatThreadWithAgentInteractor := interactor.NewChatThreadWithAgentInteractorImpl(fb, sendgrid, oneSignal, chatGroupWithAgentRepository, chatThreadWithAgentRepository, chatMessageWithAgentRepository, chatMessageToUserWithAgentRepository, agentAllianceRepository)
	return chatThreadWithAgentInteractor
}

// ChatMessageWithAgent
func InitializeChatMessageWithAgentInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.ChatMessageWithAgentInteractor {
	chatMessageWithAgentRepository := repository.NewChatMessageWithAgentRepositoryImpl(db)
	chatGroupWithAgentRepository := repository.NewChatGroupWithAgentRepositoryImpl(db)
	chatThreadWithAgentRepository := repository.NewChatThreadWithAgentRepositoryImpl(db)
	chatMessageToUserWithAgentRepository := repository.NewChatMessageToUserWithAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	chatMessageWithAgentInteractor := interactor.NewChatMessageWithAgentInteractorImpl(fb, sendgrid, oneSignal, chatMessageWithAgentRepository, chatGroupWithAgentRepository, chatThreadWithAgentRepository, chatMessageToUserWithAgentRepository, agentStaffRepository)
	return chatMessageWithAgentInteractor
}

// InterviewTask
func InitializeInterviewTaskInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.InterviewTaskInteractor {
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	chatMessageWithJobSeekerRepository := repository.NewChatMessageWithJobSeekerRepositoryImpl(db)
	emailWithJobSeekerRepository := repository.NewEmailWithJobSeekerRepositoryImpl(db)
	interviewTaskInteractor := interactor.NewInterviewTaskInteractorImpl(fb, sendgrid, oneSignal, interviewTaskRepository, interviewTaskGroupRepository, jobSeekerRepository, chatGroupWithJobSeekerRepository, agentStaffRepository, chatMessageWithJobSeekerRepository, emailWithJobSeekerRepository)
	return interviewTaskInteractor
}

// InterviewAdjustmentTemplate
func InitializeInterviewAdjustmentTemplateInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.InterviewAdjustmentTemplateInteractor {
	interviewAdjustmentTemplateRepository := repository.NewInterviewAdjustmentTemplateRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	interviewAdjustmentTemplateInteractor := interactor.NewInterviewAdjustmentTemplateInteractorImpl(fb, sendgrid, interviewAdjustmentTemplateRepository, jobSeekerRepository)
	return interviewAdjustmentTemplateInteractor
}

// ScoutService
func InitializeScoutServiceInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal, appVar config.App, googleAPI config.GoogleAPI, slackAPI config.Slack) interactor.ScoutServiceInteractor {
	scoutServiceRepository := repository.NewScoutServiceRepositoryImpl(db)
	scoutServiceTemplateRepository := repository.NewScoutServiceTemplateRepositoryImpl(db)
	scoutServiceGetEntryTimeRepository := repository.NewScoutServiceGetEntryTimeRepositoryImpl(db)
	agentRobotRepository := repository.NewAgentRobotRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobSeekerStudentHistoryRepository := repository.NewJobSeekerStudentHistoryRepositoryImpl(db)
	jobSeekerWorkHistoryRepository := repository.NewJobSeekerWorkHistoryRepositoryImpl(db)
	jobSeekerExperienceIndustryRepository := repository.NewJobSeekerExperienceIndustryRepositoryImpl(db)
	jobSeekerExperienceOccupationRepository := repository.NewJobSeekerExperienceOccupationRepositoryImpl(db)
	jobSeekerLicenseRepository := repository.NewJobSeekerLicenseRepositoryImpl(db)
	jobSeekerSelfPromotionRepository := repository.NewJobSeekerSelfPromotionRepositoryImpl(db)
	jobSeekerDocumentRepository := repository.NewJobSeekerDocumentRepositoryImpl(db)
	jobSeekerDesiredIndustryRepository := repository.NewJobSeekerDesiredIndustryRepositoryImpl(db)
	jobSeekerDesiredOccupationRepository := repository.NewJobSeekerDesiredOccupationRepositoryImpl(db)
	jobSeekerDesiredWorkLocationRepository := repository.NewJobSeekerDesiredWorkLocationRepositoryImpl(db)
	jobSeekerDesiredHolidayTypeRepository := repository.NewJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	jobSeekerDevelopmentSkillRepository := repository.NewJobSeekerDevelopmentSkillRepositoryImpl(db)
	jobSeekerLanguageSkillRepository := repository.NewJobSeekerLanguageSkillRepositoryImpl(db)
	jobSeekerPCToolRepository := repository.NewJobSeekerPCToolRepositoryImpl(db)
	jobSeekerHideToAgentRepository := repository.NewJobSeekerHideToAgentRepositoryImpl(db)
	jobSeekerDepartmentHistoryRepository := repository.NewJobSeekerDepartmentHistoryRepositoryImpl(db)
	jobSeekerDesiredCompanyScaleRepository := repository.NewJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	interviewAdjustmentTemplateRepository := repository.NewInterviewAdjustmentTemplateRepositoryImpl(db)
	googleAuthenticationRepository := repository.NewGoogleAuthenticationRepositoryImpl(db)
	emailWithJobSeekerRepository := repository.NewEmailWithJobSeekerRepositoryImpl(db)
	userEntryRepository := repository.NewUserEntryRepositoryImpl(db)
	scoutServiceInteractor := interactor.NewScoutServiceInteractorImpl(fb, sendgrid, oneSignal, appVar, googleAPI, slackAPI, scoutServiceRepository, scoutServiceTemplateRepository, scoutServiceGetEntryTimeRepository, agentRobotRepository, agentStaffRepository, agentRepository, jobSeekerRepository, jobSeekerStudentHistoryRepository, jobSeekerWorkHistoryRepository, jobSeekerExperienceIndustryRepository, jobSeekerExperienceOccupationRepository, jobSeekerLicenseRepository, jobSeekerSelfPromotionRepository, jobSeekerDocumentRepository, jobSeekerDesiredIndustryRepository, jobSeekerDesiredOccupationRepository, jobSeekerDesiredWorkLocationRepository, jobSeekerDesiredHolidayTypeRepository, jobSeekerDevelopmentSkillRepository, jobSeekerLanguageSkillRepository, jobSeekerPCToolRepository, jobSeekerHideToAgentRepository, jobSeekerDepartmentHistoryRepository, jobSeekerDesiredCompanyScaleRepository, chatGroupWithJobSeekerRepository, interviewTaskGroupRepository, interviewTaskRepository, interviewAdjustmentTemplateRepository, googleAuthenticationRepository, emailWithJobSeekerRepository, userEntryRepository)
	return scoutServiceInteractor
}

// Sale
func InitializeSaleInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.SaleInteractor {
	saleRepository := repository.NewSaleRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	chatMessageWithJobSeekerRepository := repository.NewChatMessageWithJobSeekerRepositoryImpl(db)
	saleInteractor := interactor.NewSaleInteractorImpl(fb, sendgrid, oneSignal, saleRepository, jobSeekerRepository, chatGroupWithJobSeekerRepository, agentStaffRepository, chatMessageWithJobSeekerRepository)
	return saleInteractor
}

// AgentMonthlySale
func InitializeAgentMonthlySaleInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.AgentMonthlySaleInteractor {
	agentMonthlySaleRepository := repository.NewAgentMonthlySaleRepositoryImpl(db)
	agentStaffMonthlySaleRepository := repository.NewAgentStaffMonthlySaleRepositoryImpl(db)
	agentSaleManagementRepository := repository.NewAgentSaleManagementRepositoryImpl(db)
	agentStaffSaleManagementRepository := repository.NewAgentStaffSaleManagementRepositoryImpl(db)
	saleRepository := repository.NewSaleRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	agentMonthlySaleInteractor := interactor.NewAgentMonthlySaleInteractorImpl(fb, sendgrid, agentMonthlySaleRepository, agentStaffMonthlySaleRepository, agentSaleManagementRepository, agentStaffSaleManagementRepository, saleRepository, taskRepository, interviewTaskRepository, interviewTaskGroupRepository)
	return agentMonthlySaleInteractor
}

// AgentStaffMonthlySale
func InitializeAgentStaffMonthlySaleInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.AgentStaffMonthlySaleInteractor {
	agentStaffMonthlySaleRepository := repository.NewAgentStaffMonthlySaleRepositoryImpl(db)
	agentStaffSaleManagementRepository := repository.NewAgentStaffSaleManagementRepositoryImpl(db)
	agentSaleManagementRepository := repository.NewAgentSaleManagementRepositoryImpl(db)
	saleRepository := repository.NewSaleRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	agentStaffMonthlySaleInteractor := interactor.NewAgentStaffMonthlySaleInteractorImpl(fb, sendgrid, agentStaffMonthlySaleRepository, agentStaffSaleManagementRepository, agentSaleManagementRepository, saleRepository, taskRepository, interviewTaskRepository, interviewTaskGroupRepository)
	return agentStaffMonthlySaleInteractor
}

// Schedule
func InitializeScheduleInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.ScheduleInteractor {
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	taskGroupRepository := repository.NewTaskGroupRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	jobSeekerScheduleRepository := repository.NewJobSeekerScheduleRepositoryImpl(db)
	scheduleInteractor := interactor.NewScheduleInteractorImpl(fb, sendgrid, oneSignal, agentRepository, agentStaffRepository, interviewTaskGroupRepository, interviewTaskRepository, taskGroupRepository, taskRepository, jobSeekerScheduleRepository)
	return scheduleInteractor
}

// Dashboard
func InitializeDashboardInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.DashboardInteractor {
	agentMonthlySaleRepository := repository.NewAgentMonthlySaleRepositoryImpl(db)
	agentStaffMonthlySaleRepository := repository.NewAgentStaffMonthlySaleRepositoryImpl(db)
	agentSaleManagementRepository := repository.NewAgentSaleManagementRepositoryImpl(db)
	agentStaffSaleManagementRepository := repository.NewAgentStaffSaleManagementRepositoryImpl(db)
	saleRepository := repository.NewSaleRepositoryImpl(db)
	taskRepository := repository.NewTaskRepositoryImpl(db)
	interviewTaskRepository := repository.NewInterviewTaskRepositoryImpl(db)
	interviewTaskGroupRepository := repository.NewInterviewTaskGroupRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	jobSeekerStudentHistoryRepository := repository.NewJobSeekerStudentHistoryRepositoryImpl(db)
	jobSeekerWorkHistoryRepository := repository.NewJobSeekerWorkHistoryRepositoryImpl(db)
	jobSeekerExperienceIndustryRepository := repository.NewJobSeekerExperienceIndustryRepositoryImpl(db)
	jobSeekerExperienceOccupationRepository := repository.NewJobSeekerExperienceOccupationRepositoryImpl(db)
	jobSeekerLicenseRepository := repository.NewJobSeekerLicenseRepositoryImpl(db)
	jobSeekerSelfPromotionRepository := repository.NewJobSeekerSelfPromotionRepositoryImpl(db)
	jobSeekerDocumentRepository := repository.NewJobSeekerDocumentRepositoryImpl(db)
	jobSeekerDesiredIndustryRepository := repository.NewJobSeekerDesiredIndustryRepositoryImpl(db)
	jobSeekerDesiredOccupationRepository := repository.NewJobSeekerDesiredOccupationRepositoryImpl(db)
	jobSeekerDesiredWorkLocationRepository := repository.NewJobSeekerDesiredWorkLocationRepositoryImpl(db)
	jobSeekerDesiredHolidayTypeRepository := repository.NewJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	jobSeekerDevelopmentSkillRepository := repository.NewJobSeekerDevelopmentSkillRepositoryImpl(db)
	jobSeekerLanguageSkillRepository := repository.NewJobSeekerLanguageSkillRepositoryImpl(db)
	jobSeekerPCToolRepository := repository.NewJobSeekerPCToolRepositoryImpl(db)
	jobSeekerHideToAgentRepository := repository.NewJobSeekerHideToAgentRepositoryImpl(db)
	jobSeekerDepartmentHistoryRepository := repository.NewJobSeekerDepartmentHistoryRepositoryImpl(db)
	jobSeekerDesiredCompanyScaleRepository := repository.NewJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	dashboardInteractor := interactor.NewDashboardInteractorImpl(fb, sendgrid, agentMonthlySaleRepository, agentStaffMonthlySaleRepository, agentSaleManagementRepository, agentStaffSaleManagementRepository, saleRepository, taskRepository, interviewTaskRepository, interviewTaskGroupRepository, jobSeekerRepository, jobSeekerStudentHistoryRepository, jobSeekerWorkHistoryRepository, jobSeekerExperienceIndustryRepository, jobSeekerExperienceOccupationRepository, jobSeekerLicenseRepository, jobSeekerSelfPromotionRepository, jobSeekerDocumentRepository, jobSeekerDesiredIndustryRepository, jobSeekerDesiredOccupationRepository, jobSeekerDesiredWorkLocationRepository, jobSeekerDesiredHolidayTypeRepository, jobSeekerDevelopmentSkillRepository, jobSeekerLanguageSkillRepository, jobSeekerPCToolRepository, jobSeekerHideToAgentRepository, jobSeekerDepartmentHistoryRepository, jobSeekerDesiredCompanyScaleRepository)
	return dashboardInteractor
}

// JobSeekerSchedule
func InitializeJobSeekerScheduleInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.JobSeekerScheduleInteractor {
	jobSeekerScheduleRepository := repository.NewJobSeekerScheduleRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	jobSeekerScheduleInteractor := interactor.NewJobSeekerScheduleInteractorImpl(fb, sendgrid, jobSeekerScheduleRepository, jobSeekerRepository, agentStaffRepository)
	return jobSeekerScheduleInteractor
}

// InitialEnterpriseImporter
func InitializeInitialEnterpriseImporterInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.InitialEnterpriseImporterInteractor {
	initialEnterpriseImporterRepository := repository.NewInitialEnterpriseImporterRepositoryImpl(db)
	enterpriseProfileRepository := repository.NewEnterpriseProfileRepositoryImpl(db)
	enterpriseIndustryRepository := repository.NewEnterpriseIndustryRepositoryImpl(db)
	enterpriseReferenceMaterialRepository := repository.NewEnterpriseReferenceMaterialRepositoryImpl(db)
	billingAddressRepository := repository.NewBillingAddressRepositoryImpl(db)
	billingAddressHRStaffRepository := repository.NewBillingAddressHRStaffRepositoryImpl(db)
	billingAddressRAStaffRepository := repository.NewBillingAddressRAStaffRepositoryImpl(db)
	jobInformationRepository := repository.NewJobInformationRepositoryImpl(db)
	jobInformationTargetRepository := repository.NewJobInformationTargetRepositoryImpl(db)
	jobInformationFeatureRepository := repository.NewJobInformationFeatureRepositoryImpl(db)
	jobInformationPrefectureRepository := repository.NewJobInformationPrefectureRepositoryImpl(db)
	jobInformationWorkCharmPointRepository := repository.NewJobInformationWorkCharmPointRepositoryImpl(db)
	jobInformationEmploymentStatusRepository := repository.NewJobInformationEmploymentStatusRepositoryImpl(db)
	jobInformationRequiredConditionRepository := repository.NewJobInformationRequiredConditionRepositoryImpl(db)
	jobInformationRequiredLicenseRepository := repository.NewJobInformationRequiredLicenseRepositoryImpl(db)
	jobInformationRequiredPCToolRepository := repository.NewJobInformationRequiredPCToolRepositoryImpl(db)
	jobInformationRequiredLanguageRepository := repository.NewJobInformationRequiredLanguageRepositoryImpl(db)
	jobInformationRequiredLanguageTypeRepository := repository.NewJobInformationRequiredLanguageTypeRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentRepository := repository.NewJobInformationRequiredExperienceDevelopmentRepositoryImpl(db)
	jobInformationRequiredExperienceDevelopmentTypeRepository := repository.NewJobInformationRequiredExperienceDevelopmentTypeRepositoryImpl(db)
	jobInformationRequiredExperienceJobRepository := repository.NewJobInformationRequiredExperienceJobRepositoryImpl(db)
	jobInformationRequiredExperienceIndustryRepository := repository.NewJobInformationRequiredExperienceIndustryRepositoryImpl(db)
	jobInformationRequiredExperienceOccupationRepository := repository.NewJobInformationRequiredExperienceOccupationRepositoryImpl(db)
	jobInformationRequiredSocialExperienceRepository := repository.NewJobInformationRequiredSocialExperienceRepositoryImpl(db)
	jobInformationSelectionFlowPatternRepository := repository.NewJobInformationSelectionFlowPatternRepositoryImpl(db)
	jobInformationSelectionInformationRepository := repository.NewJobInformationSelectionInformationRepositoryImpl(db)
	jobInformationOccupationRepository := repository.NewJobInformationOccupationRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	initialEnterpriseImporterInteractor := interactor.NewInitialEnterpriseImporterInteractorImpl(fb, sendgrid, oneSignal, initialEnterpriseImporterRepository, enterpriseProfileRepository, enterpriseIndustryRepository, enterpriseReferenceMaterialRepository, billingAddressRepository, billingAddressHRStaffRepository, billingAddressRAStaffRepository, jobInformationRepository, jobInformationTargetRepository, jobInformationFeatureRepository, jobInformationPrefectureRepository, jobInformationWorkCharmPointRepository, jobInformationEmploymentStatusRepository, jobInformationRequiredConditionRepository, jobInformationRequiredLicenseRepository, jobInformationRequiredPCToolRepository, jobInformationRequiredLanguageRepository, jobInformationRequiredLanguageTypeRepository, jobInformationRequiredExperienceDevelopmentRepository, jobInformationRequiredExperienceDevelopmentTypeRepository, jobInformationRequiredExperienceJobRepository, jobInformationRequiredExperienceIndustryRepository, jobInformationRequiredExperienceOccupationRepository, jobInformationRequiredSocialExperienceRepository, jobInformationSelectionFlowPatternRepository, jobInformationSelectionInformationRepository, jobInformationOccupationRepository, agentRepository, agentStaffRepository)
	return initialEnterpriseImporterInteractor
}

// NotificationForUser
func InitializeNotificationForUserInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.NotificationForUserInteractor {
	notificationForUserRepository := repository.NewNotificationForUserRepositoryImpl(db)
	userNotificationViewRepository := repository.NewUserNotificationViewRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	notificationForUserInteractor := interactor.NewNotificationForUserInteractorImpl(fb, sendgrid, oneSignal, notificationForUserRepository, userNotificationViewRepository, agentRepository)
	return notificationForUserInteractor
}

// EmailWithJobSeeker
func InitializeEmailWithJobSeekerInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.EmailWithJobSeekerInteractor {
	emailWithJobSeekerRepository := repository.NewEmailWithJobSeekerRepositoryImpl(db)
	chatGroupWithJobSeekerRepository := repository.NewChatGroupWithJobSeekerRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	emailWithJobSeekerInteractor := interactor.NewEmailWithJobSeekerInteractorImpl(fb, sendgrid, oneSignal, emailWithJobSeekerRepository, chatGroupWithJobSeekerRepository, agentStaffRepository)
	return emailWithJobSeekerInteractor
}

// DeploymentReflection
func InitializeDeploymentReflectionInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.DeploymentReflectionInteractor {
	deploymentInformationRepository := repository.NewDeploymentInformationRepositoryImpl(db)
	deploymentReflectionRepository := repository.NewDeploymentReflectionRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	deploymentReflectionInteractor := interactor.NewDeploymentReflectionInteractorImpl(fb, sendgrid, oneSignal, deploymentInformationRepository, deploymentReflectionRepository, agentStaffRepository)
	return deploymentReflectionInteractor
}

// AgentInflowChannelOption
func InitializeAgentInflowChannelOptionInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.AgentInflowChannelOptionInteractor {
	agentInflowChannelOptionRepository := repository.NewAgentInflowChannelOptionRepositoryImpl(db)
	agentInflowChannelOptionInteractor := interactor.NewAgentInflowChannelOptionInteractorImpl(fb, sendgrid, oneSignal, agentInflowChannelOptionRepository)
	return agentInflowChannelOptionInteractor
}

// SendingCustomer
func InitializeSendingCustomerInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.SendingCustomerInteractor {
	sendingCustomerRepository := repository.NewSendingCustomerRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	sendingCustomerInteractor := interactor.NewSendingCustomerInteractorImpl(fb, sendgrid, oneSignal, sendingCustomerRepository, sendingJobSeekerRepository, agentRepository, agentStaffRepository)
	return sendingCustomerInteractor
}

// SendingJobSeeker
func InitializeSendingJobSeekerInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.SendingJobSeekerInteractor {
	sendingCustomerRepository := repository.NewSendingCustomerRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	sendingJobSeekerStudentHistoryRepository := repository.NewSendingJobSeekerStudentHistoryRepositoryImpl(db)
	sendingJobSeekerWorkHistoryRepository := repository.NewSendingJobSeekerWorkHistoryRepositoryImpl(db)
	sendingJobSeekerExperienceIndustryRepository := repository.NewSendingJobSeekerExperienceIndustryRepositoryImpl(db)
	sendingJobSeekerExperienceOccupationRepository := repository.NewSendingJobSeekerExperienceOccupationRepositoryImpl(db)
	sendingJobSeekerLicenseRepository := repository.NewSendingJobSeekerLicenseRepositoryImpl(db)
	sendingJobSeekerSelfPromotionRepository := repository.NewSendingJobSeekerSelfPromotionRepositoryImpl(db)
	sendingJobSeekerDocumentRepository := repository.NewSendingJobSeekerDocumentRepositoryImpl(db)
	sendingJobSeekerDesiredIndustryRepository := repository.NewSendingJobSeekerDesiredIndustryRepositoryImpl(db)
	sendingJobSeekerDesiredOccupationRepository := repository.NewSendingJobSeekerDesiredOccupationRepositoryImpl(db)
	sendingJobSeekerDesiredWorkLocationRepository := repository.NewSendingJobSeekerDesiredWorkLocationRepositoryImpl(db)
	sendingJobSeekerDesiredHolidayTypeRepository := repository.NewSendingJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	sendingJobSeekerDevelopmentSkillRepository := repository.NewSendingJobSeekerDevelopmentSkillRepositoryImpl(db)
	sendingJobSeekerLanguageSkillRepository := repository.NewSendingJobSeekerLanguageSkillRepositoryImpl(db)
	sendingJobSeekerPCToolRepository := repository.NewSendingJobSeekerPCToolRepositoryImpl(db)
	sendingJobSeekerDepartmentHistoryRepository := repository.NewSendingJobSeekerDepartmentHistoryRepositoryImpl(db)
	sendingJobSeekerDesiredCompanyScaleRepository := repository.NewSendingJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	chatGroupWithSendingJobSeekerRepository := repository.NewChatGroupWithSendingJobSeekerRepositoryImpl(db)
	jobSeekerRepository := repository.NewJobSeekerRepositoryImpl(db)
	sendingJobSeekerEndStatusRepository := repository.NewSendingJobSeekerEndStatusRepositoryImpl(db)
	sendingJobSeekerIsViewRepository := repository.NewSendingJobSeekerIsViewRepositoryImpl(db)
	sendingEnterpriseRepository := repository.NewSendingEnterpriseRepositoryImpl(db)
	sendingJobSeekerInteractor := interactor.NewSendingJobSeekerInteractorImpl(fb, sendgrid, oneSignal, sendingCustomerRepository, sendingJobSeekerRepository, sendingJobSeekerStudentHistoryRepository, sendingJobSeekerWorkHistoryRepository, sendingJobSeekerExperienceIndustryRepository, sendingJobSeekerExperienceOccupationRepository, sendingJobSeekerLicenseRepository, sendingJobSeekerSelfPromotionRepository, sendingJobSeekerDocumentRepository, sendingJobSeekerDesiredIndustryRepository, sendingJobSeekerDesiredOccupationRepository, sendingJobSeekerDesiredWorkLocationRepository, sendingJobSeekerDesiredHolidayTypeRepository, sendingJobSeekerDevelopmentSkillRepository, sendingJobSeekerLanguageSkillRepository, sendingJobSeekerPCToolRepository, sendingJobSeekerDepartmentHistoryRepository, sendingJobSeekerDesiredCompanyScaleRepository, agentRepository, agentStaffRepository, chatGroupWithSendingJobSeekerRepository, jobSeekerRepository, sendingJobSeekerEndStatusRepository, sendingJobSeekerIsViewRepository, sendingEnterpriseRepository)
	return sendingJobSeekerInteractor
}

// ChatGroupWithSendingJobSeeker
func InitializeChatGroupWithSendingJobSeekerInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.ChatGroupWithSendingJobSeekerInteractor {
	chatGroupWithSendingJobSeekerRepository := repository.NewChatGroupWithSendingJobSeekerRepositoryImpl(db)
	chatGroupWithSendingJobSeekerInteractor := interactor.NewChatGroupWithSendingJobSeekerInteractorImpl(fb, sendgrid, chatGroupWithSendingJobSeekerRepository)
	return chatGroupWithSendingJobSeekerInteractor
}

// ChatMessageWithSendingJobSeeker
func InitializeChatMessageWithSendingJobSeekerInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.ChatMessageWithSendingJobSeekerInteractor {
	chatMessageWithSendingJobSeekerRepository := repository.NewChatMessageWithSendingJobSeekerRepositoryImpl(db)
	chatGroupWithSendingJobSeekerRepository := repository.NewChatGroupWithSendingJobSeekerRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	chatMessageWithSendingJobSeekerInteractor := interactor.NewChatMessageWithSendingJobSeekerInteractorImpl(fb, sendgrid, oneSignal, chatMessageWithSendingJobSeekerRepository, chatGroupWithSendingJobSeekerRepository, sendingJobSeekerRepository, agentRepository, agentStaffRepository)
	return chatMessageWithSendingJobSeekerInteractor
}

// EmailWithSendingJobSeeker
func InitializeEmailWithSendingJobSeekerInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, oneSignal config.OneSignal) interactor.EmailWithSendingJobSeekerInteractor {
	emailWithSendingJobSeekerRepository := repository.NewEmailWithSendingJobSeekerRepositoryImpl(db)
	chatGroupWithSendingJobSeekerRepository := repository.NewChatGroupWithSendingJobSeekerRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	emailWithSendingJobSeekerInteractor := interactor.NewEmailWithSendingJobSeekerInteractorImpl(fb, sendgrid, oneSignal, emailWithSendingJobSeekerRepository, chatGroupWithSendingJobSeekerRepository, agentStaffRepository)
	return emailWithSendingJobSeekerInteractor
}

// SendingEnterprise
func InitializeSendingEnterpriseInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.SendingEnterpriseInteractor {
	sendingEnterpriseRepository := repository.NewSendingEnterpriseRepositoryImpl(db)
	sendingBillingAddressRepository := repository.NewSendingBillingAddressRepositoryImpl(db)
	sendingJobInformationRepository := repository.NewSendingJobInformationRepositoryImpl(db)
	sendingBillingAddressStaffRepository := repository.NewSendingBillingAddressStaffRepositoryImpl(db)
	sendingEnterpriseReferenceMaterialRepository := repository.NewSendingEnterpriseReferenceMaterialRepositoryImpl(db)
	sendingPhaseRepository := repository.NewSendingPhaseRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	sendingJobSeekerStudentHistoryRepository := repository.NewSendingJobSeekerStudentHistoryRepositoryImpl(db)
	sendingJobSeekerWorkHistoryRepository := repository.NewSendingJobSeekerWorkHistoryRepositoryImpl(db)
	sendingJobSeekerExperienceIndustryRepository := repository.NewSendingJobSeekerExperienceIndustryRepositoryImpl(db)
	sendingJobSeekerExperienceOccupationRepository := repository.NewSendingJobSeekerExperienceOccupationRepositoryImpl(db)
	sendingJobSeekerLicenseRepository := repository.NewSendingJobSeekerLicenseRepositoryImpl(db)
	sendingJobSeekerSelfPromotionRepository := repository.NewSendingJobSeekerSelfPromotionRepositoryImpl(db)
	sendingJobSeekerDocumentRepository := repository.NewSendingJobSeekerDocumentRepositoryImpl(db)
	sendingJobSeekerDesiredIndustryRepository := repository.NewSendingJobSeekerDesiredIndustryRepositoryImpl(db)
	sendingJobSeekerDesiredOccupationRepository := repository.NewSendingJobSeekerDesiredOccupationRepositoryImpl(db)
	sendingJobSeekerDesiredWorkLocationRepository := repository.NewSendingJobSeekerDesiredWorkLocationRepositoryImpl(db)
	sendingJobSeekerDesiredHolidayTypeRepository := repository.NewSendingJobSeekerDesiredHolidayTypeRepositoryImpl(db)
	sendingJobSeekerDevelopmentSkillRepository := repository.NewSendingJobSeekerDevelopmentSkillRepositoryImpl(db)
	sendingJobSeekerLanguageSkillRepository := repository.NewSendingJobSeekerLanguageSkillRepositoryImpl(db)
	sendingJobSeekerPCToolRepository := repository.NewSendingJobSeekerPCToolRepositoryImpl(db)
	sendingJobSeekerDepartmentHistoryRepository := repository.NewSendingJobSeekerDepartmentHistoryRepositoryImpl(db)
	sendingJobSeekerDesiredCompanyScaleRepository := repository.NewSendingJobSeekerDesiredCompanyScaleRepositoryImpl(db)
	sendingCustomerRepository := repository.NewSendingCustomerRepositoryImpl(db)
	sendingJobSeekerDesiredJobInformationRepository := repository.NewSendingJobSeekerDesiredJobInformationRepositoryImpl(db)
	sendingShareDocumentRepository := repository.NewSendingShareDocumentRepositoryImpl(db)
	sendingEnterpriseSpecialityRepository := repository.NewSendingEnterpriseSpecialityRepositoryImpl(db)
	sendingEnterpriseInteractor := interactor.NewSendingEnterpriseInteractorImpl(fb, sendgrid, sendingEnterpriseRepository, sendingBillingAddressRepository, sendingJobInformationRepository, sendingBillingAddressStaffRepository, sendingEnterpriseReferenceMaterialRepository, sendingPhaseRepository, sendingJobSeekerRepository, sendingJobSeekerStudentHistoryRepository, sendingJobSeekerWorkHistoryRepository, sendingJobSeekerExperienceIndustryRepository, sendingJobSeekerExperienceOccupationRepository, sendingJobSeekerLicenseRepository, sendingJobSeekerSelfPromotionRepository, sendingJobSeekerDocumentRepository, sendingJobSeekerDesiredIndustryRepository, sendingJobSeekerDesiredOccupationRepository, sendingJobSeekerDesiredWorkLocationRepository, sendingJobSeekerDesiredHolidayTypeRepository, sendingJobSeekerDevelopmentSkillRepository, sendingJobSeekerLanguageSkillRepository, sendingJobSeekerPCToolRepository, sendingJobSeekerDepartmentHistoryRepository, sendingJobSeekerDesiredCompanyScaleRepository, sendingCustomerRepository, sendingJobSeekerDesiredJobInformationRepository, sendingShareDocumentRepository, sendingEnterpriseSpecialityRepository)
	return sendingEnterpriseInteractor
}

// SendingBillingAddress
func InitializeSendingBillingAddressInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.SendingBillingAddressInteractor {
	sendingBillingAddressRepository := repository.NewSendingBillingAddressRepositoryImpl(db)
	sendingBillingAddressStaffRepository := repository.NewSendingBillingAddressStaffRepositoryImpl(db)
	sendingJobInformationRepository := repository.NewSendingJobInformationRepositoryImpl(db)
	sendingBillingAddressInteractor := interactor.NewSendingBillingAddressInteractorImpl(fb, sendgrid, sendingBillingAddressRepository, sendingBillingAddressStaffRepository, sendingJobInformationRepository)
	return sendingBillingAddressInteractor
}

// SendingJobInformation
func InitializeSendingJobInformationInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.SendingJobInformationInteractor {
	sendingJobInformationRepository := repository.NewSendingJobInformationRepositoryImpl(db)
	sendingEnterpriseRepository := repository.NewSendingEnterpriseRepositoryImpl(db)
	sendingJobInformationTargetRepository := repository.NewSendingJobInformationTargetRepositoryImpl(db)
	sendingJobInformationFeatureRepository := repository.NewSendingJobInformationFeatureRepositoryImpl(db)
	sendingJobInformationPrefectureRepository := repository.NewSendingJobInformationPrefectureRepositoryImpl(db)
	sendingJobInformationWorkCharmPointRepository := repository.NewSendingJobInformationWorkCharmPointRepositoryImpl(db)
	sendingJobInformationEmploymentStatusRepository := repository.NewSendingJobInformationEmploymentStatusRepositoryImpl(db)
	sendingJobInformationRequiredLicenseRepository := repository.NewSendingJobInformationRequiredLicenseRepositoryImpl(db)
	sendingJobInformationRequiredPCToolRepository := repository.NewSendingJobInformationRequiredPCToolRepositoryImpl(db)
	sendingJobInformationRequiredLanguageRepository := repository.NewSendingJobInformationRequiredLanguageRepositoryImpl(db)
	sendingJobInformationRequiredExperienceDevelopmentRepository := repository.NewSendingJobInformationRequiredExperienceDevelopmentRepositoryImpl(db)
	sendingJobInformationRequiredExperienceJobRepository := repository.NewSendingJobInformationRequiredExperienceJobRepositoryImpl(db)
	sendingJobInformationRequiredExperienceIndustryRepository := repository.NewSendingJobInformationRequiredExperienceIndustryRepositoryImpl(db)
	sendingJobInformationRequiredExperienceOccupationRepository := repository.NewSendingJobInformationRequiredExperienceOccupationRepositoryImpl(db)
	sendingJobInformationRequiredSocialExperienceRepository := repository.NewSendingJobInformationRequiredSocialExperienceRepositoryImpl(db)
	sendingJobInformationOccupationRepository := repository.NewSendingJobInformationOccupationRepositoryImpl(db)
	sendingJobInformationRequiredConditionRepository := repository.NewSendingJobInformationRequiredConditionRepositoryImpl(db)
	sendingJobInformationRequiredExperienceDevelopmentTypeRepository := repository.NewSendingJobInformationRequiredExperienceDevelopmentTypeRepositoryImpl(db)
	sendingJobInformationRequiredLanguageTypeRepository := repository.NewSendingJobInformationRequiredLanguageTypeRepositoryImpl(db)
	sendingJobInformationIndustryRepository := repository.NewSendingJobInformationIndustryRepositoryImpl(db)
	sendingJobInformationInteractor := interactor.NewSendingJobInformationInteractorImpl(fb, sendgrid, sendingJobInformationRepository, sendingEnterpriseRepository, sendingJobInformationTargetRepository, sendingJobInformationFeatureRepository, sendingJobInformationPrefectureRepository, sendingJobInformationWorkCharmPointRepository, sendingJobInformationEmploymentStatusRepository, sendingJobInformationRequiredLicenseRepository, sendingJobInformationRequiredPCToolRepository, sendingJobInformationRequiredLanguageRepository, sendingJobInformationRequiredExperienceDevelopmentRepository, sendingJobInformationRequiredExperienceJobRepository, sendingJobInformationRequiredExperienceIndustryRepository, sendingJobInformationRequiredExperienceOccupationRepository, sendingJobInformationRequiredSocialExperienceRepository, sendingJobInformationOccupationRepository, sendingJobInformationRequiredConditionRepository, sendingJobInformationRequiredExperienceDevelopmentTypeRepository, sendingJobInformationRequiredLanguageTypeRepository, sendingJobInformationIndustryRepository)
	return sendingJobInformationInteractor
}

// SendingPhase
func InitializeSendingPhaseInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.SendingPhaseInteractor {
	sendingPhaseRepository := repository.NewSendingPhaseRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	sendingCustomerRepository := repository.NewSendingCustomerRepositoryImpl(db)
	sendingPhaseEndStatusRepository := repository.NewSendingPhaseEndStatusRepositoryImpl(db)
	sendingPhaseInteractor := interactor.NewSendingPhaseInteractorImpl(fb, sendgrid, sendingPhaseRepository, sendingJobSeekerRepository, sendingCustomerRepository, sendingPhaseEndStatusRepository)
	return sendingPhaseInteractor
}

// SendingJobSeekerDesiredJobInformation
func InitializeSendingJobSeekerDesiredJobInformationInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.SendingJobSeekerDesiredJobInformationInteractor {
	sendingJobSeekerDesiredJobInformationRepository := repository.NewSendingJobSeekerDesiredJobInformationRepositoryImpl(db)
	sendingJobSeekerDesiredJobInformationInteractor := interactor.NewSendingJobSeekerDesiredJobInformationInteractorImpl(fb, sendgrid, sendingJobSeekerDesiredJobInformationRepository)
	return sendingJobSeekerDesiredJobInformationInteractor
}

// SendingSale
func InitializeSendingSaleInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid) interactor.SendingSaleInteractor {
	sendingSaleRepository := repository.NewSendingSaleRepositoryImpl(db)
	sendingEnterpriseRepository := repository.NewSendingEnterpriseRepositoryImpl(db)
	sendingPhaseRepository := repository.NewSendingPhaseRepositoryImpl(db)
	sendingJobSeekerRepository := repository.NewSendingJobSeekerRepositoryImpl(db)
	sendingCustomerRepository := repository.NewSendingCustomerRepositoryImpl(db)
	sendingSaleInteractor := interactor.NewSendingSaleInteractorImpl(fb, sendgrid, sendingSaleRepository, sendingEnterpriseRepository, sendingPhaseRepository, sendingJobSeekerRepository, sendingCustomerRepository)
	return sendingSaleInteractor
}

// GoogleAuthentication
func InitializeGoogleAuthenticationInteractor(fb usecase.Firebase, db interfaces.SQLExecuter, sendgrid config.Sendgrid, googleAPI config.GoogleAPI) interactor.GoogleAuthenticationInteractor {
	agentRepository := repository.NewAgentRepositoryImpl(db)
	agentStaffRepository := repository.NewAgentStaffRepositoryImpl(db)
	googleAuthenticationRepository := repository.NewGoogleAuthenticationRepositoryImpl(db)
	googleAuthenticationInteractor := interactor.NewGoogleAuthenticationInteractorImpl(fb, sendgrid, googleAPI, agentRepository, agentStaffRepository, googleAuthenticationRepository)
	return googleAuthenticationInteractor
}

// wire.go:

var wireSet = wire.NewSet(handler.WireSet, interactor.WireSet, repository.WireSet)
